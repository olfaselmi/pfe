{"ast":null,"code":"import { takeEvery, fork, put, all, call } from \"redux-saga/effects\";\n\n//Account Redux states\nimport { AuthRegisterActionTypes } from \"./types\";\nimport { authRegisterApiResponseSuccess, authRegisterApiResponseError } from \"./actions\";\n\n//Include Both Helper File with needed methods\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\";\nimport { postFakeRegister } from \"../../../api/index\";\n\n// initialize relavant method of both Auth\nconst fireBaseBackend = getFirebaseBackend();\n\n// Is user register successfull then direct plot user in redux.\nfunction* registerUser({\n  payload: {\n    user\n  }\n}) {\n  try {\n    // if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n    //   const response: Promise<any> = yield call(\n    //     fireBaseBackend.registerUser,\n    //     user.email,\n    //     user.password\n    //   );\n    //   yield put(\n    //     authRegisterApiResponseSuccess(\n    //       AuthRegisterActionTypes.REGISTER_USER,\n    //       response\n    //     )\n    //   );\n    // } else if (process.env.REACT_APP_DEFAULTAUTH === \"jwt\") {\n    //const response: Promise<any> = yield call(postJwtRegister, user);\n\n    const response = yield call(postFakeRegister, user);\n    console.log(user);\n    yield put(authRegisterApiResponseSuccess(AuthRegisterActionTypes.REGISTER_USER, response));\n    // } else if (process.env.REACT_APP_DEFAULTAUTH === \"fake\") {\n    //   const response: Promise<any> = yield call(postFakeRegister, user);\n    //   yield put(\n    //     authRegisterApiResponseSuccess(\n    //       AuthRegisterActionTypes.REGISTER_USER,\n    //       response\n    //     )\n    //   );\n    // }\n  } catch (error) {\n    yield put(authRegisterApiResponseError(AuthRegisterActionTypes.REGISTER_USER, error));\n  }\n}\nexport function* watchUserRegister() {\n  yield takeEvery(AuthRegisterActionTypes.REGISTER_USER, registerUser);\n}\nfunction* registerSaga() {\n  yield all([fork(watchUserRegister)]);\n}\nexport default registerSaga;","map":{"version":3,"names":["takeEvery","fork","put","all","call","AuthRegisterActionTypes","authRegisterApiResponseSuccess","authRegisterApiResponseError","getFirebaseBackend","postFakeRegister","fireBaseBackend","registerUser","payload","user","response","console","log","REGISTER_USER","error","watchUserRegister","registerSaga"],"sources":["/home/olfa/Documents/pfe-main/client/src/redux/auth/register/saga.ts"],"sourcesContent":["import { takeEvery, fork, put, all, call } from \"redux-saga/effects\";\n\n//Account Redux states\nimport { AuthRegisterActionTypes } from \"./types\";\nimport {\n  authRegisterApiResponseSuccess,\n  authRegisterApiResponseError,\n} from \"./actions\";\n\n//Include Both Helper File with needed methods\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\";\nimport { postFakeRegister, postJwtRegister } from \"../../../api/index\";\n\n// initialize relavant method of both Auth\nconst fireBaseBackend = getFirebaseBackend();\n\n// Is user register successfull then direct plot user in redux.\nfunction* registerUser({ payload: { user } }: any) {\n  try {\n    // if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n    //   const response: Promise<any> = yield call(\n    //     fireBaseBackend.registerUser,\n    //     user.email,\n    //     user.password\n    //   );\n    //   yield put(\n    //     authRegisterApiResponseSuccess(\n    //       AuthRegisterActionTypes.REGISTER_USER,\n    //       response\n    //     )\n    //   );\n    // } else if (process.env.REACT_APP_DEFAULTAUTH === \"jwt\") {\n      //const response: Promise<any> = yield call(postJwtRegister, user);\n\n      const response: Promise<any> = yield call(postFakeRegister, user);\n      console.log(user)\n      yield put(\n        authRegisterApiResponseSuccess(\n          AuthRegisterActionTypes.REGISTER_USER,\n          response\n        )\n      );\n    // } else if (process.env.REACT_APP_DEFAULTAUTH === \"fake\") {\n    //   const response: Promise<any> = yield call(postFakeRegister, user);\n    //   yield put(\n    //     authRegisterApiResponseSuccess(\n    //       AuthRegisterActionTypes.REGISTER_USER,\n    //       response\n    //     )\n    //   );\n    // }\n  } catch (error: any) {\n    yield put(\n      authRegisterApiResponseError(AuthRegisterActionTypes.REGISTER_USER, error)\n    );\n  }\n}\n\nexport function* watchUserRegister() {\n  yield takeEvery(AuthRegisterActionTypes.REGISTER_USER, registerUser);\n}\n\nfunction* registerSaga() {\n  yield all([fork(watchUserRegister)]);\n}\n\nexport default registerSaga;\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,IAAI,EAAEC,GAAG,EAAEC,GAAG,EAAEC,IAAI,QAAQ,oBAAoB;;AAEpE;AACA,SAASC,uBAAuB,QAAQ,SAAS;AACjD,SACEC,8BAA8B,EAC9BC,4BAA4B,QACvB,WAAW;;AAElB;AACA,SAASC,kBAAkB,QAAQ,kCAAkC;AACrE,SAASC,gBAAgB,QAAyB,oBAAoB;;AAEtE;AACA,MAAMC,eAAe,GAAGF,kBAAkB,CAAC,CAAC;;AAE5C;AACA,UAAUG,YAAYA,CAAC;EAAEC,OAAO,EAAE;IAAEC;EAAK;AAAO,CAAC,EAAE;EACjD,IAAI;IACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACE;;IAEA,MAAMC,QAAsB,GAAG,MAAMV,IAAI,CAACK,gBAAgB,EAAEI,IAAI,CAAC;IACjEE,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;IACjB,MAAMX,GAAG,CACPI,8BAA8B,CAC5BD,uBAAuB,CAACY,aAAa,EACrCH,QACF,CACF,CAAC;IACH;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF,CAAC,CAAC,OAAOI,KAAU,EAAE;IACnB,MAAMhB,GAAG,CACPK,4BAA4B,CAACF,uBAAuB,CAACY,aAAa,EAAEC,KAAK,CAC3E,CAAC;EACH;AACF;AAEA,OAAO,UAAUC,iBAAiBA,CAAA,EAAG;EACnC,MAAMnB,SAAS,CAACK,uBAAuB,CAACY,aAAa,EAAEN,YAAY,CAAC;AACtE;AAEA,UAAUS,YAAYA,CAAA,EAAG;EACvB,MAAMjB,GAAG,CAAC,CAACF,IAAI,CAACkB,iBAAiB,CAAC,CAAC,CAAC;AACtC;AAEA,eAAeC,YAAY"},"metadata":{},"sourceType":"module"}