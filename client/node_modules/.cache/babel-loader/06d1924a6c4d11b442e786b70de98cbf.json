{"ast":null,"code":"var _jsxFileName = \"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Settings/ThemeColor.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport classnames from \"classnames\";\n\n// interface\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst changeColor = id => {\n  const element = document.getElementById(`color-${id}`);\n  if (element) {\n    const color = window.getComputedStyle(element, null).getPropertyValue(\"background-color\");\n    const userChatOverlay = document.getElementById(\"user-chat-overlay\");\n    if (userChatOverlay) {\n      userChatOverlay.style.background = color;\n      const rgbColor = color.substring(color.indexOf(\"(\") + 1, color.indexOf(\")\"));\n      document.documentElement.style.setProperty(\"--bs-primary-rgb\", rgbColor);\n    }\n  }\n};\nconst FormCheck = ({\n  color,\n  selected,\n  onChange\n}) => {\n  const checked = selected && selected.id === color.id ? true : false;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-check\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"form-check-input theme-color\",\n      type: \"radio\",\n      name: \"bgcolor-radio\",\n      id: color.id,\n      onChange: () => {\n        onChange(color);\n      },\n      checked: checked\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"form-check-label avatar-xs\",\n      htmlFor: color.id,\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: classnames(\"avatar-title\", \"rounded-circle\", \"theme-btn\", [color.color], [color.id]),\n        id: `color-${color.id}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_c = FormCheck;\nconst ThemeColor = ({\n  theme,\n  onChangeData\n}) => {\n  _s();\n  const [themeColors] = useState([{\n    id: \"bgcolor-radio1\",\n    color: \"bg-blue\"\n  }, {\n    id: \"bgcolor-radio2\",\n    color: \"bg-info\"\n  }, {\n    id: \"bgcolor-radio3\",\n    color: \"bg-purple\"\n  }, {\n    id: \"bgcolor-radio4\",\n    color: \"bg-pink\"\n  }, {\n    id: \"bgcolor-radio5\",\n    color: \"bg-danger\"\n  }, {\n    id: \"bgcolor-radio6\",\n    color: \"bg-secondary\"\n  }]);\n  const [selected, setSelected] = useState(null);\n  const onChangeThemeColor = color => {\n    setSelected(color);\n    onChangeData(\"theme\", {\n      ...theme,\n      color: color.id\n    });\n  };\n  useEffect(() => {\n    if (theme && theme.color) {\n      const userTheme = themeColors.find(c => c.id === theme.color);\n      if (userTheme) {\n        setSelected(userTheme);\n      }\n    }\n  }, [theme, themeColors]);\n  useEffect(() => {\n    if (selected !== null) {\n      changeColor(selected.id);\n    }\n  }, [selected]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      className: \"mb-3 font-size-11 text-muted text-uppercase\",\n      children: \"Choose Theme Color :\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex align-items-center flex-wrap gap-2 theme-btn-list theme-color-list\",\n      children: (themeColors || []).map((color, key) => /*#__PURE__*/_jsxDEV(FormCheck, {\n        color: color,\n        selected: selected,\n        onChange: onChangeThemeColor\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeColor, \"g/KeHbRpKWdcYCwsTSB/DlzdyOY=\");\n_c2 = ThemeColor;\nexport default ThemeColor;\nvar _c, _c2;\n$RefreshReg$(_c, \"FormCheck\");\n$RefreshReg$(_c2, \"ThemeColor\");","map":{"version":3,"names":["React","useEffect","useState","classnames","jsxDEV","_jsxDEV","changeColor","id","element","document","getElementById","color","window","getComputedStyle","getPropertyValue","userChatOverlay","style","background","rgbColor","substring","indexOf","documentElement","setProperty","FormCheck","selected","onChange","checked","className","children","type","name","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","_c","ThemeColor","theme","onChangeData","_s","themeColors","setSelected","onChangeThemeColor","userTheme","find","c","map","key","_c2","$RefreshReg$"],"sources":["/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Settings/ThemeColor.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport classnames from \"classnames\";\n\n// interface\nimport { ThemeTypes } from \"../../../data/settings\";\n\nconst changeColor = (id: string) => {\n  const element = document.getElementById(`color-${id}`);\n  if (element) {\n    const color = window\n      .getComputedStyle(element, null)\n      .getPropertyValue(\"background-color\");\n    const userChatOverlay = document.getElementById(\"user-chat-overlay\");\n    if (userChatOverlay) {\n      userChatOverlay.style.background = color;\n      const rgbColor = color.substring(\n        color.indexOf(\"(\") + 1,\n        color.indexOf(\")\")\n      );\n      document.documentElement.style.setProperty(\"--bs-primary-rgb\", rgbColor);\n    }\n  }\n};\n\ninterface ThemeColorTypes {\n  id: string;\n  color: string;\n}\n\ninterface FormCheckProps {\n  color: ThemeColorTypes;\n  selected: ThemeColorTypes | null;\n  onChange: (color: ThemeColorTypes) => void;\n}\nconst FormCheck = ({ color, selected, onChange }: FormCheckProps) => {\n  const checked = selected && selected.id === color.id ? true : false;\n  return (\n    <div className=\"form-check\">\n      <input\n        className=\"form-check-input theme-color\"\n        type=\"radio\"\n        name=\"bgcolor-radio\"\n        id={color.id}\n        onChange={() => {\n          onChange(color);\n        }}\n        checked={checked}\n      />\n      <label className=\"form-check-label avatar-xs\" htmlFor={color.id}>\n        <span\n          className={classnames(\n            \"avatar-title\",\n            \"rounded-circle\",\n            \"theme-btn\",\n            [color.color],\n            [color.id]\n          )}\n          id={`color-${color.id}`}\n        ></span>\n      </label>\n    </div>\n  );\n};\n\ninterface ThemeColorProps {\n  theme: ThemeTypes;\n  onChangeData: (field: string, value: any) => void;\n}\n\nconst ThemeColor = ({ theme, onChangeData }: ThemeColorProps) => {\n  const [themeColors] = useState<ThemeColorTypes[]>([\n    {\n      id: \"bgcolor-radio1\",\n      color: \"bg-blue\",\n    },\n    {\n      id: \"bgcolor-radio2\",\n      color: \"bg-info\",\n    },\n    {\n      id: \"bgcolor-radio3\",\n      color: \"bg-purple\",\n    },\n    {\n      id: \"bgcolor-radio4\",\n      color: \"bg-pink\",\n    },\n    {\n      id: \"bgcolor-radio5\",\n      color: \"bg-danger\",\n    },\n    {\n      id: \"bgcolor-radio6\",\n      color: \"bg-secondary\",\n    },\n  ]);\n  const [selected, setSelected] = useState<ThemeColorTypes | null>(null);\n  const onChangeThemeColor = (color: ThemeColorTypes) => {\n    setSelected(color);\n    onChangeData(\"theme\", { ...theme, color: color.id });\n  };\n  useEffect(() => {\n    if (theme && theme.color) {\n      const userTheme = themeColors.find(\n        (c: ThemeColorTypes) => c.id === theme.color\n      );\n      if (userTheme) {\n        setSelected(userTheme);\n      }\n    }\n  }, [theme, themeColors]);\n\n  useEffect(() => {\n    if (selected !== null) {\n      changeColor(selected.id);\n    }\n  }, [selected]);\n\n  return (\n    <div>\n      <h5 className=\"mb-3 font-size-11 text-muted text-uppercase\">\n        Choose Theme Color :\n      </h5>\n      <div className=\"d-flex align-items-center flex-wrap gap-2 theme-btn-list theme-color-list\">\n        {(themeColors || []).map((color: ThemeColorTypes, key: number) => (\n          <FormCheck\n            color={color}\n            key={key}\n            selected={selected}\n            onChange={onChangeThemeColor}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ThemeColor;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}