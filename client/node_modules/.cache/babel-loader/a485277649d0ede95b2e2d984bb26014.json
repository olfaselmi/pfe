{"ast":null,"code":"import { validateFieldsNatively as e, toNestError as t } from \"@hookform/resolvers\";\nimport { appendErrors as r } from \"react-hook-form\";\nvar o = function (o, n, a) {\n  return void 0 === n && (n = {}), void 0 === a && (a = {}), function (s, i, c) {\n    try {\n      return Promise.resolve(function (t, r) {\n        try {\n          var u = (n.context && \"development\" === process.env.NODE_ENV && console.warn(\"You should not used the yup options context. Please, use the 'useForm' context object instead\"), Promise.resolve(o[\"sync\" === a.mode ? \"validateSync\" : \"validate\"](s, Object.assign({\n            abortEarly: !1\n          }, n, {\n            context: i\n          }))).then(function (t) {\n            return c.shouldUseNativeValidation && e({}, c), {\n              values: a.rawValues ? s : t,\n              errors: {}\n            };\n          }));\n        } catch (e) {\n          return r(e);\n        }\n        return u && u.then ? u.then(void 0, r) : u;\n      }(0, function (e) {\n        if (!e.inner) throw e;\n        return {\n          values: {},\n          errors: t((o = e, n = !c.shouldUseNativeValidation && \"all\" === c.criteriaMode, (o.inner || []).reduce(function (e, t) {\n            if (e[t.path] || (e[t.path] = {\n              message: t.message,\n              type: t.type\n            }), n) {\n              var o = e[t.path].types,\n                a = o && o[t.type];\n              e[t.path] = r(t.path, n, e, t.type, a ? [].concat(a, t.message) : t.message);\n            }\n            return e;\n          }, {})), c)\n        };\n        var o, n;\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n};\nexport { o as yupResolver };","map":{"version":3,"sources":["../src/yup.ts"],"names":["error","validateAllFieldCriteria","inner","reduce","previous","path","message","type","types","messages","appendErrors","concat","yupResolver","schema","schemaOptions","resolverOptions","values","context","options","process","env","NODE_ENV","console","warn","result","mode","Object","assign","abortEarly","shouldUseNativeValidation","validateFieldsNatively","rawValues","errors","e","toNestError","criteriaMode"],"mappings":"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","sourcesContent":["import * as Yup from 'yup';\nimport { toNestError, validateFieldsNatively } from '@hookform/resolvers';\nimport { appendErrors, FieldError } from 'react-hook-form';\nimport { Resolver } from './types';\n\n/**\n * Why `path!` ? because it could be `undefined` in some case\n * https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n */\nconst parseErrorSchema = (\n  error: Yup.ValidationError,\n  validateAllFieldCriteria: boolean,\n) => {\n  return (error.inner || []).reduce<Record<string, FieldError>>(\n    (previous, error) => {\n      if (!previous[error.path!]) {\n        previous[error.path!] = { message: error.message, type: error.type! };\n      }\n\n      if (validateAllFieldCriteria) {\n        const types = previous[error.path!].types;\n        const messages = types && types[error.type!];\n\n        previous[error.path!] = appendErrors(\n          error.path!,\n          validateAllFieldCriteria,\n          previous,\n          error.type!,\n          messages\n            ? ([] as string[]).concat(messages as string[], error.message)\n            : error.message,\n        ) as FieldError;\n      }\n\n      return previous;\n    },\n    {},\n  );\n};\n\nexport const yupResolver: Resolver =\n  (schema, schemaOptions = {}, resolverOptions = {}) =>\n  async (values, context, options) => {\n    try {\n      if (schemaOptions.context && process.env.NODE_ENV === 'development') {\n        // eslint-disable-next-line no-console\n        console.warn(\n          \"You should not used the yup options context. Please, use the 'useForm' context object instead\",\n        );\n      }\n\n      const result = await schema[\n        resolverOptions.mode === 'sync' ? 'validateSync' : 'validate'\n      ](\n        values,\n        Object.assign({ abortEarly: false }, schemaOptions, { context }),\n      );\n\n      options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n      return {\n        values: resolverOptions.rawValues ? values : result,\n        errors: {},\n      };\n    } catch (e: any) {\n      if (!e.inner) {\n        throw e;\n      }\n\n      return {\n        values: {},\n        errors: toNestError(\n          parseErrorSchema(\n            e,\n            !options.shouldUseNativeValidation &&\n              options.criteriaMode === 'all',\n          ),\n          options,\n        ),\n      };\n    }\n  };\n"]},"metadata":{},"sourceType":"module"}