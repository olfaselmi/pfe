{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\n\n// hooks\nimport { useRedux } from \"../hooks/index\";\n\n// api\nimport { getLoggedinUser } from \"../api/apiCore\";\n\n//utils\nimport { divideByKey } from \"../utils\";\nconst useProfile = () => {\n  _s();\n  // global store\n  const {\n    useAppSelector\n  } = useRedux();\n  const {\n    settings\n  } = useAppSelector(state => ({\n    settings: state.Settings.settings\n  }));\n  const image = settings.basicDetails && settings.basicDetails.profile;\n  const userProfileSession = getLoggedinUser();\n  const [loading] = useState(userProfileSession ? false : true);\n  const [userProfile, setUserProfile] = useState(userProfileSession ? {\n    ...userProfileSession,\n    profileImage: image\n  } : null);\n  useEffect(() => {\n    const userProfileSession = getLoggedinUser();\n    setUserProfile(userProfileSession ? {\n      ...userProfileSession,\n      profileImage: image\n    } : null);\n  }, [image]);\n  return {\n    userProfile,\n    loading\n  };\n};\n_s(useProfile, \"uXFkigubr/ZkJVdyFOfBv7rtlIQ=\", true, function () {\n  return [useRedux];\n});\nconst useContacts = () => {\n  _s2();\n  // global store\n  const {\n    useAppSelector\n  } = useRedux();\n  const {\n    contactsList\n  } = useAppSelector(state => ({\n    contactsList: state.Contacts.contacts\n  }));\n  const [contacts, setContacts] = useState([]);\n  const [categorizedContacts, setCategorizedContacts] = useState([]);\n  useEffect(() => {\n    if (contactsList.length > 0) {\n      setContacts(contactsList);\n    }\n  }, [contactsList]);\n  useEffect(() => {\n    if (contacts.length > 0) {\n      const formattedContacts = divideByKey(\"firstName\", contacts);\n      setCategorizedContacts(formattedContacts);\n    }\n  }, [contacts]);\n  const totalContacts = (categorizedContacts || []).length;\n  return {\n    categorizedContacts,\n    totalContacts\n  };\n};\n_s2(useContacts, \"/iu7Mm53Qp9w/xryWz0tOZlGDBk=\", true, function () {\n  return [useRedux];\n});\nconst useConversationUserType = () => {\n  _s3();\n  // global store\n  const {\n    useAppSelector\n  } = useRedux();\n  const {\n    chatUserDetails\n  } = useAppSelector(state => ({\n    chatUserDetails: state.Chats.chatUserDetails\n  }));\n  const [isChannel, setIsChannel] = useState(false);\n  useEffect(() => {\n    setIsChannel(chatUserDetails.isChannel ? true : false);\n  }, [chatUserDetails]);\n  return {\n    isChannel\n  };\n};\n_s3(useConversationUserType, \"1lKlgi7EKnag5Bx4fU1rBV9sykA=\", true, function () {\n  return [useRedux];\n});\nexport { useProfile, useContacts, useConversationUserType };","map":{"version":3,"names":["useState","useEffect","useRedux","getLoggedinUser","divideByKey","useProfile","_s","useAppSelector","settings","state","Settings","image","basicDetails","profile","userProfileSession","loading","userProfile","setUserProfile","profileImage","useContacts","_s2","contactsList","Contacts","contacts","setContacts","categorizedContacts","setCategorizedContacts","length","formattedContacts","totalContacts","useConversationUserType","_s3","chatUserDetails","Chats","isChannel","setIsChannel"],"sources":["/home/olfa/Documents/pfe-main/client/src/hooks/UserHooks.ts"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\n// hooks\nimport { useRedux } from \"../hooks/index\";\n\n// api\nimport { getLoggedinUser } from \"../api/apiCore\";\n\n//utils\nimport { divideByKey } from \"../utils\";\n\nconst useProfile = () => {\n  // global store\n  const { useAppSelector } = useRedux();\n\n  const { settings } = useAppSelector(state => ({\n    settings: state.Settings.settings,\n  }));\n  const image = settings.basicDetails && settings.basicDetails.profile;\n  const userProfileSession = getLoggedinUser();\n  const [loading] = useState(userProfileSession ? false : true);\n  const [userProfile, setUserProfile] = useState(\n    userProfileSession ? { ...userProfileSession, profileImage: image } : null\n  );\n  useEffect(() => {\n    const userProfileSession = getLoggedinUser();\n    setUserProfile(\n      userProfileSession ? { ...userProfileSession, profileImage: image } : null\n    );\n  }, [image]);\n\n  return { userProfile, loading };\n};\n\nconst useContacts = () => {\n  // global store\n  const { useAppSelector } = useRedux();\n\n  const { contactsList } = useAppSelector(state => ({\n    contactsList: state.Contacts.contacts,\n  }));\n\n  const [contacts, setContacts] = useState<Array<any>>([]);\n  const [categorizedContacts, setCategorizedContacts] = useState<Array<any>>(\n    []\n  );\n  useEffect(() => {\n    if (contactsList.length > 0) {\n      setContacts(contactsList);\n    }\n  }, [contactsList]);\n\n  useEffect(() => {\n    if (contacts.length > 0) {\n      const formattedContacts = divideByKey(\"firstName\", contacts);\n      setCategorizedContacts(formattedContacts);\n    }\n  }, [contacts]);\n\n  const totalContacts = (categorizedContacts || []).length;\n  return { categorizedContacts, totalContacts };\n};\n\nconst useConversationUserType = () => {\n  // global store\n  const { useAppSelector } = useRedux();\n\n  const { chatUserDetails } = useAppSelector(state => ({\n    chatUserDetails: state.Chats.chatUserDetails,\n  }));\n\n  const [isChannel, setIsChannel] = useState<boolean>(false);\n  useEffect(() => {\n    setIsChannel(chatUserDetails.isChannel ? true : false);\n  }, [chatUserDetails]);\n\n  return { isChannel };\n};\nexport { useProfile, useContacts, useConversationUserType };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}