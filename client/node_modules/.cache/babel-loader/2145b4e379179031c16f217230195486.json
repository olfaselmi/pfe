{"ast":null,"code":"// @flow\nimport { all, call, fork, takeEvery } from \"redux-saga/effects\";\nimport { LayoutActionTypes } from \"./types\";\nimport { LAYOUT_MODES } from \"../../constants/index\";\n\n/**\n * Changes the body attribute\n */\nfunction changeBodyAttribute(attribute, value) {\n  if (document.body) document.body.setAttribute(attribute, value);\n  return true;\n}\n\n/**\n * Changes the layout mode\n * @param {*} param0\n */\nfunction* changelayoutMode({\n  payload: {\n    layoutMode\n  }\n}) {\n  try {\n    if (layoutMode === LAYOUT_MODES.LIGHT) {\n      yield call(changeBodyAttribute, \"data-layout-mode\", layoutMode);\n      localStorage.setItem(\"layoutMode\", layoutMode);\n    } else if (layoutMode === LAYOUT_MODES.DARK) {\n      yield call(changeBodyAttribute, \"data-layout-mode\", layoutMode);\n      localStorage.setItem(\"layoutMode\", layoutMode);\n    }\n  } catch (error) {}\n}\n\n/**\n * Watchers\n */\nexport function* watchChangelayoutMode() {\n  yield takeEvery(LayoutActionTypes.CHANGE_LAYOUT_MODE, changelayoutMode);\n}\nfunction* LayoutSaga() {\n  yield all([fork(watchChangelayoutMode)]);\n}\n_c = LayoutSaga;\nexport default LayoutSaga;\nvar _c;\n$RefreshReg$(_c, \"LayoutSaga\");","map":{"version":3,"names":["all","call","fork","takeEvery","LayoutActionTypes","LAYOUT_MODES","changeBodyAttribute","attribute","value","document","body","setAttribute","changelayoutMode","payload","layoutMode","LIGHT","localStorage","setItem","DARK","error","watchChangelayoutMode","CHANGE_LAYOUT_MODE","LayoutSaga","_c","$RefreshReg$"],"sources":["/home/olfa/Documents/pfe-main/client/src/redux/layout/saga.ts"],"sourcesContent":["// @flow\nimport { all, call, fork, takeEvery } from \"redux-saga/effects\";\n\nimport { LayoutActionTypes } from \"./types\";\nimport { LAYOUT_MODES } from \"../../constants/index\";\n\n/**\n * Changes the body attribute\n */\nfunction changeBodyAttribute(attribute: any, value: any) {\n  if (document.body) document.body.setAttribute(attribute, value);\n  return true;\n}\n\n/**\n * Changes the layout mode\n * @param {*} param0\n */\n function* changelayoutMode({ payload: { layoutMode } } : any) {\n  try {\n    if (layoutMode === LAYOUT_MODES.LIGHT) {\n      yield call(changeBodyAttribute, \"data-layout-mode\", layoutMode);\n      localStorage.setItem(\"layoutMode\", layoutMode);\n    } else if (layoutMode === LAYOUT_MODES.DARK) {\n      yield call(changeBodyAttribute, \"data-layout-mode\", layoutMode);\n      localStorage.setItem(\"layoutMode\", layoutMode);\n    }\n  } catch (error) { }\n}\n\n/**\n * Watchers\n */\nexport function* watchChangelayoutMode() {\n  yield takeEvery(LayoutActionTypes.CHANGE_LAYOUT_MODE, changelayoutMode);\n}\n\nfunction* LayoutSaga() {\n  yield all([\n    fork(watchChangelayoutMode),\n  ]);\n}\n\nexport default LayoutSaga;\n"],"mappings":"AAAA;AACA,SAASA,GAAG,EAAEC,IAAI,EAAEC,IAAI,EAAEC,SAAS,QAAQ,oBAAoB;AAE/D,SAASC,iBAAiB,QAAQ,SAAS;AAC3C,SAASC,YAAY,QAAQ,uBAAuB;;AAEpD;AACA;AACA;AACA,SAASC,mBAAmBA,CAACC,SAAc,EAAEC,KAAU,EAAE;EACvD,IAAIC,QAAQ,CAACC,IAAI,EAAED,QAAQ,CAACC,IAAI,CAACC,YAAY,CAACJ,SAAS,EAAEC,KAAK,CAAC;EAC/D,OAAO,IAAI;AACb;;AAEA;AACA;AACA;AACA;AACC,UAAUI,gBAAgBA,CAAC;EAAEC,OAAO,EAAE;IAAEC;EAAW;AAAQ,CAAC,EAAE;EAC7D,IAAI;IACF,IAAIA,UAAU,KAAKT,YAAY,CAACU,KAAK,EAAE;MACrC,MAAMd,IAAI,CAACK,mBAAmB,EAAE,kBAAkB,EAAEQ,UAAU,CAAC;MAC/DE,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEH,UAAU,CAAC;IAChD,CAAC,MAAM,IAAIA,UAAU,KAAKT,YAAY,CAACa,IAAI,EAAE;MAC3C,MAAMjB,IAAI,CAACK,mBAAmB,EAAE,kBAAkB,EAAEQ,UAAU,CAAC;MAC/DE,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEH,UAAU,CAAC;IAChD;EACF,CAAC,CAAC,OAAOK,KAAK,EAAE,CAAE;AACpB;;AAEA;AACA;AACA;AACA,OAAO,UAAUC,qBAAqBA,CAAA,EAAG;EACvC,MAAMjB,SAAS,CAACC,iBAAiB,CAACiB,kBAAkB,EAAET,gBAAgB,CAAC;AACzE;AAEA,UAAUU,UAAUA,CAAA,EAAG;EACrB,MAAMtB,GAAG,CAAC,CACRE,IAAI,CAACkB,qBAAqB,CAAC,CAC5B,CAAC;AACJ;AAACG,EAAA,GAJSD,UAAU;AAMpB,eAAeA,UAAU;AAAC,IAAAC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}