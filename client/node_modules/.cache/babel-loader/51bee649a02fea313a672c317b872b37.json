{"ast":null,"code":"import axios from \"axios\";\nimport MockAdapter from \"axios-mock-adapter\";\nimport * as url from \"../api/urls\";\n\n// dummy data\nimport {\n// profile\n\nmyData,\n//contacts\ncontacts, onChangeContacts,\n// calls\ncalls,\n// channels\nuserChannels, onChangeUserChannels,\n// bookmarks\nbookmarks, onChangeBookmark,\n// chats\nfavourites, onChangeFavourite, directMessages, channels, onChangeDirectMessages, onChangeChannels, conversations, onChangeConversations,\n// archive\narchiveChats, onChangeArchives } from \"../data/index\";\nimport { settings } from \"../data/settings\";\nconst accessToken = \"Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6ImFkbWluIiwiYWRtaW4iOnRydWUsImp0aSI6ImQ2MTEwYzAxLWMwYjUtNDUzNy1iNDZhLTI0NTk5Mjc2YjY1NiIsImlhdCI6MTU5MjU2MDk2MCwiZXhwIjoxNTkyNTY0NjE5fQ.QgFSQtFaK_Ktauadttq1Is7f9w0SUtKcL8xCmkAvGLw\";\nlet users = [myData];\nconst fakeBackend = () => {\n  // This sets the mock adapter on the default instance\n  const mock = new MockAdapter(axios, {\n    onNoMatch: \"passthrough\"\n  });\n\n  // mock.onPost(url.POST_FAKE_REGISTER).reply(config => {\n  //   const user = JSON.parse(config[\"data\"]);\n  //   users.push(user);\n  //   return new Promise((resolve, reject) => {\n  //     setTimeout(() => {\n  //       resolve([200, user]);\n  //     });\n  //   });\n  // });\n\n  mock.onPost(\"/post-fake-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const validUser = users.filter(usr => usr.email === user.email && usr.password === user.password);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          setTimeout(() => {\n            resolve([200, validUser[0]]);\n          }, 1000);\n        } else {\n          reject([\"Username and password are invalid. Please enter correct username and password\"]);\n        }\n      });\n    });\n  });\n\n  // mock.onPost(\"/fake-forget-pwd\").reply(config => {\n  //   // User needs to check that user is eXist or not and send mail for Reset New password\n\n  //   return new Promise((resolve, reject) => {\n  //     setTimeout(() => {\n  //       resolve([200, \"Check you mail and reset your password.\"]);\n  //     });\n  //   });\n  // });\n\n  mock.onPost(\"/post-jwt-register\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    users.push(user);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, user]);\n      });\n    });\n  });\n  mock.onPost(\"/post-jwt-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const validUser = users.filter(usr => usr.email === user.email && usr.password === user.password);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\n          const token = accessToken;\n\n          // JWT AccessToken\n          const tokenObj = {\n            accessToken: token\n          }; // Token Obj\n          const validUserObj = {\n            ...validUser[0],\n            ...tokenObj\n          }; // validUser Obj\n\n          resolve([200, validUserObj]);\n        } else {\n          reject([400, \"Username and password are invalid. Please enter correct username and password\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/post-jwt-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const one = config.headers;\n    let finalToken = one.Authorization;\n    const validUser = users.filter(usr => usr.uid === user.idx);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        // Verify Jwt token from header.Authorization\n        if (finalToken === accessToken) {\n          if (validUser[\"length\"] === 1) {\n            let objIndex;\n\n            //Find index of specific object using findIndex method.\n            objIndex = users.findIndex(obj => obj.uid === user.idx);\n\n            //Update object's name property.\n            users[objIndex].username = user.username;\n\n            // Assign a value to locastorage\n            localStorage.removeItem(\"authUser\");\n            localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]));\n            resolve([200, \"Profile Updated Successfully\"]);\n          } else {\n            reject([400, \"Something wrong for edit profile\"]);\n          }\n        } else {\n          reject([400, \"Invalid Token !!\"]);\n        }\n      });\n    });\n  });\n  mock.onPost(\"/post-fake-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const validUser = users.filter(usr => usr.uid === user.idx);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          let objIndex;\n\n          //Find index of specific object using findIndex method.\n          objIndex = users.findIndex(obj => obj.uid === user.idx);\n\n          //Update object's name property.\n          users[objIndex].username = user.username;\n\n          // Assign a value to locastorage\n          localStorage.removeItem(\"authUser\");\n          localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]));\n          resolve([200, \"Profile Updated Successfully\"]);\n        } else {\n          reject([400, \"Something wrong for edit profile\"]);\n        }\n      });\n    });\n  });\n\n  // mock.onPost(\"/jwt-forget-pwd\").reply(config => {\n  //   // User needs to check that user is eXist or not and send mail for Reset New password\n\n  //   return new Promise((resolve, reject) => {\n  //     setTimeout(() => {\n  //       resolve([200, \"Check you mail and reset your password.\"]);\n  //     });\n  //   });\n  // });\n\n  // mock.onPut(url.USER_CHANGE_PASSWORD).reply(config => {\n  //   return new Promise((resolve, reject) => {\n  //     const user = JSON.parse(config[\"data\"]);\n  //     users[0].password = user.password;\n  //     if (user) {\n  //       resolve([200, users[0]]);\n  //     } else {\n  //       reject([\"Some thing went wrong!\"]);\n  //     }\n  //   });\n  // });\n\n  /*\n  profile\n  */\n  // mock.onGet(url.GET_PROFILE_DETAILS).reply(config => {\n  //   return new Promise((resolve, reject) => {\n  //     if (profileDetails) {\n  //       resolve([200, profileDetails]);\n  //     } else {\n  //       reject([\"Some thing went wrong!\"]);\n  //     }\n  //   });\n  // });\n\n  /*\n  contacts\n  */\n  // mock.onGet(url.GET_CONTACTS).reply(config => {\n  //   return new Promise((resolve, reject) => {\n  //     if (contacts) {\n  //       resolve([200, contacts]);\n  //     } else {\n  //       reject([\"Some thing went wrong!\"]);\n  //     }\n  //   });\n  // });\n\n  // mock.onPost(url.INVITE_CONTACT).reply(config => {\n  //   // const use r = JSON.parse(config[\"data\"]);\n\n  //   return new Promise((resolve, reject) => {\n  //     resolve([200, \"User is Invited\"]);\n  //   });\n  // });\n\n  /*\n  calls\n  */\n  mock.onGet(url.GET_CALLS_LIST).reply(config => {\n    return new Promise((resolve, reject) => {\n      if (calls) {\n        resolve([200, calls]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n\n  /*\n  bookmarks\n  */\n  mock.onGet(url.GET_BOOKMARKS_LIST).reply(config => {\n    return new Promise((resolve, reject) => {\n      if (bookmarks) {\n        resolve([200, bookmarks]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n  mock.onDelete(new RegExp(`${url.DELETE_BOOKMARK}/*`)).reply(config => {\n    const {\n      params\n    } = config;\n    return new Promise((resolve, reject) => {\n      if (params.id && bookmarks.length !== 0) {\n        const updatedB = bookmarks.filter(b => b.id + \"\" !== params.id + \"\");\n        onChangeBookmark(updatedB);\n        resolve([200, \"Bookmark is Deleted!\"]);\n      } else {\n        reject([\"Your id is not found\"]);\n      }\n    });\n  });\n  mock.onPut(new RegExp(`${url.UPDATE_BOOKMARK}/*`)).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n    return new Promise((resolve, reject) => {\n      if (data.id && bookmarks.length !== 0) {\n        const bookmIdx = bookmarks.findIndex(b => b.id + \"\" === data.id + \"\");\n        if (bookmIdx > -1) {\n          let updatedB = [...bookmarks];\n          updatedB[bookmIdx] = data;\n          onChangeBookmark(updatedB);\n        }\n        resolve([200, \"Bookmark is Updated!\"]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n\n  /*\n  settings\n  */\n  mock.onGet(url.GET_USER_SETTINGS).reply(config => {\n    return new Promise((resolve, reject) => {\n      if (settings) {\n        resolve([200, settings]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n\n  /*\n  chats\n  */\n  /*\n   settings\n   */\n  mock.onGet(url.GET_FAVOURITES).reply(config => {\n    return new Promise((resolve, reject) => {\n      if (favourites) {\n        resolve([200, favourites]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n\n  // mock.onGet(url.GET_DIRECT_MESSAGES).reply(config => {\n  //   return new Promise((resolve, reject) => {\n  //     if (directMessages) {\n  //       resolve([200, directMessages]);\n  //     } else {\n  //       reject([\"Some thing went wrong!\"]);\n  //     }\n  //   });\n  // });\n\n  mock.onGet(url.GET_CHANNELS).reply(config => {\n    return new Promise((resolve, reject) => {\n      if (channels) {\n        resolve([200, channels]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n\n  // mock.onPost(url.ADD_CONTACTS).reply(config => {\n  //   const data = JSON.parse(config[\"data\"]);\n\n  //   return new Promise((resolve, reject) => {\n  //     if (data) {\n  //       let newC: Array<any> = [];\n  //       for (let index = 0; index < (data || []).length; index++) {\n  //         const contactId = data[index];\n  //         const contact = contacts.find((c: any) => c.id + \"\" === contactId);\n  //         if (contact) {\n  //           newC = [...newC, contact];\n  //         }\n  //       }\n  //       onChangeDirectMessages([...directMessages, ...newC]);\n  //       resolve([200, \"Contacts Added!\"]);\n  //     } else {\n  //       reject([\"Some thing went wrong!\"]);\n  //     }\n  //   });\n  // });\n\n  mock.onPost(url.CREATE_CHANNEL).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n    return new Promise((resolve, reject) => {\n      if (data) {\n        const newC = {\n          id: channels[channels.length - 1].id + new Date().getTime().toString(),\n          name: data.name,\n          description: data.description,\n          members: data.members\n        };\n        onChangeChannels([...channels, newC]);\n        resolve([200, \"Channel Created!\"]);\n      } else {\n        reject([400, \"Some thing went wrong!\"]);\n      }\n    });\n  });\n\n  // mock.onGet(new RegExp(`${url.GET_CHAT_USER_DETAILS}/*`)).reply(config => {\n  //   const { params } = config;\n  //   let data: any;\n  //   if (params.id && contacts.length !== 0) {\n  //     const chat = (contacts || []).find(\n  //       (c: any) => c.id + \"\" === params.id + \"\"\n  //     );\n  //     if (chat) {\n  //       data = chat;\n  //     }\n  //   }\n\n  //   return new Promise((resolve, reject) => {\n  //     if (data) {\n  //       setTimeout(() => {\n  //         resolve([200, data]);\n  //       });\n  //     } else {\n  //       reject([\"Your id is not found\"]);\n  //     }\n  //   });\n  // });\n\n  // mock\n  //   .onGet(new RegExp(`${url.GET_CHAT_USER_CONVERSATIONS}/*`))\n  //   .reply(config => {\n  //     const { params } = config;\n\n  //     let data: any;\n  //     if (params.id && conversations.length !== 0) {\n  //       const chat = (conversations || []).find(\n  //         (c: any) => c.userId + \"\" === params.id + \"\"\n  //       );\n  //       if (chat) {\n  //         data = chat;\n  //       }\n  //     }\n\n  //     return new Promise((resolve, reject) => {\n  //       if (data) {\n  //         setTimeout(() => {\n  //           resolve([200, data]);\n  //         }, 500);\n  //       } else {\n  //         setTimeout(() => {\n  //           reject([\"Your id is not found\"]);\n  //         }, 500);\n  //       }\n  //     });\n  //   });\n\n  // mock.onPost(url.SEND_MESSAGE).reply(config => {\n  //   const data = JSON.parse(config[\"data\"]);\n  //   if (data && data.meta && data.meta.receiver && data.meta.sender) {\n  //     let modifiedC = [...conversations];\n  //     const conversationIdx = (conversations || []).findIndex(\n  //       (c: any) => c.userId + \"\" === data.meta.receiver + \"\"\n  //     );\n  //     if (conversationIdx > -1) {\n  //       const mid =\n  //         conversations[conversationIdx].messages &&\n  //         conversations[conversationIdx].messages.length\n  //           ? conversations[conversationIdx].messages.length + 1\n  //           : 1;\n  //       let newM: any = {\n  //         mId: mid,\n  //         text: data.text && data.text,\n  //         time: data.time,\n  //         meta: {\n  //           ...data.meta,\n  //           sent: true,\n  //           received: false,\n  //           read: false,\n  //         },\n  //       };\n  //       if (data.image && data.image.length) {\n  //         newM[\"image\"] = data.image;\n  //       }\n  //       if (data.attachments && data.attachments.length) {\n  //         newM[\"attachments\"] = data.attachments;\n  //       }\n  //       if (data.replyOf) {\n  //         newM[\"replyOf\"] = data.replyOf;\n  //       }\n\n  //       conversations[conversationIdx].messages = [\n  //         ...conversations[conversationIdx].messages,\n  //         newM,\n  //       ];\n  //       modifiedC = [...conversations];\n  //     } else {\n  //       // new message first time\n  //       let newM: any = {\n  //         mId: 1,\n  //         text: data.text,\n  //         time: data.time,\n  //         meta: {\n  //           ...data.meta,\n  //           sent: true,\n  //           received: false,\n  //           read: false,\n  //         },\n  //       };\n  //       if (data.image && data.image.length) {\n  //         newM[\"image\"] = data.image;\n  //       }\n  //       if (data.attachments && data.attachments.length) {\n  //         newM[\"attachments\"] = data.attachments;\n  //       }\n  //       if (data.replyOf) {\n  //         newM[\"replyOf\"] = data.replyOf;\n  //       }\n  //       const newC = {\n  //         conversationId: conversations.length + 1,\n  //         userId: data.meta.receiver,\n  //         messages: [\n  //           {\n  //             ...newM,\n  //           },\n  //         ],\n  //       };\n  //       modifiedC = [...conversations, newC];\n  //     }\n  //     onChangeConversations(modifiedC);\n  //   }\n\n  //   return new Promise((resolve, reject) => {\n  //     if (data && data.meta && data.meta.receiver && data.meta.sender) {\n  //       resolve([200, \"Channel Created!\"]);\n  //     } else {\n  //       reject([400, \"Some thing went wrong!\"]);\n  //     }\n  //   });\n  // });\n\n  mock.onPut(new RegExp(`${url.RECEIVE_MESSAGE}/*`)).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n    let updatedUserC;\n    if (data.params && data.params.id && conversations.length !== 0) {\n      let modifiedC = [...conversations];\n      const conversationIdx = (modifiedC || []).findIndex(c => c.userId + \"\" === data.params.id + \"\");\n      if (conversationIdx > -1) {\n        if (modifiedC[conversationIdx].messages) {\n          modifiedC[conversationIdx].messages = (modifiedC[conversationIdx].messages || []).map(c => {\n            return {\n              ...c,\n              meta: {\n                ...c.meta,\n                received: true\n              }\n            };\n          });\n        }\n        updatedUserC = modifiedC[conversationIdx];\n        onChangeConversations(modifiedC);\n      }\n    }\n    return new Promise((resolve, reject) => {\n      if (updatedUserC) {\n        resolve([200, updatedUserC]);\n      } else {\n        setTimeout(() => {\n          reject([\"Your id is not found\"]);\n        }, 500);\n      }\n    });\n  });\n  mock.onPut(new RegExp(`${url.READ_MESSAGE}/*`)).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n    let updatedUserC;\n    if (data.params && data.params.id && conversations.length !== 0) {\n      let modifiedC = [...conversations];\n      const conversationIdx = (modifiedC || []).findIndex(c => c.userId + \"\" === data.params.id + \"\");\n      if (conversationIdx > -1) {\n        if (modifiedC[conversationIdx].messages) {\n          modifiedC[conversationIdx].messages = (modifiedC[conversationIdx].messages || []).map(c => {\n            return {\n              ...c,\n              meta: {\n                ...c.meta,\n                read: true\n              }\n            };\n          });\n        }\n        updatedUserC = modifiedC[conversationIdx];\n        onChangeConversations(modifiedC);\n      }\n    }\n    return new Promise((resolve, reject) => {\n      if (updatedUserC) {\n        resolve([200, updatedUserC]);\n      } else {\n        setTimeout(() => {\n          reject([\"Your id is not found\"]);\n        }, 500);\n      }\n    });\n  });\n  mock.onGet(new RegExp(`${url.RECEIVE_MESSAGE_FROM_USER}/*`)).reply(config => {\n    let updatedUserC;\n    const {\n      params\n    } = config;\n    if (params && params.id && conversations.length !== 0) {\n      let modifiedC = [...conversations];\n      const conversationIdx = (modifiedC || []).findIndex(c => c.userId + \"\" === params.id + \"\");\n      if (conversationIdx > -1) {\n        if (modifiedC[conversationIdx].messages) {\n          const newM = {\n            ...modifiedC[conversationIdx].messages[modifiedC[conversationIdx].messages.length - 1]\n          };\n          modifiedC[conversationIdx].messages.push({\n            ...newM,\n            mId: newM.mId + new Date().getTime(),\n            meta: {\n              ...newM.meta,\n              receiver: newM.meta.sender,\n              sender: newM.meta.receiver\n            }\n          });\n        }\n        updatedUserC = modifiedC[conversationIdx];\n        onChangeConversations(modifiedC);\n      }\n    }\n    return new Promise((resolve, reject) => {\n      if (updatedUserC) {\n        resolve([200, updatedUserC]);\n      } else {\n        setTimeout(() => {\n          reject([\"Your id is not found\"]);\n        }, 500);\n      }\n    });\n  });\n  mock.onDelete(new RegExp(`${url.DELETE_MESSAGE}/*`)).reply(config => {\n    const {\n      params\n    } = config;\n    return new Promise((resolve, reject) => {\n      if (params.userId && params.messageId) {\n        let modifiedC = [...conversations];\n        const conversationIdx = (modifiedC || []).findIndex(c => c.userId + \"\" === params.userId + \"\");\n        if (conversationIdx > -1) {\n          modifiedC[conversationIdx].messages = (modifiedC[conversationIdx].messages || []).filter(m => m.mId + \"\" !== params.messageId + \"\");\n        }\n        onChangeConversations(modifiedC);\n        resolve([200, \"Message is Deleted!\"]);\n      } else {\n        reject([\"Your id is not found\"]);\n      }\n    });\n  });\n  mock.onPost(url.FORWARD_MESSAGE).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n    let modifiedC = [...conversations];\n    if (data && data.contacts) {\n      for (let index = 0; index < data.contacts.length; index++) {\n        const c = data.contacts[index];\n        const conversationIdx = (modifiedC || []).findIndex(con => con.userId + \"\" === c + \"\");\n        if (conversationIdx > -1) {\n          const mid = modifiedC[conversationIdx].messages && modifiedC[conversationIdx].messages.length ? modifiedC[conversationIdx].messages.length + 1 : 1;\n          let newM = {\n            mId: mid,\n            text: data.message && data.message,\n            time: new Date().toISOString(),\n            meta: {\n              receiver: c,\n              sender: users[0].uid,\n              sent: true,\n              received: false,\n              read: false,\n              isForwarded: true\n            }\n          };\n          if (data.image && data.image.length) {\n            newM[\"image\"] = data.image;\n          }\n          if (data.attachments && data.attachments.length) {\n            newM[\"attachments\"] = data.attachments;\n          }\n          if (data.forwardedMessage) {\n            newM[\"replyOf\"] = data.forwardedMessage;\n          }\n          modifiedC[conversationIdx].messages = [...modifiedC[conversationIdx].messages, newM];\n          modifiedC = [...modifiedC];\n        } else {\n          // new message first time\n          let newM = {\n            mId: 1,\n            text: data.message && data.message,\n            time: new Date().toISOString(),\n            meta: {\n              receiver: \"614ecab4ac946a9bdafa4e3b\",\n              sender: users[0].uid,\n              sent: true,\n              received: false,\n              read: false,\n              isForwarded: true\n            }\n          };\n          if (data.image && data.image.length) {\n            newM[\"image\"] = data.image;\n          }\n          if (data.attachments && data.attachments.length) {\n            newM[\"attachments\"] = data.attachments;\n          }\n          if (data.forwardedMessage) {\n            newM[\"replyOf\"] = data.forwardedMessage;\n          }\n          const newC = {\n            conversationId: modifiedC.length + 1,\n            userId: c,\n            messages: [{\n              ...newM\n            }]\n          };\n          modifiedC = [...modifiedC, newC];\n        }\n      }\n    }\n    onChangeConversations(modifiedC);\n    return new Promise((resolve, reject) => {\n      if (data) {\n        resolve([200, \"Message is Forwarded!\"]);\n      } else {\n        reject([\"Your id is not found\"]);\n      }\n    });\n  });\n  mock.onDelete(new RegExp(`${url.DELETE_USER_MESSAGES}/*`)).reply(config => {\n    const {\n      params\n    } = config;\n    return new Promise((resolve, reject) => {\n      if (params.userId) {\n        let modifiedC = [...conversations];\n        modifiedC = (modifiedC || []).filter(c => c.userId + \"\" !== params.userId + \"\");\n        onChangeConversations(modifiedC);\n        resolve([200, \"Messages are Deleted!\"]);\n      } else {\n        reject([\"Your id is not found\"]);\n      }\n    });\n  });\n  mock.onGet(new RegExp(`${url.GET_CHANNEL_DETAILS}/*`)).reply(config => {\n    const {\n      params\n    } = config;\n    let data;\n    if (params.id && contacts.length !== 0) {\n      const chat = (userChannels || []).find(c => c.id + \"\" === params.id + \"\");\n      if (chat) {\n        data = chat;\n      }\n    }\n    return new Promise((resolve, reject) => {\n      if (data) {\n        setTimeout(() => {\n          resolve([200, data]);\n        });\n      } else {\n        reject([\"The channel is not found\"]);\n      }\n    });\n  });\n  mock.onPut(new RegExp(`${url.TOGGLE_FAVOURITE_CONTACT}/*`)).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n    let message = \"User has been added to your favourite\";\n    let modifiedC = [...contacts];\n    let modifiedF = [...favourites];\n    let modifiedD = [...directMessages];\n    if (data.params.id && contacts.length !== 0) {\n      const contactIdx = (modifiedC || []).findIndex(c => c.id + \"\" === data.params.id + \"\");\n      if (contactIdx > -1) {\n        if (contacts[contactIdx].isFavourite) {\n          contacts[contactIdx].isFavourite = false;\n          modifiedF = modifiedF.filter(f => f.id !== data.params.id);\n          message = \"User has been removed to your favourite\";\n        } else {\n          contacts[contactIdx].isFavourite = true;\n          modifiedF = [...modifiedF, contacts[contactIdx]];\n          modifiedD = modifiedD.filter(c => c.id !== data.params.id);\n        }\n      }\n    }\n    onChangeContacts(contacts);\n    onChangeFavourite(modifiedF);\n    onChangeDirectMessages(modifiedD);\n    return new Promise((resolve, reject) => {\n      if (data.params.id) {\n        setTimeout(() => {\n          resolve([200, message]);\n        });\n      } else {\n        reject([\"The channel is not found\"]);\n      }\n    });\n  });\n  mock.onGet(url.GET_ARCHIVE_CONTACT).reply(config => {\n    return new Promise((resolve, reject) => {\n      if (archiveChats) {\n        setTimeout(() => {\n          resolve([200, archiveChats]);\n        });\n      } else {\n        reject([\"The archive chat is not found\"]);\n      }\n    });\n  });\n  mock.onPut(new RegExp(`${url.TOGGLE_ARCHIVE_CONTACT}/*`)).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n    let message = \"User has been added to your archives\";\n    let modifiedC = [...contacts];\n    let modifiedA = [...archiveChats];\n    let modifiedD = [...directMessages];\n    let modifiedChannels = [...userChannels];\n    let modifiedChatChannels = [...channels];\n    if (data.params.id && contacts.length !== 0) {\n      const contactIdx = (modifiedC || []).findIndex(c => c.id + \"\" === data.params.id + \"\");\n      const channelIdx = (modifiedChannels || []).findIndex(c => c.id + \"\" === data.params.id + \"\");\n      if (contactIdx > -1) {\n        if (contacts[contactIdx].isArchived) {\n          contacts[contactIdx].isArchived = false;\n          modifiedA = modifiedA.filter(f => f.id !== data.params.id);\n          message = \"User has been removed to your archives\";\n        } else {\n          contacts[contactIdx].isArchived = true;\n          modifiedA = [...modifiedA, contacts[contactIdx]];\n          modifiedD = modifiedD.filter(c => c.id !== data.params.id);\n        }\n      } else if (channelIdx > -1) {\n        if (userChannels[channelIdx].isArchived) {\n          userChannels[channelIdx].isArchived = false;\n          modifiedA = modifiedA.filter(f => f.id !== data.params.id);\n          message = \"User has been removed to your archives\";\n        } else {\n          userChannels[channelIdx].isArchived = true;\n          modifiedA = [...modifiedA, {\n            ...userChannels[channelIdx],\n            isChannel: true\n          }];\n          modifiedChannels = modifiedChannels.filter(c => c.id !== data.params.id);\n          modifiedChatChannels = modifiedChatChannels.filter(c => c.id !== data.params.id);\n        }\n      }\n    }\n    onChangeContacts(contacts);\n    onChangeArchives(modifiedA);\n    onChangeDirectMessages(modifiedD);\n    onChangeUserChannels(modifiedChannels);\n    onChangeChannels(modifiedChatChannels);\n    return new Promise((resolve, reject) => {\n      if (data.params.id) {\n        setTimeout(() => {\n          resolve([200, message]);\n        });\n      } else {\n        reject([\"Internal Error!\"]);\n      }\n    });\n  });\n  mock.onPut(new RegExp(`${url.READ_CONVERSATION}/*`)).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n    let modifiedD = [...directMessages];\n    let modifiedF = [...favourites];\n    let modifiedC = [...channels];\n    if (data.params && data.params.id && conversations.length !== 0) {\n      /*\n      for chat conversations\n      */\n\n      const contactIdx = (modifiedD || []).findIndex(c => c.id + \"\" === data.params.id + \"\");\n      const contactFIdx = (modifiedF || []).findIndex(c => c.id + \"\" === data.params.id + \"\");\n      const contactCIdx = (modifiedC || []).findIndex(c => c.id + \"\" === data.params.id + \"\");\n      if (contactIdx > -1 && modifiedD[contactIdx][\"meta\"]) {\n        modifiedD[contactIdx].meta.unRead = 0;\n        onChangeDirectMessages(modifiedD);\n      }\n      if (contactFIdx > -1 && modifiedF[contactFIdx][\"meta\"]) {\n        modifiedF[contactFIdx].meta.unRead = 0;\n        onChangeFavourite(modifiedF);\n      }\n      if (contactCIdx > -1 && modifiedC[contactCIdx][\"meta\"]) {\n        modifiedC[contactCIdx].meta.unRead = 0;\n        onChangeChannels(modifiedC);\n      }\n    }\n    return new Promise((resolve, reject) => {\n      if (modifiedD) {\n        resolve([200, \"true\"]);\n      } else {\n        setTimeout(() => {\n          reject([\"Your id is not found\"]);\n        }, 500);\n      }\n    });\n  });\n  mock.onDelete(new RegExp(`${url.DELETE_IMAGE}/*`)).reply(config => {\n    const {\n      params\n    } = config;\n    return new Promise((resolve, reject) => {\n      if (params.userId && params.messageId && params.imageId) {\n        let modifiedC = [...conversations];\n        const conversationIdx = (modifiedC || []).findIndex(c => c.userId + \"\" === params.userId + \"\");\n        if (conversationIdx > -1 && modifiedC[conversationIdx].messages) {\n          const mIdx = (modifiedC[conversationIdx].messages || []).findIndex(c => c.mId + \"\" === params.messageId + \"\");\n          if (mIdx > -1 && modifiedC[conversationIdx].messages[mIdx] && modifiedC[conversationIdx].messages[mIdx].image) {\n            var _modifiedC$conversati;\n            if (((_modifiedC$conversati = modifiedC[conversationIdx].messages[mIdx].image) === null || _modifiedC$conversati === void 0 ? void 0 : _modifiedC$conversati.length) === 1) {\n              modifiedC[conversationIdx].messages = (modifiedC[conversationIdx].messages || []).filter(m => m.mId + \"\" !== params.messageId + \"\");\n            } else {\n              var _modifiedC$conversati2;\n              modifiedC[conversationIdx].messages[mIdx].image = (_modifiedC$conversati2 = modifiedC[conversationIdx].messages[mIdx].image) === null || _modifiedC$conversati2 === void 0 ? void 0 : _modifiedC$conversati2.filter(m => m.id + \"\" !== params.imageId + \"\");\n            }\n          }\n        }\n        onChangeConversations(modifiedC);\n        resolve([200, \"Message is Deleted!\"]);\n      } else {\n        reject([\"Your id is not found\"]);\n      }\n    });\n  });\n\n  // mock.onPut(new RegExp(`${url.UPDATE_ETTINGS}/*`)).reply(config => {\n  //   const data = JSON.parse(config[\"data\"]);\n  //   const { field, value } = data;\n  //   const modifiedS: any = { ...settings };\n  //   modifiedS[field] = value;\n  //   onChangeSettings(modifiedS);\n\n  //   return new Promise((resolve, reject) => {\n  //     if (modifiedS) {\n  //       setTimeout(() => {\n  //         resolve([200, \"Setting Updated!\"]);\n  //       });\n  //     } else {\n  //       reject([\"Something went wrong!\"]);\n  //     }\n  //   });\n  // });\n};\n\nexport default fakeBackend;","map":{"version":3,"names":["axios","MockAdapter","url","myData","contacts","onChangeContacts","calls","userChannels","onChangeUserChannels","bookmarks","onChangeBookmark","favourites","onChangeFavourite","directMessages","channels","onChangeDirectMessages","onChangeChannels","conversations","onChangeConversations","archiveChats","onChangeArchives","settings","accessToken","users","fakeBackend","mock","onNoMatch","onPost","reply","config","user","JSON","parse","validUser","filter","usr","email","password","Promise","resolve","reject","setTimeout","push","token","tokenObj","validUserObj","one","headers","finalToken","Authorization","uid","idx","objIndex","findIndex","obj","username","localStorage","removeItem","setItem","stringify","onGet","GET_CALLS_LIST","GET_BOOKMARKS_LIST","onDelete","RegExp","DELETE_BOOKMARK","params","id","length","updatedB","b","onPut","UPDATE_BOOKMARK","data","bookmIdx","GET_USER_SETTINGS","GET_FAVOURITES","GET_CHANNELS","CREATE_CHANNEL","newC","Date","getTime","toString","name","description","members","RECEIVE_MESSAGE","updatedUserC","modifiedC","conversationIdx","c","userId","messages","map","meta","received","READ_MESSAGE","read","RECEIVE_MESSAGE_FROM_USER","newM","mId","receiver","sender","DELETE_MESSAGE","messageId","m","FORWARD_MESSAGE","index","con","mid","text","message","time","toISOString","sent","isForwarded","image","attachments","forwardedMessage","conversationId","DELETE_USER_MESSAGES","GET_CHANNEL_DETAILS","chat","find","TOGGLE_FAVOURITE_CONTACT","modifiedF","modifiedD","contactIdx","isFavourite","f","GET_ARCHIVE_CONTACT","TOGGLE_ARCHIVE_CONTACT","modifiedA","modifiedChannels","modifiedChatChannels","channelIdx","isArchived","isChannel","READ_CONVERSATION","contactFIdx","contactCIdx","unRead","DELETE_IMAGE","imageId","mIdx","_modifiedC$conversati","_modifiedC$conversati2"],"sources":["/home/olfa/Documents/pfe-main/client/src/helpers/fakeBackend.ts"],"sourcesContent":["import axios from \"axios\";\nimport MockAdapter from \"axios-mock-adapter\";\nimport * as url from \"../api/urls\";\n\n// dummy data\nimport {\n  // profile\n  profileDetails,\n  myData,\n\n  //contacts\n  contacts,\n  onChangeContacts,\n\n  // calls\n  calls,\n\n  // channels\n  userChannels,\n  onChangeUserChannels,\n\n  // bookmarks\n  bookmarks,\n  onChangeBookmark,\n\n  // chats\n  favourites,\n  onChangeFavourite,\n  directMessages,\n  channels,\n  onChangeDirectMessages,\n  onChangeChannels,\n  conversations,\n  onChangeConversations,\n\n  // archive\n  archiveChats,\n  onChangeArchives,\n} from \"../data/index\";\nimport { settings, onChangeSettings } from \"../data/settings\";\n\nconst accessToken =\n  \"Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6ImFkbWluIiwiYWRtaW4iOnRydWUsImp0aSI6ImQ2MTEwYzAxLWMwYjUtNDUzNy1iNDZhLTI0NTk5Mjc2YjY1NiIsImlhdCI6MTU5MjU2MDk2MCwiZXhwIjoxNTkyNTY0NjE5fQ.QgFSQtFaK_Ktauadttq1Is7f9w0SUtKcL8xCmkAvGLw\";\n\nlet users = [myData];\n\nconst fakeBackend = () => {\n  // This sets the mock adapter on the default instance\n  const mock = new MockAdapter(axios, { onNoMatch: \"passthrough\" });\n\n  // mock.onPost(url.POST_FAKE_REGISTER).reply(config => {\n  //   const user = JSON.parse(config[\"data\"]);\n  //   users.push(user);\n  //   return new Promise((resolve, reject) => {\n  //     setTimeout(() => {\n  //       resolve([200, user]);\n  //     });\n  //   });\n  // });\n\n  mock.onPost(\"/post-fake-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const validUser = users.filter(\n      usr => usr.email === user.email && usr.password === user.password\n    );\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          setTimeout(() => {\n            resolve([200, validUser[0]]);\n          }, 1000);\n        } else {\n          reject([\n            \"Username and password are invalid. Please enter correct username and password\",\n          ]);\n        }\n      });\n    });\n  });\n\n  // mock.onPost(\"/fake-forget-pwd\").reply(config => {\n  //   // User needs to check that user is eXist or not and send mail for Reset New password\n\n  //   return new Promise((resolve, reject) => {\n  //     setTimeout(() => {\n  //       resolve([200, \"Check you mail and reset your password.\"]);\n  //     });\n  //   });\n  // });\n\n  mock.onPost(\"/post-jwt-register\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    users.push(user);\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, user]);\n      });\n    });\n  });\n\n  mock.onPost(\"/post-jwt-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const validUser = users.filter(\n      usr => usr.email === user.email && usr.password === user.password\n    );\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\n          const token = accessToken;\n\n          // JWT AccessToken\n          const tokenObj = { accessToken: token }; // Token Obj\n          const validUserObj = { ...validUser[0], ...tokenObj }; // validUser Obj\n\n          resolve([200, validUserObj]);\n        } else {\n          reject([\n            400,\n            \"Username and password are invalid. Please enter correct username and password\",\n          ]);\n        }\n      });\n    });\n  });\n\n  mock.onPost(\"/post-jwt-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n\n    const one = config.headers;\n\n    let finalToken = one.Authorization;\n\n    const validUser = users.filter(usr => usr.uid === user.idx);\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        // Verify Jwt token from header.Authorization\n        if (finalToken === accessToken) {\n          if (validUser[\"length\"] === 1) {\n            let objIndex;\n\n            //Find index of specific object using findIndex method.\n            objIndex = users.findIndex(obj => obj.uid === user.idx);\n\n            //Update object's name property.\n            users[objIndex].username = user.username;\n\n            // Assign a value to locastorage\n            localStorage.removeItem(\"authUser\");\n            localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]));\n\n            resolve([200, \"Profile Updated Successfully\"]);\n          } else {\n            reject([400, \"Something wrong for edit profile\"]);\n          }\n        } else {\n          reject([400, \"Invalid Token !!\"]);\n        }\n      });\n    });\n  });\n\n  mock.onPost(\"/post-fake-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n\n    const validUser = users.filter(usr => usr.uid === user.idx);\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          let objIndex;\n\n          //Find index of specific object using findIndex method.\n          objIndex = users.findIndex(obj => obj.uid === user.idx);\n\n          //Update object's name property.\n          users[objIndex].username = user.username;\n\n          // Assign a value to locastorage\n          localStorage.removeItem(\"authUser\");\n          localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]));\n\n          resolve([200, \"Profile Updated Successfully\"]);\n        } else {\n          reject([400, \"Something wrong for edit profile\"]);\n        }\n      });\n    });\n  });\n\n  // mock.onPost(\"/jwt-forget-pwd\").reply(config => {\n  //   // User needs to check that user is eXist or not and send mail for Reset New password\n\n  //   return new Promise((resolve, reject) => {\n  //     setTimeout(() => {\n  //       resolve([200, \"Check you mail and reset your password.\"]);\n  //     });\n  //   });\n  // });\n\n  // mock.onPut(url.USER_CHANGE_PASSWORD).reply(config => {\n  //   return new Promise((resolve, reject) => {\n  //     const user = JSON.parse(config[\"data\"]);\n  //     users[0].password = user.password;\n  //     if (user) {\n  //       resolve([200, users[0]]);\n  //     } else {\n  //       reject([\"Some thing went wrong!\"]);\n  //     }\n  //   });\n  // });\n\n  /*\n  profile\n  */\n  // mock.onGet(url.GET_PROFILE_DETAILS).reply(config => {\n  //   return new Promise((resolve, reject) => {\n  //     if (profileDetails) {\n  //       resolve([200, profileDetails]);\n  //     } else {\n  //       reject([\"Some thing went wrong!\"]);\n  //     }\n  //   });\n  // });\n\n  /*\n  contacts\n  */\n  // mock.onGet(url.GET_CONTACTS).reply(config => {\n  //   return new Promise((resolve, reject) => {\n  //     if (contacts) {\n  //       resolve([200, contacts]);\n  //     } else {\n  //       reject([\"Some thing went wrong!\"]);\n  //     }\n  //   });\n  // });\n\n  // mock.onPost(url.INVITE_CONTACT).reply(config => {\n  //   // const use r = JSON.parse(config[\"data\"]);\n\n  //   return new Promise((resolve, reject) => {\n  //     resolve([200, \"User is Invited\"]);\n  //   });\n  // });\n\n  /*\n  calls\n  */\n  mock.onGet(url.GET_CALLS_LIST).reply(config => {\n    return new Promise((resolve, reject) => {\n      if (calls) {\n        resolve([200, calls]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n\n  /*\n  bookmarks\n  */\n  mock.onGet(url.GET_BOOKMARKS_LIST).reply(config => {\n    return new Promise((resolve, reject) => {\n      if (bookmarks) {\n        resolve([200, bookmarks]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n\n  mock.onDelete(new RegExp(`${url.DELETE_BOOKMARK}/*`)).reply(config => {\n    const { params } = config;\n\n    return new Promise((resolve, reject) => {\n      if (params.id && bookmarks.length !== 0) {\n        const updatedB = bookmarks.filter(\n          (b: any) => b.id + \"\" !== params.id + \"\"\n        );\n        onChangeBookmark(updatedB);\n        resolve([200, \"Bookmark is Deleted!\"]);\n      } else {\n        reject([\"Your id is not found\"]);\n      }\n    });\n  });\n\n  mock.onPut(new RegExp(`${url.UPDATE_BOOKMARK}/*`)).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n    return new Promise((resolve, reject) => {\n      if (data.id && bookmarks.length !== 0) {\n        const bookmIdx = bookmarks.findIndex(\n          (b: any) => b.id + \"\" === data.id + \"\"\n        );\n\n        if (bookmIdx > -1) {\n          let updatedB = [...bookmarks];\n          updatedB[bookmIdx] = data;\n          onChangeBookmark(updatedB);\n        }\n        resolve([200, \"Bookmark is Updated!\"]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n\n  /*\n  settings\n  */\n  mock.onGet(url.GET_USER_SETTINGS).reply(config => {\n    return new Promise((resolve, reject) => {\n      if (settings) {\n        resolve([200, settings]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n\n  /*\n  chats\n  */\n  /*\n   settings\n   */\n  mock.onGet(url.GET_FAVOURITES).reply(config => {\n    return new Promise((resolve, reject) => {\n    \n      if (favourites) {\n        resolve([200, favourites]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n\n  // mock.onGet(url.GET_DIRECT_MESSAGES).reply(config => {\n  //   return new Promise((resolve, reject) => {\n  //     if (directMessages) {\n  //       resolve([200, directMessages]);\n  //     } else {\n  //       reject([\"Some thing went wrong!\"]);\n  //     }\n  //   });\n  // });\n\n  mock.onGet(url.GET_CHANNELS).reply(config => {\n    return new Promise((resolve, reject) => {\n      if (channels) {\n        resolve([200, channels]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n\n  // mock.onPost(url.ADD_CONTACTS).reply(config => {\n  //   const data = JSON.parse(config[\"data\"]);\n\n  //   return new Promise((resolve, reject) => {\n  //     if (data) {\n  //       let newC: Array<any> = [];\n  //       for (let index = 0; index < (data || []).length; index++) {\n  //         const contactId = data[index];\n  //         const contact = contacts.find((c: any) => c.id + \"\" === contactId);\n  //         if (contact) {\n  //           newC = [...newC, contact];\n  //         }\n  //       }\n  //       onChangeDirectMessages([...directMessages, ...newC]);\n  //       resolve([200, \"Contacts Added!\"]);\n  //     } else {\n  //       reject([\"Some thing went wrong!\"]);\n  //     }\n  //   });\n  // });\n\n  mock.onPost(url.CREATE_CHANNEL).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n    return new Promise((resolve, reject) => {\n      if (data) {\n        const newC = {\n          id:\n            channels[channels.length - 1].id + new Date().getTime().toString(),\n          name: data.name,\n          description: data.description,\n          members: data.members,\n        };\n        onChangeChannels([...channels, newC]);\n        resolve([200, \"Channel Created!\"]);\n      } else {\n        reject([400, \"Some thing went wrong!\"]);\n      }\n    });\n  });\n\n  // mock.onGet(new RegExp(`${url.GET_CHAT_USER_DETAILS}/*`)).reply(config => {\n  //   const { params } = config;\n  //   let data: any;\n  //   if (params.id && contacts.length !== 0) {\n  //     const chat = (contacts || []).find(\n  //       (c: any) => c.id + \"\" === params.id + \"\"\n  //     );\n  //     if (chat) {\n  //       data = chat;\n  //     }\n  //   }\n\n  //   return new Promise((resolve, reject) => {\n  //     if (data) {\n  //       setTimeout(() => {\n  //         resolve([200, data]);\n  //       });\n  //     } else {\n  //       reject([\"Your id is not found\"]);\n  //     }\n  //   });\n  // });\n\n  // mock\n  //   .onGet(new RegExp(`${url.GET_CHAT_USER_CONVERSATIONS}/*`))\n  //   .reply(config => {\n  //     const { params } = config;\n\n  //     let data: any;\n  //     if (params.id && conversations.length !== 0) {\n  //       const chat = (conversations || []).find(\n  //         (c: any) => c.userId + \"\" === params.id + \"\"\n  //       );\n  //       if (chat) {\n  //         data = chat;\n  //       }\n  //     }\n\n  //     return new Promise((resolve, reject) => {\n  //       if (data) {\n  //         setTimeout(() => {\n  //           resolve([200, data]);\n  //         }, 500);\n  //       } else {\n  //         setTimeout(() => {\n  //           reject([\"Your id is not found\"]);\n  //         }, 500);\n  //       }\n  //     });\n  //   });\n\n  // mock.onPost(url.SEND_MESSAGE).reply(config => {\n  //   const data = JSON.parse(config[\"data\"]);\n  //   if (data && data.meta && data.meta.receiver && data.meta.sender) {\n  //     let modifiedC = [...conversations];\n  //     const conversationIdx = (conversations || []).findIndex(\n  //       (c: any) => c.userId + \"\" === data.meta.receiver + \"\"\n  //     );\n  //     if (conversationIdx > -1) {\n  //       const mid =\n  //         conversations[conversationIdx].messages &&\n  //         conversations[conversationIdx].messages.length\n  //           ? conversations[conversationIdx].messages.length + 1\n  //           : 1;\n  //       let newM: any = {\n  //         mId: mid,\n  //         text: data.text && data.text,\n  //         time: data.time,\n  //         meta: {\n  //           ...data.meta,\n  //           sent: true,\n  //           received: false,\n  //           read: false,\n  //         },\n  //       };\n  //       if (data.image && data.image.length) {\n  //         newM[\"image\"] = data.image;\n  //       }\n  //       if (data.attachments && data.attachments.length) {\n  //         newM[\"attachments\"] = data.attachments;\n  //       }\n  //       if (data.replyOf) {\n  //         newM[\"replyOf\"] = data.replyOf;\n  //       }\n\n  //       conversations[conversationIdx].messages = [\n  //         ...conversations[conversationIdx].messages,\n  //         newM,\n  //       ];\n  //       modifiedC = [...conversations];\n  //     } else {\n  //       // new message first time\n  //       let newM: any = {\n  //         mId: 1,\n  //         text: data.text,\n  //         time: data.time,\n  //         meta: {\n  //           ...data.meta,\n  //           sent: true,\n  //           received: false,\n  //           read: false,\n  //         },\n  //       };\n  //       if (data.image && data.image.length) {\n  //         newM[\"image\"] = data.image;\n  //       }\n  //       if (data.attachments && data.attachments.length) {\n  //         newM[\"attachments\"] = data.attachments;\n  //       }\n  //       if (data.replyOf) {\n  //         newM[\"replyOf\"] = data.replyOf;\n  //       }\n  //       const newC = {\n  //         conversationId: conversations.length + 1,\n  //         userId: data.meta.receiver,\n  //         messages: [\n  //           {\n  //             ...newM,\n  //           },\n  //         ],\n  //       };\n  //       modifiedC = [...conversations, newC];\n  //     }\n  //     onChangeConversations(modifiedC);\n  //   }\n\n  //   return new Promise((resolve, reject) => {\n  //     if (data && data.meta && data.meta.receiver && data.meta.sender) {\n  //       resolve([200, \"Channel Created!\"]);\n  //     } else {\n  //       reject([400, \"Some thing went wrong!\"]);\n  //     }\n  //   });\n  // });\n\n  mock.onPut(new RegExp(`${url.RECEIVE_MESSAGE}/*`)).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n    let updatedUserC: any;\n    if (data.params && data.params.id && conversations.length !== 0) {\n      let modifiedC = [...conversations];\n      const conversationIdx = (modifiedC || []).findIndex(\n        (c: any) => c.userId + \"\" === data.params.id + \"\"\n      );\n      if (conversationIdx > -1) {\n        if (modifiedC[conversationIdx].messages) {\n          modifiedC[conversationIdx].messages = (\n            modifiedC[conversationIdx].messages || []\n          ).map((c: any) => {\n            return {\n              ...c,\n              meta: { ...c.meta, received: true },\n            };\n          });\n        }\n        updatedUserC = modifiedC[conversationIdx];\n        onChangeConversations(modifiedC);\n      }\n    }\n\n    return new Promise((resolve, reject) => {\n      if (updatedUserC) {\n        resolve([200, updatedUserC]);\n      } else {\n        setTimeout(() => {\n          reject([\"Your id is not found\"]);\n        }, 500);\n      }\n    });\n  });\n\n  mock.onPut(new RegExp(`${url.READ_MESSAGE}/*`)).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n    let updatedUserC: any;\n    if (data.params && data.params.id && conversations.length !== 0) {\n      let modifiedC = [...conversations];\n      const conversationIdx = (modifiedC || []).findIndex(\n        (c: any) => c.userId + \"\" === data.params.id + \"\"\n      );\n      if (conversationIdx > -1) {\n        if (modifiedC[conversationIdx].messages) {\n          modifiedC[conversationIdx].messages = (\n            modifiedC[conversationIdx].messages || []\n          ).map((c: any) => {\n            return {\n              ...c,\n              meta: { ...c.meta, read: true },\n            };\n          });\n        }\n        updatedUserC = modifiedC[conversationIdx];\n        onChangeConversations(modifiedC);\n      }\n    }\n\n    return new Promise((resolve, reject) => {\n      if (updatedUserC) {\n        resolve([200, updatedUserC]);\n      } else {\n        setTimeout(() => {\n          reject([\"Your id is not found\"]);\n        }, 500);\n      }\n    });\n  });\n\n  mock.onGet(new RegExp(`${url.RECEIVE_MESSAGE_FROM_USER}/*`)).reply(config => {\n    let updatedUserC: any;\n    const { params } = config;\n    if (params && params.id && conversations.length !== 0) {\n      let modifiedC = [...conversations];\n      const conversationIdx = (modifiedC || []).findIndex(\n        (c: any) => c.userId + \"\" === params.id + \"\"\n      );\n      if (conversationIdx > -1) {\n        if (modifiedC[conversationIdx].messages) {\n          const newM = {\n            ...modifiedC[conversationIdx].messages[\n              modifiedC[conversationIdx].messages.length - 1\n            ],\n          };\n\n          modifiedC[conversationIdx].messages.push({\n            ...newM,\n            mId: newM.mId + new Date().getTime(),\n            meta: {\n              ...newM.meta,\n              receiver: newM.meta.sender,\n              sender: newM.meta.receiver,\n            },\n          });\n        }\n        updatedUserC = modifiedC[conversationIdx];\n        onChangeConversations(modifiedC);\n      }\n    }\n\n    return new Promise((resolve, reject) => {\n      if (updatedUserC) {\n        resolve([200, updatedUserC]);\n      } else {\n        setTimeout(() => {\n          reject([\"Your id is not found\"]);\n        }, 500);\n      }\n    });\n  });\n\n  mock.onDelete(new RegExp(`${url.DELETE_MESSAGE}/*`)).reply(config => {\n    const { params } = config;\n\n    return new Promise((resolve, reject) => {\n      if (params.userId && params.messageId) {\n        let modifiedC = [...conversations];\n        const conversationIdx = (modifiedC || []).findIndex(\n          (c: any) => c.userId + \"\" === params.userId + \"\"\n        );\n        if (conversationIdx > -1) {\n          modifiedC[conversationIdx].messages = (\n            modifiedC[conversationIdx].messages || []\n          ).filter((m: any) => m.mId + \"\" !== params.messageId + \"\");\n        }\n        onChangeConversations(modifiedC);\n        resolve([200, \"Message is Deleted!\"]);\n      } else {\n        reject([\"Your id is not found\"]);\n      }\n    });\n  });\n\n  mock.onPost(url.FORWARD_MESSAGE).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n    let modifiedC = [...conversations];\n    if (data && data.contacts) {\n      for (let index = 0; index < data.contacts.length; index++) {\n        const c = data.contacts[index];\n        const conversationIdx = (modifiedC || []).findIndex(\n          (con: any) => con.userId + \"\" === c + \"\"\n        );\n\n        if (conversationIdx > -1) {\n          const mid =\n            modifiedC[conversationIdx].messages &&\n            modifiedC[conversationIdx].messages.length\n              ? modifiedC[conversationIdx].messages.length + 1\n              : 1;\n          let newM: any = {\n            mId: mid,\n            text: data.message && data.message,\n            time: new Date().toISOString(),\n            meta: {\n              receiver: c,\n              sender: users[0].uid,\n              sent: true,\n              received: false,\n              read: false,\n              isForwarded: true,\n            },\n          };\n          if (data.image && data.image.length) {\n            newM[\"image\"] = data.image;\n          }\n          if (data.attachments && data.attachments.length) {\n            newM[\"attachments\"] = data.attachments;\n          }\n          if (data.forwardedMessage) {\n            newM[\"replyOf\"] = data.forwardedMessage;\n          }\n\n          modifiedC[conversationIdx].messages = [\n            ...modifiedC[conversationIdx].messages,\n            newM,\n          ];\n          modifiedC = [...modifiedC];\n        } else {\n          // new message first time\n          let newM: any = {\n            mId: 1,\n            text: data.message && data.message,\n            time: new Date().toISOString(),\n            meta: {\n              receiver: \"614ecab4ac946a9bdafa4e3b\",\n              sender: users[0].uid,\n              sent: true,\n              received: false,\n              read: false,\n              isForwarded: true,\n            },\n          };\n          if (data.image && data.image.length) {\n            newM[\"image\"] = data.image;\n          }\n          if (data.attachments && data.attachments.length) {\n            newM[\"attachments\"] = data.attachments;\n          }\n          if (data.forwardedMessage) {\n            newM[\"replyOf\"] = data.forwardedMessage;\n          }\n          const newC = {\n            conversationId: modifiedC.length + 1,\n            userId: c,\n            messages: [\n              {\n                ...newM,\n              },\n            ],\n          };\n          modifiedC = [...modifiedC, newC];\n        }\n      }\n    }\n\n    onChangeConversations(modifiedC);\n    return new Promise((resolve, reject) => {\n      if (data) {\n        resolve([200, \"Message is Forwarded!\"]);\n      } else {\n        reject([\"Your id is not found\"]);\n      }\n    });\n  });\n\n  mock.onDelete(new RegExp(`${url.DELETE_USER_MESSAGES}/*`)).reply(config => {\n    const { params } = config;\n\n    return new Promise((resolve, reject) => {\n      if (params.userId) {\n        let modifiedC = [...conversations];\n        modifiedC = (modifiedC || []).filter(\n          (c: any) => c.userId + \"\" !== params.userId + \"\"\n        );\n        onChangeConversations(modifiedC);\n        resolve([200, \"Messages are Deleted!\"]);\n      } else {\n        reject([\"Your id is not found\"]);\n      }\n    });\n  });\n\n  mock.onGet(new RegExp(`${url.GET_CHANNEL_DETAILS}/*`)).reply(config => {\n    const { params } = config;\n    let data: any;\n    if (params.id && contacts.length !== 0) {\n      const chat = (userChannels || []).find(\n        (c: any) => c.id + \"\" === params.id + \"\"\n      );\n      if (chat) {\n        data = chat;\n      }\n    }\n\n    return new Promise((resolve, reject) => {\n      if (data) {\n        setTimeout(() => {\n          resolve([200, data]);\n        });\n      } else {\n        reject([\"The channel is not found\"]);\n      }\n    });\n  });\n\n  mock.onPut(new RegExp(`${url.TOGGLE_FAVOURITE_CONTACT}/*`)).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n\n    let message = \"User has been added to your favourite\";\n    let modifiedC = [...contacts];\n    let modifiedF = [...favourites];\n    let modifiedD = [...directMessages];\n    if (data.params.id && contacts.length !== 0) {\n      const contactIdx = (modifiedC || []).findIndex(\n        (c: any) => c.id + \"\" === data.params.id + \"\"\n      );\n      if (contactIdx > -1) {\n        if (contacts[contactIdx].isFavourite) {\n          contacts[contactIdx].isFavourite = false;\n          modifiedF = modifiedF.filter((f: any) => f.id !== data.params.id);\n          message = \"User has been removed to your favourite\";\n        } else {\n          contacts[contactIdx].isFavourite = true;\n          modifiedF = [...modifiedF, contacts[contactIdx]];\n          modifiedD = modifiedD.filter((c: any) => c.id !== data.params.id);\n        }\n      }\n    }\n    onChangeContacts(contacts);\n    onChangeFavourite(modifiedF);\n    onChangeDirectMessages(modifiedD);\n\n    return new Promise((resolve, reject) => {\n      if (data.params.id) {\n        setTimeout(() => {\n          resolve([200, message]);\n        });\n      } else {\n        reject([\"The channel is not found\"]);\n      }\n    });\n  });\n\n  mock.onGet(url.GET_ARCHIVE_CONTACT).reply(config => {\n    return new Promise((resolve, reject) => {\n      if (archiveChats) {\n        setTimeout(() => {\n          resolve([200, archiveChats]);\n        });\n      } else {\n        reject([\"The archive chat is not found\"]);\n      }\n    });\n  });\n\n  mock.onPut(new RegExp(`${url.TOGGLE_ARCHIVE_CONTACT}/*`)).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n\n    let message = \"User has been added to your archives\";\n    let modifiedC = [...contacts];\n    let modifiedA = [...archiveChats];\n    let modifiedD = [...directMessages];\n    let modifiedChannels = [...userChannels];\n    let modifiedChatChannels = [...channels];\n    if (data.params.id && contacts.length !== 0) {\n      const contactIdx = (modifiedC || []).findIndex(\n        (c: any) => c.id + \"\" === data.params.id + \"\"\n      );\n      const channelIdx = (modifiedChannels || []).findIndex(\n        (c: any) => c.id + \"\" === data.params.id + \"\"\n      );\n      if (contactIdx > -1) {\n        if (contacts[contactIdx].isArchived) {\n          contacts[contactIdx].isArchived = false;\n          modifiedA = modifiedA.filter((f: any) => f.id !== data.params.id);\n          message = \"User has been removed to your archives\";\n        } else {\n          contacts[contactIdx].isArchived = true;\n          modifiedA = [...modifiedA, contacts[contactIdx]];\n          modifiedD = modifiedD.filter((c: any) => c.id !== data.params.id);\n        }\n      } else if (channelIdx > -1) {\n        if (userChannels[channelIdx].isArchived) {\n          userChannels[channelIdx].isArchived = false;\n          modifiedA = modifiedA.filter((f: any) => f.id !== data.params.id);\n          message = \"User has been removed to your archives\";\n        } else {\n          userChannels[channelIdx].isArchived = true;\n          modifiedA = [\n            ...modifiedA,\n            { ...userChannels[channelIdx], isChannel: true },\n          ];\n          modifiedChannels = modifiedChannels.filter(\n            (c: any) => c.id !== data.params.id\n          );\n          modifiedChatChannels = modifiedChatChannels.filter(\n            (c: any) => c.id !== data.params.id\n          );\n        }\n      }\n    }\n    onChangeContacts(contacts);\n    onChangeArchives(modifiedA);\n    onChangeDirectMessages(modifiedD);\n    onChangeUserChannels(modifiedChannels);\n    onChangeChannels(modifiedChatChannels);\n\n    return new Promise((resolve, reject) => {\n      if (data.params.id) {\n        setTimeout(() => {\n          resolve([200, message]);\n        });\n      } else {\n        reject([\"Internal Error!\"]);\n      }\n    });\n  });\n\n  mock.onPut(new RegExp(`${url.READ_CONVERSATION}/*`)).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n    let modifiedD = [...directMessages];\n    let modifiedF = [...favourites];\n    let modifiedC = [...channels];\n    if (data.params && data.params.id && conversations.length !== 0) {\n      /*\n     for chat conversations\n     */\n\n      const contactIdx = (modifiedD || []).findIndex(\n        (c: any) => c.id + \"\" === data.params.id + \"\"\n      );\n      const contactFIdx = (modifiedF || []).findIndex(\n        (c: any) => c.id + \"\" === data.params.id + \"\"\n      );\n      const contactCIdx = (modifiedC || []).findIndex(\n        (c: any) => c.id + \"\" === data.params.id + \"\"\n      );\n      if (contactIdx > -1 && modifiedD[contactIdx][\"meta\"]) {\n        modifiedD[contactIdx].meta!.unRead = 0;\n        onChangeDirectMessages(modifiedD);\n      }\n      if (contactFIdx > -1 && modifiedF[contactFIdx][\"meta\"]) {\n        modifiedF[contactFIdx].meta!.unRead = 0;\n        onChangeFavourite(modifiedF);\n      }\n      if (contactCIdx > -1 && modifiedC[contactCIdx][\"meta\"]) {\n        modifiedC[contactCIdx].meta!.unRead = 0;\n        onChangeChannels(modifiedC);\n      }\n    }\n\n    return new Promise((resolve, reject) => {\n      if (modifiedD) {\n        resolve([200, \"true\"]);\n      } else {\n        setTimeout(() => {\n          reject([\"Your id is not found\"]);\n        }, 500);\n      }\n    });\n  });\n\n  mock.onDelete(new RegExp(`${url.DELETE_IMAGE}/*`)).reply(config => {\n    const { params } = config;\n\n    return new Promise((resolve, reject) => {\n      if (params.userId && params.messageId && params.imageId) {\n        let modifiedC = [...conversations];\n        const conversationIdx = (modifiedC || []).findIndex(\n          (c: any) => c.userId + \"\" === params.userId + \"\"\n        );\n        if (conversationIdx > -1 && modifiedC[conversationIdx].messages) {\n          const mIdx = (modifiedC[conversationIdx].messages || []).findIndex(\n            (c: any) => c.mId + \"\" === params.messageId + \"\"\n          );\n          if (\n            mIdx > -1 &&\n            modifiedC[conversationIdx].messages[mIdx] &&\n            modifiedC[conversationIdx].messages[mIdx].image\n          ) {\n            if (modifiedC[conversationIdx].messages[mIdx].image?.length === 1) {\n              modifiedC[conversationIdx].messages = (\n                modifiedC[conversationIdx].messages || []\n              ).filter((m: any) => m.mId + \"\" !== params.messageId + \"\");\n            } else {\n              modifiedC[conversationIdx].messages[mIdx].image = modifiedC[\n                conversationIdx\n              ].messages[mIdx].image?.filter(\n                (m: any) => m.id + \"\" !== params.imageId + \"\"\n              );\n            }\n          }\n        }\n        onChangeConversations(modifiedC);\n        resolve([200, \"Message is Deleted!\"]);\n      } else {\n        reject([\"Your id is not found\"]);\n      }\n    });\n  });\n\n  // mock.onPut(new RegExp(`${url.UPDATE_ETTINGS}/*`)).reply(config => {\n  //   const data = JSON.parse(config[\"data\"]);\n  //   const { field, value } = data;\n  //   const modifiedS: any = { ...settings };\n  //   modifiedS[field] = value;\n  //   onChangeSettings(modifiedS);\n\n  //   return new Promise((resolve, reject) => {\n  //     if (modifiedS) {\n  //       setTimeout(() => {\n  //         resolve([200, \"Setting Updated!\"]);\n  //       });\n  //     } else {\n  //       reject([\"Something went wrong!\"]);\n  //     }\n  //   });\n  // });\n};\n\nexport default fakeBackend;\n"],"mappings":"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A;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEAf,IAAI,CAAC8C,KAAK,CAAC,IAAIP,MAAM,CAAE,GAAE9D,GAAG,CAACoF,eAAgB,IAAG,CAAC,CAAC,CAAC1D,KAAK,CAACC,MAAM,IAAI;IACjE,MAAM4C,IAAI,GAAG1C,IAAI,CAACC,KAAK,CAACH,MAAM,CAAC,MAAM,CAAC,CAAC;IACvC,IAAI0D,YAAiB;IACrB,IAAId,IAAI,CAACP,MAAM,IAAIO,IAAI,CAACP,MAAM,CAACC,EAAE,IAAIlD,aAAa,CAACmD,MAAM,KAAK,CAAC,EAAE;MAC/D,IAAIoB,SAAS,GAAG,CAAC,GAAGvE,aAAa,CAAC;MAClC,MAAMwE,eAAe,GAAG,CAACD,SAAS,IAAI,EAAE,EAAEnC,SAAS,CAChDqC,CAAM,IAAKA,CAAC,CAACC,MAAM,GAAG,EAAE,KAAKlB,IAAI,CAACP,MAAM,CAACC,EAAE,GAAG,EACjD,CAAC;MACD,IAAIsB,eAAe,GAAG,CAAC,CAAC,EAAE;QACxB,IAAID,SAAS,CAACC,eAAe,CAAC,CAACG,QAAQ,EAAE;UACvCJ,SAAS,CAACC,eAAe,CAAC,CAACG,QAAQ,GAAG,CACpCJ,SAAS,CAACC,eAAe,CAAC,CAACG,QAAQ,IAAI,EAAE,EACzCC,GAAG,CAAEH,CAAM,IA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"},"metadata":{},"sourceType":"module"}