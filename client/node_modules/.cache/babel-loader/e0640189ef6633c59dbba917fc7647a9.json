{"ast":null,"code":"import { takeEvery, fork, put, all, call } from \"redux-saga/effects\";\n\n// Login Redux States\nimport { AuthForgetPassActionTypes } from \"./types\";\nimport { authForgetPassApiResponseSuccess, authForgetPassApiResponseError } from \"./actions\";\n\n//Include Both Helper File with needed methods\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\";\nimport { postFakeForgetPwd, postJwtForgetPwd, changePassword as changePasswordApi } from \"../../../api/index\";\nconst fireBaseBackend = getFirebaseBackend();\n\n//If user is send successfully send mail link then dispatch redux action's are directly from here.\nfunction* forgetUser({\n  payload: user\n}) {\n  try {\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n      yield call(fireBaseBackend.forgetPassword, user.email);\n      yield put(authForgetPassApiResponseSuccess(AuthForgetPassActionTypes.FORGET_PASSWORD, \"Reset link are sended to your mailbox, check there first\"));\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"jwt\") {\n      yield call(postJwtForgetPwd, {\n        email: user.email\n      });\n      yield put(authForgetPassApiResponseSuccess(AuthForgetPassActionTypes.FORGET_PASSWORD, \"Reset link are sended to your mailbox, check there first\"));\n    } else {\n      yield call(postFakeForgetPwd, {\n        email: user.email\n      });\n      yield put(authForgetPassApiResponseSuccess(AuthForgetPassActionTypes.FORGET_PASSWORD, \"Reset link are sended to your mailbox, check there first\"));\n    }\n  } catch (error) {\n    yield put(authForgetPassApiResponseError(AuthForgetPassActionTypes.FORGET_PASSWORD, error));\n  }\n}\nfunction* changePassword({\n  payload: newPassword\n}) {\n  try {\n    yield call(changePasswordApi, newPassword);\n    yield put(authForgetPassApiResponseSuccess(AuthForgetPassActionTypes.CHANGE_PASSWORD, \"Your Password is Changed\"));\n  } catch (error) {\n    yield put(authForgetPassApiResponseError(AuthForgetPassActionTypes.CHANGE_PASSWORD, error));\n  }\n}\nexport function* watchUserPasswordForget() {\n  yield takeEvery(AuthForgetPassActionTypes.FORGET_PASSWORD, forgetUser);\n}\nexport function* watchUserChangePassword() {\n  yield takeEvery(AuthForgetPassActionTypes.CHANGE_PASSWORD, changePassword);\n}\nfunction* forgetPasswordSaga() {\n  yield all([fork(watchUserPasswordForget), fork(watchUserChangePassword)]);\n}\nexport default forgetPasswordSaga;","map":{"version":3,"names":["takeEvery","fork","put","all","call","AuthForgetPassActionTypes","authForgetPassApiResponseSuccess","authForgetPassApiResponseError","getFirebaseBackend","postFakeForgetPwd","postJwtForgetPwd","changePassword","changePasswordApi","fireBaseBackend","forgetUser","payload","user","process","env","REACT_APP_DEFAULTAUTH","forgetPassword","email","FORGET_PASSWORD","error","newPassword","CHANGE_PASSWORD","watchUserPasswordForget","watchUserChangePassword","forgetPasswordSaga"],"sources":["/home/olfa/Documents/pfe-main/client/src/redux/auth/forgetpwd/saga.ts"],"sourcesContent":["import { takeEvery, fork, put, all, call } from \"redux-saga/effects\";\n\n// Login Redux States\nimport { AuthForgetPassActionTypes } from \"./types\";\nimport {\n  authForgetPassApiResponseSuccess,\n  authForgetPassApiResponseError,\n} from \"./actions\";\n\n//Include Both Helper File with needed methods\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\";\n\nimport {\n  postFakeForgetPwd,\n  postJwtForgetPwd,\n  changePassword as changePasswordApi,\n} from \"../../../api/index\";\n\nconst fireBaseBackend: any = getFirebaseBackend();\n\n//If user is send successfully send mail link then dispatch redux action's are directly from here.\nfunction* forgetUser({ payload: user }: any) {\n  try {\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n      yield call(fireBaseBackend.forgetPassword, user.email);\n      yield put(\n        authForgetPassApiResponseSuccess(\n          AuthForgetPassActionTypes.FORGET_PASSWORD,\n          \"Reset link are sended to your mailbox, check there first\"\n        )\n      );\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"jwt\") {\n      yield call(postJwtForgetPwd, {\n        email: user.email,\n      });\n      yield put(\n        authForgetPassApiResponseSuccess(\n          AuthForgetPassActionTypes.FORGET_PASSWORD,\n          \"Reset link are sended to your mailbox, check there first\"\n        )\n      );\n    } else {\n      yield call(postFakeForgetPwd, {\n        email: user.email,\n      });\n      yield put(\n        authForgetPassApiResponseSuccess(\n          AuthForgetPassActionTypes.FORGET_PASSWORD,\n          \"Reset link are sended to your mailbox, check there first\"\n        )\n      );\n    }\n  } catch (error: any) {\n    yield put(\n      authForgetPassApiResponseError(\n        AuthForgetPassActionTypes.FORGET_PASSWORD,\n        error\n      )\n    );\n  }\n}\n\nfunction* changePassword({ payload: newPassword }: any) {\n  try {\n    yield call(changePasswordApi, newPassword);\n    yield put(\n      authForgetPassApiResponseSuccess(\n        AuthForgetPassActionTypes.CHANGE_PASSWORD,\n        \"Your Password is Changed\"\n      )\n    );\n  } catch (error: any) {\n    yield put(\n      authForgetPassApiResponseError(\n        AuthForgetPassActionTypes.CHANGE_PASSWORD,\n        error\n      )\n    );\n  }\n}\n\nexport function* watchUserPasswordForget() {\n  yield takeEvery(AuthForgetPassActionTypes.FORGET_PASSWORD, forgetUser);\n}\n\nexport function* watchUserChangePassword() {\n  yield takeEvery(AuthForgetPassActionTypes.CHANGE_PASSWORD, changePassword);\n}\n\nfunction* forgetPasswordSaga() {\n  yield all([fork(watchUserPasswordForget), fork(watchUserChangePassword)]);\n}\n\nexport default forgetPasswordSaga;\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,IAAI,EAAEC,GAAG,EAAEC,GAAG,EAAEC,IAAI,QAAQ,oBAAoB;;AAEpE;AACA,SAASC,yBAAyB,QAAQ,SAAS;AACnD,SACEC,gCAAgC,EAChCC,8BAA8B,QACzB,WAAW;;AAElB;AACA,SAASC,kBAAkB,QAAQ,kCAAkC;AAErE,SACEC,iBAAiB,EACjBC,gBAAgB,EAChBC,cAAc,IAAIC,iBAAiB,QAC9B,oBAAoB;AAE3B,MAAMC,eAAoB,GAAGL,kBAAkB,CAAC,CAAC;;AAEjD;AACA,UAAUM,UAAUA,CAAC;EAAEC,OAAO,EAAEC;AAAU,CAAC,EAAE;EAC3C,IAAI;IACF,IAAIC,OAAO,CAACC,GAAG,CAACC,qBAAqB,KAAK,UAAU,EAAE;MACpD,MAAMf,IAAI,CAACS,eAAe,CAACO,cAAc,EAAEJ,IAAI,CAACK,KAAK,CAAC;MACtD,MAAMnB,GAAG,CACPI,gCAAgC,CAC9BD,yBAAyB,CAACiB,eAAe,EACzC,0DACF,CACF,CAAC;IACH,CAAC,MAAM,IAAIL,OAAO,CAACC,GAAG,CAACC,qBAAqB,KAAK,KAAK,EAAE;MACtD,MAAMf,IAAI,CAACM,gBAAgB,EAAE;QAC3BW,KAAK,EAAEL,IAAI,CAACK;MACd,CAAC,CAAC;MACF,MAAMnB,GAAG,CACPI,gCAAgC,CAC9BD,yBAAyB,CAACiB,eAAe,EACzC,0DACF,CACF,CAAC;IACH,CAAC,MAAM;MACL,MAAMlB,IAAI,CAACK,iBAAiB,EAAE;QAC5BY,KAAK,EAAEL,IAAI,CAACK;MACd,CAAC,CAAC;MACF,MAAMnB,GAAG,CACPI,gCAAgC,CAC9BD,yBAAyB,CAACiB,eAAe,EACzC,0DACF,CACF,CAAC;IACH;EACF,CAAC,CAAC,OAAOC,KAAU,EAAE;IACnB,MAAMrB,GAAG,CACPK,8BAA8B,CAC5BF,yBAAyB,CAACiB,eAAe,EACzCC,KACF,CACF,CAAC;EACH;AACF;AAEA,UAAUZ,cAAcA,CAAC;EAAEI,OAAO,EAAES;AAAiB,CAAC,EAAE;EACtD,IAAI;IACF,MAAMpB,IAAI,CAACQ,iBAAiB,EAAEY,WAAW,CAAC;IAC1C,MAAMtB,GAAG,CACPI,gCAAgC,CAC9BD,yBAAyB,CAACoB,eAAe,EACzC,0BACF,CACF,CAAC;EACH,CAAC,CAAC,OAAOF,KAAU,EAAE;IACnB,MAAMrB,GAAG,CACPK,8BAA8B,CAC5BF,yBAAyB,CAACoB,eAAe,EACzCF,KACF,CACF,CAAC;EACH;AACF;AAEA,OAAO,UAAUG,uBAAuBA,CAAA,EAAG;EACzC,MAAM1B,SAAS,CAACK,yBAAyB,CAACiB,eAAe,EAAER,UAAU,CAAC;AACxE;AAEA,OAAO,UAAUa,uBAAuBA,CAAA,EAAG;EACzC,MAAM3B,SAAS,CAACK,yBAAyB,CAACoB,eAAe,EAAEd,cAAc,CAAC;AAC5E;AAEA,UAAUiB,kBAAkBA,CAAA,EAAG;EAC7B,MAAMzB,GAAG,CAAC,CAACF,IAAI,CAACyB,uBAAuB,CAAC,EAAEzB,IAAI,CAAC0B,uBAAuB,CAAC,CAAC,CAAC;AAC3E;AAEA,eAAeC,kBAAkB"},"metadata":{},"sourceType":"module"}