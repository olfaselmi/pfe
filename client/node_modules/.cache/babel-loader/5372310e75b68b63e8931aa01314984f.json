{"ast":null,"code":"import firebase from \"firebase/app\";\n\n// Add the Firebase products that you want to use\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nclass FirebaseAuthBackend {\n  constructor(firebaseConfig) {\n    /**\n     * Registers the user with given details\n     */\n    // registerUser = (email, password) => {\n    //   return new Promise((resolve, reject) => {\n    //     firebase\n    //       .auth()\n    //       .createUserWithEmailAndPassword(email, password)\n    //       .then(\n    //         user => {\n    //           resolve(firebase.auth().currentUser);\n    //         },\n    //         error => {\n    //           reject(this._handleError(error));\n    //         }\n    //       );\n    //   });\n    // };\n    /**\n     * Registers the user with given details\n     */\n    this.editProfileAPI = (email, password) => {\n      return new Promise((resolve, reject) => {\n        firebase.auth().createUserWithEmailAndPassword(email, password).then(user => {\n          resolve(firebase.auth().currentUser);\n        }, error => {\n          reject(this._handleError(error));\n        });\n      });\n    };\n    /**\n     * Login user with given details\n     */\n    this.loginUser = (email, password) => {\n      return new Promise((resolve, reject) => {\n        firebase.auth().signInWithEmailAndPassword(email, password).then(user => {\n          const currentUser = JSON.stringify(firebase.auth().currentUser);\n          resolve(currentUser);\n        }, error => {\n          reject(this._handleError(error));\n        });\n      });\n    };\n    /**\n     * forget Password user with given details\n     */\n    this.forgetPassword = email => {\n      return new Promise((resolve, reject) => {\n        firebase.auth().sendPasswordResetEmail(email, {\n          url: window.location.protocol + \"//\" + window.location.host + \"/login\"\n        }).then(() => {\n          resolve(true);\n        }).catch(error => {\n          reject(this._handleError(error));\n        });\n      });\n    };\n    /**\n     * Logout the user\n     */\n    this.logout = () => {\n      return new Promise((resolve, reject) => {\n        firebase.auth().signOut().then(() => {\n          resolve(true);\n        }).catch(error => {\n          reject(this._handleError(error));\n        });\n      });\n    };\n    /**\n     * Social Login user with given details\n     */\n    this.socialLoginUser = (data, type) => {\n      let credential = {};\n      if (type === \"google\") {\n        credential = firebase.auth.GoogleAuthProvider.credential(data.idToken, data.token);\n      } else if (type === \"facebook\") {\n        credential = firebase.auth.FacebookAuthProvider.credential(data.token);\n      }\n      return new Promise((resolve, reject) => {\n        if (!!credential) {\n          firebase.auth().signInWithCredential(credential).then(user => {\n            let userL = this.addNewUserToFirestore(user);\n            userL = JSON.stringify(userL);\n            resolve(userL);\n          }).catch(error => {\n            reject(this._handleError(error));\n          });\n        } else {\n          // reject(this._handleError(error));\n        }\n      });\n    };\n    this.addNewUserToFirestore = user => {\n      const collection = firebase.firestore().collection(\"users\");\n      const {\n        profile\n      } = user.additionalUserInfo;\n      const details = {\n        firstName: profile.given_name ? profile.given_name : profile.first_name,\n        lastName: profile.family_name ? profile.family_name : profile.last_name,\n        fullName: profile.name,\n        email: profile.email,\n        picture: profile.picture,\n        createdDtm: firebase.firestore.FieldValue.serverTimestamp(),\n        lastLoginTime: firebase.firestore.FieldValue.serverTimestamp()\n      };\n      collection.doc(firebase.auth().currentUser.uid).set(details);\n      return {\n        user,\n        details\n      };\n    };\n    /**\n     * Returns the authenticated user\n     */\n    this.getAuthenticatedUser = () => {\n      if (!localStorage.getItem(\"authUser\")) return null;\n      return JSON.parse(localStorage.getItem(\"authUser\"));\n    };\n    if (firebaseConfig) {\n      // Initialize Firebase\n      firebase.initializeApp(firebaseConfig);\n      firebase.auth().onAuthStateChanged(user => {\n        if (user) {\n          setLoggeedInUser(user);\n        } else {\n          localStorage.removeItem(\"authUser\");\n        }\n      });\n    }\n  }\n  /**\n   * Handle the error\n   * @param {*} error\n   */\n  _handleError(error) {\n    // var errorCode = error.code;\n    var errorMessage = error.message;\n    return errorMessage;\n  }\n}\nlet _fireBaseBackend = null;\nconst setLoggeedInUser = user => {\n  localStorage.setItem(\"authUser\", JSON.stringify(user));\n};\n\n/**\n * Initilize the backend\n * @param {*} config\n */\nconst initFirebaseBackend = config => {\n  if (!_fireBaseBackend) {\n    _fireBaseBackend = new FirebaseAuthBackend(config);\n  }\n  return _fireBaseBackend;\n};\n\n/**\n * Returns the firebase backend\n */\nconst getFirebaseBackend = () => {\n  return _fireBaseBackend;\n};\nexport { initFirebaseBackend, getFirebaseBackend, setLoggeedInUser };","map":{"version":3,"names":["firebase","FirebaseAuthBackend","constructor","firebaseConfig","editProfileAPI","email","password","Promise","resolve","reject","auth","createUserWithEmailAndPassword","then","user","currentUser","error","_handleError","loginUser","signInWithEmailAndPassword","JSON","stringify","forgetPassword","sendPasswordResetEmail","url","window","location","protocol","host","catch","logout","signOut","socialLoginUser","data","type","credential","GoogleAuthProvider","idToken","token","FacebookAuthProvider","signInWithCredential","userL","addNewUserToFirestore","collection","firestore","profile","additionalUserInfo","details","firstName","given_name","first_name","lastName","family_name","last_name","fullName","name","picture","createdDtm","FieldValue","serverTimestamp","lastLoginTime","doc","uid","set","getAuthenticatedUser","localStorage","getItem","parse","initializeApp","onAuthStateChanged","setLoggeedInUser","removeItem","errorMessage","message","_fireBaseBackend","setItem","initFirebaseBackend","config","getFirebaseBackend"],"sources":["/home/olfa/Documents/pfe-main/client/src/helpers/firebase_helper.js"],"sourcesContent":["import firebase from \"firebase/app\";\n\n// Add the Firebase products that you want to use\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nclass FirebaseAuthBackend {\n  constructor(firebaseConfig) {\n    if (firebaseConfig) {\n      // Initialize Firebase\n      firebase.initializeApp(firebaseConfig);\n      firebase.auth().onAuthStateChanged(user => {\n        if (user) {\n          setLoggeedInUser(user);\n        } else {\n          localStorage.removeItem(\"authUser\");\n        }\n      });\n    }\n  }\n\n  /**\n   * Registers the user with given details\n   */\n  // registerUser = (email, password) => {\n  //   return new Promise((resolve, reject) => {\n  //     firebase\n  //       .auth()\n  //       .createUserWithEmailAndPassword(email, password)\n  //       .then(\n  //         user => {\n  //           resolve(firebase.auth().currentUser);\n  //         },\n  //         error => {\n  //           reject(this._handleError(error));\n  //         }\n  //       );\n  //   });\n  // };\n\n  /**\n   * Registers the user with given details\n   */\n  editProfileAPI = (email, password) => {\n    return new Promise((resolve, reject) => {\n      firebase\n        .auth()\n        .createUserWithEmailAndPassword(email, password)\n        .then(\n          user => {\n            resolve(firebase.auth().currentUser);\n          },\n          error => {\n            reject(this._handleError(error));\n          }\n        );\n    });\n  };\n\n  /**\n   * Login user with given details\n   */\n  loginUser = (email, password) => {\n    return new Promise((resolve, reject) => {\n      firebase\n        .auth()\n        .signInWithEmailAndPassword(email, password)\n        .then(\n          user => {\n            const currentUser = JSON.stringify(firebase.auth().currentUser);\n            resolve(currentUser);\n          },\n          error => {\n            reject(this._handleError(error));\n          }\n        );\n    });\n  };\n\n  /**\n   * forget Password user with given details\n   */\n  forgetPassword = email => {\n    return new Promise((resolve, reject) => {\n      firebase\n        .auth()\n        .sendPasswordResetEmail(email, {\n          url:\n            window.location.protocol + \"//\" + window.location.host + \"/login\",\n        })\n        .then(() => {\n          resolve(true);\n        })\n        .catch(error => {\n          reject(this._handleError(error));\n        });\n    });\n  };\n\n  /**\n   * Logout the user\n   */\n  logout = () => {\n    return new Promise((resolve, reject) => {\n      firebase\n        .auth()\n        .signOut()\n        .then(() => {\n          resolve(true);\n        })\n        .catch(error => {\n          reject(this._handleError(error));\n        });\n    });\n  };\n\n  /**\n   * Social Login user with given details\n   */\n  socialLoginUser = (data, type) => {\n    let credential = {};\n    if (type === \"google\") {\n      credential = firebase.auth.GoogleAuthProvider.credential(\n        data.idToken,\n        data.token\n      );\n    } else if (type === \"facebook\") {\n      credential = firebase.auth.FacebookAuthProvider.credential(data.token);\n    }\n    return new Promise((resolve, reject) => {\n      if (!!credential) {\n        firebase\n          .auth()\n          .signInWithCredential(credential)\n          .then(user => {\n            let userL = this.addNewUserToFirestore(user);\n            userL = JSON.stringify(userL);\n            resolve(userL);\n          })\n          .catch(error => {\n            reject(this._handleError(error));\n          });\n      } else {\n        // reject(this._handleError(error));\n      }\n    });\n  };\n\n  addNewUserToFirestore = user => {\n    const collection = firebase.firestore().collection(\"users\");\n    const { profile } = user.additionalUserInfo;\n    const details = {\n      firstName: profile.given_name ? profile.given_name : profile.first_name,\n      lastName: profile.family_name ? profile.family_name : profile.last_name,\n      fullName: profile.name,\n      email: profile.email,\n      picture: profile.picture,\n      createdDtm: firebase.firestore.FieldValue.serverTimestamp(),\n      lastLoginTime: firebase.firestore.FieldValue.serverTimestamp(),\n    };\n    collection.doc(firebase.auth().currentUser.uid).set(details);\n    return { user, details };\n  };\n\n  /**\n   * Returns the authenticated user\n   */\n  getAuthenticatedUser = () => {\n    if (!localStorage.getItem(\"authUser\")) return null;\n    return JSON.parse(localStorage.getItem(\"authUser\"));\n  };\n\n  /**\n   * Handle the error\n   * @param {*} error\n   */\n  _handleError(error) {\n    // var errorCode = error.code;\n    var errorMessage = error.message;\n    return errorMessage;\n  }\n}\n\nlet _fireBaseBackend = null;\n\nconst setLoggeedInUser = user => {\n  localStorage.setItem(\"authUser\", JSON.stringify(user));\n};\n\n/**\n * Initilize the backend\n * @param {*} config\n */\nconst initFirebaseBackend = config => {\n  if (!_fireBaseBackend) {\n    _fireBaseBackend = new FirebaseAuthBackend(config);\n  }\n  return _fireBaseBackend;\n};\n\n/**\n * Returns the firebase backend\n */\nconst getFirebaseBackend = () => {\n  return _fireBaseBackend;\n};\n\nexport { initFirebaseBackend, getFirebaseBackend, setLoggeedInUser };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}