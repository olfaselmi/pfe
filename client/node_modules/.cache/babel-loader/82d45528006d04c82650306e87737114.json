{"ast":null,"code":"var _jsxFileName = \"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Contacts/index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\n\n// hooks\nimport { useRedux } from \"../../../hooks/index\";\n\n// components\nimport Loader from \"../../../components/Loader\";\nimport AppSimpleBar from \"../../../components/AppSimpleBar\";\nimport InviteContactModal from \"../../../components/InviteContactModal\";\nimport EmptyStateResult from \"../../../components/EmptyStateResult\";\nimport ListHeader from \"./ListHeader\";\nimport Contact from \"./Contact\";\n\n// actions\nimport { getContacts, inviteContact, resetContacts, getChannelDetails, getChatUserDetails, getChatUserConversations, changeSelectedChat } from \"../../../redux/actions\";\n\n//utils\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Index = props => {\n  _s();\n  // global store\n  const {\n    dispatch,\n    useAppSelector\n  } = useRedux();\n  const {\n    contactsList,\n    getContactsLoading,\n    isContactInvited\n  } = useAppSelector(state => ({\n    contactsList: state.Contacts.contacts,\n    getContactsLoading: state.Contacts.getContactsLoading,\n    isContactInvited: state.Contacts.isContactInvited\n  }));\n\n  /*\n  get contacts\n  */\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n  const [contacts, setContacts] = useState([]);\n  const [contactsData, setContactsData] = useState([]);\n  useEffect(() => {\n    if (contactsList.length > 0) {\n      setContacts(contactsList);\n    }\n  }, [contactsList]);\n  useEffect(() => {\n    // if (contacts.length > 0) {\n    //   const formattedContacts = divideByKey(\"firstName\", contacts);\n    //   setContactsData(formattedContacts);\n    // }\n  }, [contacts]);\n\n  /*\n  add contact modal handeling\n  */\n  const [isOpen, setIsOpen] = useState(false);\n  const openModal = () => {\n    setIsOpen(true);\n  };\n  const closeModal = () => {\n    setIsOpen(false);\n  };\n\n  /*\n  onInvite handeling\n  */\n  const onInviteContact = data => {\n    dispatch(inviteContact(data));\n  };\n  useEffect(() => {\n    if (isContactInvited) {\n      setIsOpen(false);\n      setTimeout(() => {\n        dispatch(resetContacts(\"isContactInvited\", false));\n      }, 1000);\n    }\n  }, [dispatch, isContactInvited]);\n\n  /*\n  contact search\n  */\n  const [search, setSearch] = useState(\"\");\n  const onChangeSearch = value => {\n    setSearch(value);\n    let modifiedContacts = [...contactsList];\n    let filteredContacts = (modifiedContacts || []).filter(c => c[\"firstName\"].toLowerCase().includes(value.toLowerCase()));\n    setContacts(filteredContacts);\n  };\n  const totalC = (contacts || []).length;\n  const onSelectChat = (id, isChannel) => {\n    if (isChannel) {\n      dispatch(getChannelDetails(id));\n    } else {\n      dispatch(getChatUserDetails(id));\n    }\n    dispatch(getChatUserConversations(id));\n    dispatch(changeSelectedChat(id));\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"position-relative\",\n      children: [getContactsLoading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 32\n      }, this), /*#__PURE__*/_jsxDEV(ListHeader, {\n        search: search,\n        onChangeSearch: onChangeSearch,\n        openModal: openModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AppSimpleBar, {\n        className: \"chat-message-list chat-group-list\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: totalC === 0 ? /*#__PURE__*/_jsxDEV(EmptyStateResult, {\n            searchedText: search\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 15\n          }, this) : (contactsData || []).map((letterContacts, key) => /*#__PURE__*/_jsxDEV(Contact, {\n            letterContacts: letterContacts,\n            index: key,\n            onSelectChat: onSelectChat\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InviteContactModal, {\n      isOpen: isOpen,\n      onClose: closeModal,\n      onInvite: onInviteContact\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Index, \"cB8LStBnav159nSEqqFNckD5UYI=\", true, function () {\n  return [useRedux];\n});\n_c = Index;\nexport default Index;\nvar _c;\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"names":["React","useEffect","useState","useRedux","Loader","AppSimpleBar","InviteContactModal","EmptyStateResult","ListHeader","Contact","getContacts","inviteContact","resetContacts","getChannelDetails","getChatUserDetails","getChatUserConversations","changeSelectedChat","jsxDEV","_jsxDEV","Fragment","_Fragment","Index","props","_s","dispatch","useAppSelector","contactsList","getContactsLoading","isContactInvited","state","Contacts","contacts","setContacts","contactsData","setContactsData","length","isOpen","setIsOpen","openModal","closeModal","onInviteContact","data","setTimeout","search","setSearch","onChangeSearch","value","modifiedContacts","filteredContacts","filter","c","toLowerCase","includes","totalC","onSelectChat","id","isChannel","children","className","fileName","_jsxFileName","lineNumber","columnNumber","searchedText","map","letterContacts","key","index","onClose","onInvite","_c","$RefreshReg$"],"sources":["/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Contacts/index.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\n// hooks\nimport { useRedux } from \"../../../hooks/index\";\n\n// components\nimport Loader from \"../../../components/Loader\";\nimport AppSimpleBar from \"../../../components/AppSimpleBar\";\nimport InviteContactModal from \"../../../components/InviteContactModal\";\nimport EmptyStateResult from \"../../../components/EmptyStateResult\";\nimport ListHeader from \"./ListHeader\";\nimport Contact from \"./Contact\";\n\n// actions\nimport {\n  getContacts,\n  inviteContact,\n  resetContacts,\n  getChannelDetails,\n  getChatUserDetails,\n  getChatUserConversations,\n  changeSelectedChat,\n} from \"../../../redux/actions\";\n\n//utils\nimport { divideByKey, DivideByKeyResultTypes } from \"../../../utils\";\n\ninterface IndexProps {}\n\nconst Index = (props: IndexProps) => {\n  // global store\n  const { dispatch, useAppSelector } = useRedux();\n\n  const { contactsList, getContactsLoading, isContactInvited } = useAppSelector(\n    state => ({\n      contactsList: state.Contacts.contacts,\n      getContactsLoading: state.Contacts.getContactsLoading,\n      isContactInvited: state.Contacts.isContactInvited,\n    })\n  );\n\n  /*\n  get contacts\n  */\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n\n  const [contacts, setContacts] = useState<Array<any>>([]);\n  const [contactsData, setContactsData] = useState<Array<any>>([]);\n  useEffect(() => {\n    if (contactsList.length > 0) {\n      setContacts(contactsList);\n    }\n  }, [contactsList]);\n\n  useEffect(() => {\n    // if (contacts.length > 0) {\n    //   const formattedContacts = divideByKey(\"firstName\", contacts);\n    //   setContactsData(formattedContacts);\n    // }\n  }, [contacts]);\n\n  /*\n  add contact modal handeling\n  */\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const openModal = () => {\n    setIsOpen(true);\n  };\n  const closeModal = () => {\n    setIsOpen(false);\n  };\n\n  /*\n  onInvite handeling\n  */\n  const onInviteContact = (data: any) => {\n    dispatch(inviteContact(data));\n  };\n  useEffect(() => {\n    if (isContactInvited) {\n      setIsOpen(false);\n      setTimeout(() => {\n        dispatch(resetContacts(\"isContactInvited\", false));\n      }, 1000);\n    }\n  }, [dispatch, isContactInvited]);\n\n  /*\n  contact search\n  */\n  const [search, setSearch] = useState(\"\");\n  const onChangeSearch = (value: string) => {\n    setSearch(value);\n    let modifiedContacts = [...contactsList];\n    let filteredContacts = (modifiedContacts || []).filter((c: any) =>\n      c[\"firstName\"].toLowerCase().includes(value.toLowerCase())\n    );\n    setContacts(filteredContacts);\n  };\n\n  const totalC = (contacts || []).length;\n  const onSelectChat = (id: string | number, isChannel?: boolean) => {\n    if (isChannel) {\n      dispatch(getChannelDetails(id));\n    } else {\n      dispatch(getChatUserDetails(id));\n    }\n    dispatch(getChatUserConversations(id));\n    dispatch(changeSelectedChat(id));\n  };\n\n  return (\n    <>\n      <div className=\"position-relative\">\n        {getContactsLoading && <Loader />}\n        <ListHeader\n          search={search}\n          onChangeSearch={onChangeSearch}\n          openModal={openModal}\n        />\n\n        <AppSimpleBar className=\"chat-message-list chat-group-list\">\n          <div>\n            {totalC === 0 ? (\n              <EmptyStateResult searchedText={search} />\n            ) : (\n              (contactsData || []).map(\n                (letterContacts: DivideByKeyResultTypes, key: number) => (\n                  <Contact\n                    letterContacts={letterContacts}\n                    key={key}\n                    index={key}\n                    onSelectChat={onSelectChat}\n                  />\n                )\n              )\n            )}\n          </div>\n        </AppSimpleBar>\n      </div>\n      <InviteContactModal\n        isOpen={isOpen}\n        onClose={closeModal}\n        onInvite={onInviteContact}\n      />\n    </>\n  );\n};\n\nexport default Index;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}