{"ast":null,"code":"// types\nimport { SettingsActionTypes } from \"./types\";\nexport const INIT_STATE = {\n  settings: {}\n};\nconst Settings = (state = INIT_STATE, action) => {\n  switch (action.type) {\n    case SettingsActionTypes.API_RESPONSE_SUCCESS:\n      switch (action.payload.actionType) {\n        case SettingsActionTypes.GET_USER_SETTINGS:\n          return {\n            ...state,\n            settings: action.payload.data,\n            isSettingsFetched: true,\n            getSettingsLoading: false,\n            isSettingsUpdated: false\n          };\n        case SettingsActionTypes.UPDATE_USER_SETTINGS:\n          return {\n            ...state,\n            isSettingsUpdated: true\n          };\n        default:\n          return {\n            ...state\n          };\n      }\n    case SettingsActionTypes.API_RESPONSE_ERROR:\n      switch (action.payload.actionType) {\n        case SettingsActionTypes.GET_USER_SETTINGS:\n          return {\n            ...state,\n            isSettingsFetched: false,\n            getSettingsLoading: false\n          };\n        case SettingsActionTypes.UPDATE_USER_SETTINGS:\n          return {\n            ...state,\n            isSettingsUpdated: false\n          };\n        default:\n          return {\n            ...state\n          };\n      }\n    case SettingsActionTypes.GET_USER_SETTINGS:\n      {\n        return {\n          ...state,\n          getSettingsLoading: true,\n          isSettingsFetched: false\n        };\n      }\n    case SettingsActionTypes.UPDATE_USER_SETTINGS:\n      return {\n        ...state,\n        isSettingsUpdated: false\n      };\n    default:\n      return {\n        ...state\n      };\n  }\n};\n_c = Settings;\nexport default Settings;\nvar _c;\n$RefreshReg$(_c, \"Settings\");","map":{"version":3,"names":["SettingsActionTypes","INIT_STATE","settings","Settings","state","action","type","API_RESPONSE_SUCCESS","payload","actionType","GET_USER_SETTINGS","data","isSettingsFetched","getSettingsLoading","isSettingsUpdated","UPDATE_USER_SETTINGS","API_RESPONSE_ERROR","_c","$RefreshReg$"],"sources":["/home/olfa/Documents/pfe-main/client/src/redux/settings/reducer.ts"],"sourcesContent":["// types\nimport { SettingsActionTypes, SettingsState } from \"./types\";\n\nexport const INIT_STATE: SettingsState = {\n  settings: {},\n};\n\nconst Settings = (state = INIT_STATE, action: any) => {\n  switch (action.type) {\n    case SettingsActionTypes.API_RESPONSE_SUCCESS:\n      switch (action.payload.actionType) {\n        case SettingsActionTypes.GET_USER_SETTINGS:\n          return {\n            ...state,\n            settings: action.payload.data,\n            isSettingsFetched: true,\n            getSettingsLoading: false,\n            isSettingsUpdated: false,\n          };\n        case SettingsActionTypes.UPDATE_USER_SETTINGS:\n          return {\n            ...state,\n            isSettingsUpdated: true,\n          };\n        default:\n          return { ...state };\n      }\n\n    case SettingsActionTypes.API_RESPONSE_ERROR:\n      switch (action.payload.actionType) {\n        case SettingsActionTypes.GET_USER_SETTINGS:\n          return {\n            ...state,\n            isSettingsFetched: false,\n            getSettingsLoading: false,\n          };\n        case SettingsActionTypes.UPDATE_USER_SETTINGS:\n          return {\n            ...state,\n            isSettingsUpdated: false,\n          };\n        default:\n          return { ...state };\n      }\n\n    case SettingsActionTypes.GET_USER_SETTINGS: {\n      return {\n        ...state,\n        getSettingsLoading: true,\n        isSettingsFetched: false,\n      };\n    }\n    case SettingsActionTypes.UPDATE_USER_SETTINGS:\n      return {\n        ...state,\n        isSettingsUpdated: false,\n      };\n\n    default:\n      return { ...state };\n  }\n};\n\nexport default Settings;\n"],"mappings":"AAAA;AACA,SAASA,mBAAmB,QAAuB,SAAS;AAE5D,OAAO,MAAMC,UAAyB,GAAG;EACvCC,QAAQ,EAAE,CAAC;AACb,CAAC;AAED,MAAMC,QAAQ,GAAGA,CAACC,KAAK,GAAGH,UAAU,EAAEI,MAAW,KAAK;EACpD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKN,mBAAmB,CAACO,oBAAoB;MAC3C,QAAQF,MAAM,CAACG,OAAO,CAACC,UAAU;QAC/B,KAAKT,mBAAmB,CAACU,iBAAiB;UACxC,OAAO;YACL,GAAGN,KAAK;YACRF,QAAQ,EAAEG,MAAM,CAACG,OAAO,CAACG,IAAI;YAC7BC,iBAAiB,EAAE,IAAI;YACvBC,kBAAkB,EAAE,KAAK;YACzBC,iBAAiB,EAAE;UACrB,CAAC;QACH,KAAKd,mBAAmB,CAACe,oBAAoB;UAC3C,OAAO;YACL,GAAGX,KAAK;YACRU,iBAAiB,EAAE;UACrB,CAAC;QACH;UACE,OAAO;YAAE,GAAGV;UAAM,CAAC;MACvB;IAEF,KAAKJ,mBAAmB,CAACgB,kBAAkB;MACzC,QAAQX,MAAM,CAACG,OAAO,CAACC,UAAU;QAC/B,KAAKT,mBAAmB,CAACU,iBAAiB;UACxC,OAAO;YACL,GAAGN,KAAK;YACRQ,iBAAiB,EAAE,KAAK;YACxBC,kBAAkB,EAAE;UACtB,CAAC;QACH,KAAKb,mBAAmB,CAACe,oBAAoB;UAC3C,OAAO;YACL,GAAGX,KAAK;YACRU,iBAAiB,EAAE;UACrB,CAAC;QACH;UACE,OAAO;YAAE,GAAGV;UAAM,CAAC;MACvB;IAEF,KAAKJ,mBAAmB,CAACU,iBAAiB;MAAE;QAC1C,OAAO;UACL,GAAGN,KAAK;UACRS,kBAAkB,EAAE,IAAI;UACxBD,iBAAiB,EAAE;QACrB,CAAC;MACH;IACA,KAAKZ,mBAAmB,CAACe,oBAAoB;MAC3C,OAAO;QACL,GAAGX,KAAK;QACRU,iBAAiB,EAAE;MACrB,CAAC;IAEH;MACE,OAAO;QAAE,GAAGV;MAAM,CAAC;EACvB;AACF,CAAC;AAACa,EAAA,GAtDId,QAAQ;AAwDd,eAAeA,QAAQ;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}