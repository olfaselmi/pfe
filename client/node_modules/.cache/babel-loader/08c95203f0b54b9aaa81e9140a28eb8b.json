{"ast":null,"code":"import { takeEvery, fork, put, all, call } from \"redux-saga/effects\";\n\n// Redux State\nimport { BookmarksActionTypes } from \"./types\";\n\n// actions\nimport { bookmarksApiResponseSuccess, bookmarksApiResponseError } from \"./actions\";\n\n// api\nimport { getBookmarks as getBookmarksApi, updateBookmark as updateBookmarkApi, deleteBookmark as deleteBookmarkApi } from \"../../api/index\";\n\n// helpers\nimport { showSuccessNotification, showErrorNotification } from \"../../helpers/notifications\";\nfunction* getBookmarks() {\n  try {\n    const response = yield call(getBookmarksApi);\n    yield put(bookmarksApiResponseSuccess(BookmarksActionTypes.GET_BOOKMARKS, response));\n  } catch (error) {\n    yield put(bookmarksApiResponseError(BookmarksActionTypes.GET_BOOKMARKS, error));\n  }\n}\nfunction* updateBookmark({\n  payload: {\n    id,\n    data\n  }\n}) {\n  try {\n    const response = yield call(updateBookmarkApi, id, data);\n    yield put(bookmarksApiResponseSuccess(BookmarksActionTypes.UPDATE_BOOKMARK, response));\n    yield call(showSuccessNotification, response + \"\");\n  } catch (error) {\n    yield call(showErrorNotification, error);\n    yield put(bookmarksApiResponseError(BookmarksActionTypes.UPDATE_BOOKMARK, error));\n  }\n}\nfunction* deleteBookmark({\n  payload: id\n}) {\n  try {\n    const response = yield call(deleteBookmarkApi, id);\n    yield put(bookmarksApiResponseSuccess(BookmarksActionTypes.DELETE_BOOKMARK, response));\n    yield call(showSuccessNotification, response + \"\");\n  } catch (error) {\n    yield call(showErrorNotification, error);\n    yield put(bookmarksApiResponseError(BookmarksActionTypes.DELETE_BOOKMARK, error));\n  }\n}\nexport function* watchGetCalls() {\n  yield takeEvery(BookmarksActionTypes.GET_BOOKMARKS, getBookmarks);\n}\nexport function* watchUpdateBookmark() {\n  yield takeEvery(BookmarksActionTypes.UPDATE_BOOKMARK, updateBookmark);\n}\nexport function* watchDeleteBookmark() {\n  yield takeEvery(BookmarksActionTypes.DELETE_BOOKMARK, deleteBookmark);\n}\nfunction* bookmarksSaga() {\n  yield all([fork(watchGetCalls), fork(watchUpdateBookmark), fork(watchDeleteBookmark)]);\n}\nexport default bookmarksSaga;","map":{"version":3,"names":["takeEvery","fork","put","all","call","BookmarksActionTypes","bookmarksApiResponseSuccess","bookmarksApiResponseError","getBookmarks","getBookmarksApi","updateBookmark","updateBookmarkApi","deleteBookmark","deleteBookmarkApi","showSuccessNotification","showErrorNotification","response","GET_BOOKMARKS","error","payload","id","data","UPDATE_BOOKMARK","DELETE_BOOKMARK","watchGetCalls","watchUpdateBookmark","watchDeleteBookmark","bookmarksSaga"],"sources":["/home/olfa/Documents/pfe-main/client/src/redux/bookmarks/saga.ts"],"sourcesContent":["import { takeEvery, fork, put, all, call } from \"redux-saga/effects\";\n\n// Redux State\nimport { BookmarksActionTypes } from \"./types\";\n\n// actions\nimport {\n  bookmarksApiResponseSuccess,\n  bookmarksApiResponseError,\n} from \"./actions\";\n\n// api\nimport {\n  getBookmarks as getBookmarksApi,\n  updateBookmark as updateBookmarkApi,\n  deleteBookmark as deleteBookmarkApi,\n} from \"../../api/index\";\n\n// helpers\nimport {\n  showSuccessNotification,\n  showErrorNotification,\n} from \"../../helpers/notifications\";\n\nfunction* getBookmarks() {\n  try {\n    const response: Promise<any> = yield call(getBookmarksApi);\n    yield put(\n      bookmarksApiResponseSuccess(BookmarksActionTypes.GET_BOOKMARKS, response)\n    );\n  } catch (error: any) {\n    yield put(\n      bookmarksApiResponseError(BookmarksActionTypes.GET_BOOKMARKS, error)\n    );\n  }\n}\n\nfunction* updateBookmark({ payload: { id, data } }: any) {\n  try {\n    const response: Promise<any> = yield call(updateBookmarkApi, id, data);\n    yield put(\n      bookmarksApiResponseSuccess(\n        BookmarksActionTypes.UPDATE_BOOKMARK,\n        response\n      )\n    );\n    yield call(showSuccessNotification, response + \"\");\n  } catch (error: any) {\n    yield call(showErrorNotification, error);\n    yield put(\n      bookmarksApiResponseError(BookmarksActionTypes.UPDATE_BOOKMARK, error)\n    );\n  }\n}\n\nfunction* deleteBookmark({ payload: id }: any) {\n  try {\n    const response: Promise<any> = yield call(deleteBookmarkApi, id);\n    yield put(\n      bookmarksApiResponseSuccess(\n        BookmarksActionTypes.DELETE_BOOKMARK,\n        response\n      )\n    );\n    yield call(showSuccessNotification, response + \"\");\n  } catch (error: any) {\n    yield call(showErrorNotification, error);\n    yield put(\n      bookmarksApiResponseError(BookmarksActionTypes.DELETE_BOOKMARK, error)\n    );\n  }\n}\n\nexport function* watchGetCalls() {\n  yield takeEvery(BookmarksActionTypes.GET_BOOKMARKS, getBookmarks);\n}\n\nexport function* watchUpdateBookmark() {\n  yield takeEvery(BookmarksActionTypes.UPDATE_BOOKMARK, updateBookmark);\n}\nexport function* watchDeleteBookmark() {\n  yield takeEvery(BookmarksActionTypes.DELETE_BOOKMARK, deleteBookmark);\n}\nfunction* bookmarksSaga() {\n  yield all([\n    fork(watchGetCalls),\n    fork(watchUpdateBookmark),\n    fork(watchDeleteBookmark),\n  ]);\n}\n\nexport default bookmarksSaga;\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,IAAI,EAAEC,GAAG,EAAEC,GAAG,EAAEC,IAAI,QAAQ,oBAAoB;;AAEpE;AACA,SAASC,oBAAoB,QAAQ,SAAS;;AAE9C;AACA,SACEC,2BAA2B,EAC3BC,yBAAyB,QACpB,WAAW;;AAElB;AACA,SACEC,YAAY,IAAIC,eAAe,EAC/BC,cAAc,IAAIC,iBAAiB,EACnCC,cAAc,IAAIC,iBAAiB,QAC9B,iBAAiB;;AAExB;AACA,SACEC,uBAAuB,EACvBC,qBAAqB,QAChB,6BAA6B;AAEpC,UAAUP,YAAYA,CAAA,EAAG;EACvB,IAAI;IACF,MAAMQ,QAAsB,GAAG,MAAMZ,IAAI,CAACK,eAAe,CAAC;IAC1D,MAAMP,GAAG,CACPI,2BAA2B,CAACD,oBAAoB,CAACY,aAAa,EAAED,QAAQ,CAC1E,CAAC;EACH,CAAC,CAAC,OAAOE,KAAU,EAAE;IACnB,MAAMhB,GAAG,CACPK,yBAAyB,CAACF,oBAAoB,CAACY,aAAa,EAAEC,KAAK,CACrE,CAAC;EACH;AACF;AAEA,UAAUR,cAAcA,CAAC;EAAES,OAAO,EAAE;IAAEC,EAAE;IAAEC;EAAK;AAAO,CAAC,EAAE;EACvD,IAAI;IACF,MAAML,QAAsB,GAAG,MAAMZ,IAAI,CAACO,iBAAiB,EAAES,EAAE,EAAEC,IAAI,CAAC;IACtE,MAAMnB,GAAG,CACPI,2BAA2B,CACzBD,oBAAoB,CAACiB,eAAe,EACpCN,QACF,CACF,CAAC;IACD,MAAMZ,IAAI,CAACU,uBAAuB,EAAEE,QAAQ,GAAG,EAAE,CAAC;EACpD,CAAC,CAAC,OAAOE,KAAU,EAAE;IACnB,MAAMd,IAAI,CAACW,qBAAqB,EAAEG,KAAK,CAAC;IACxC,MAAMhB,GAAG,CACPK,yBAAyB,CAACF,oBAAoB,CAACiB,eAAe,EAAEJ,KAAK,CACvE,CAAC;EACH;AACF;AAEA,UAAUN,cAAcA,CAAC;EAAEO,OAAO,EAAEC;AAAQ,CAAC,EAAE;EAC7C,IAAI;IACF,MAAMJ,QAAsB,GAAG,MAAMZ,IAAI,CAACS,iBAAiB,EAAEO,EAAE,CAAC;IAChE,MAAMlB,GAAG,CACPI,2BAA2B,CACzBD,oBAAoB,CAACkB,eAAe,EACpCP,QACF,CACF,CAAC;IACD,MAAMZ,IAAI,CAACU,uBAAuB,EAAEE,QAAQ,GAAG,EAAE,CAAC;EACpD,CAAC,CAAC,OAAOE,KAAU,EAAE;IACnB,MAAMd,IAAI,CAACW,qBAAqB,EAAEG,KAAK,CAAC;IACxC,MAAMhB,GAAG,CACPK,yBAAyB,CAACF,oBAAoB,CAACkB,eAAe,EAAEL,KAAK,CACvE,CAAC;EACH;AACF;AAEA,OAAO,UAAUM,aAAaA,CAAA,EAAG;EAC/B,MAAMxB,SAAS,CAACK,oBAAoB,CAACY,aAAa,EAAET,YAAY,CAAC;AACnE;AAEA,OAAO,UAAUiB,mBAAmBA,CAAA,EAAG;EACrC,MAAMzB,SAAS,CAACK,oBAAoB,CAACiB,eAAe,EAAEZ,cAAc,CAAC;AACvE;AACA,OAAO,UAAUgB,mBAAmBA,CAAA,EAAG;EACrC,MAAM1B,SAAS,CAACK,oBAAoB,CAACkB,eAAe,EAAEX,cAAc,CAAC;AACvE;AACA,UAAUe,aAAaA,CAAA,EAAG;EACxB,MAAMxB,GAAG,CAAC,CACRF,IAAI,CAACuB,aAAa,CAAC,EACnBvB,IAAI,CAACwB,mBAAmB,CAAC,EACzBxB,IAAI,CAACyB,mBAAmB,CAAC,CAC1B,CAAC;AACJ;AAEA,eAAeC,aAAa"},"metadata":{},"sourceType":"module"}