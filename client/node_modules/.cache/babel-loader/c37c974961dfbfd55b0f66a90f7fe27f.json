{"ast":null,"code":"var _jsxFileName = \"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/ConversationUser/index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\n\n// hooks\nimport { useRedux } from \"../../../hooks/index\";\nimport io from \"socket.io-client\";\n\n// actions\nimport { toggleUserDetailsTab, getChatUserConversations, onSendMessage, receiveMessage, readMessage, receiveMessageFromUser, deleteMessage, deleteUserMessages, toggleArchiveContact, addChatUserConversations } from \"../../../redux/actions\";\n\n// hooks\nimport { useProfile } from \"../../../hooks\";\n\n// components\nimport Conversation from \"./Conversation\";\nimport ChatInputSection from \"./ChatInputSection/index\";\n\n// interface\n\n// dummy data\nimport { pinnedTabs } from \"../../../data/index\";\nimport UserHead from \"./UserHead\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:5000/\");\nconst Index = ({\n  isChannel\n}) => {\n  _s();\n  // global store\n  const {\n    dispatch,\n    useAppSelector\n  } = useRedux();\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [selectedChatCompare, setSelectedChatCompare] = useState();\n  const [typing, setTyping] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const {\n    chatUserDetails,\n    chatUserConversations,\n    messages,\n    isUserMessageSent,\n    isMessageDeleted,\n    isMessageForwarded,\n    isUserMessagesDeleted,\n    isImageDeleted\n  } = useAppSelector(state => ({\n    chatUserDetails: state.Chats.chatUserDetails,\n    chatUserConversations: state.Chats.chatUserConversations,\n    messages: state.Chats.messages,\n    isUserMessageSent: state.Chats.isUserMessageSent,\n    isMessageDeleted: state.Chats.isMessageDeleted,\n    isMessageForwarded: state.Chats.isMessageForwarded,\n    isUserMessagesDeleted: state.Chats.isUserMessagesDeleted,\n    isImageDeleted: state.Chats.isImageDeleted\n  }));\n  const onOpenUserDetails = () => {\n    dispatch(toggleUserDetailsTab(true));\n  };\n\n  /*\n  hooks\n  */\n  const {\n    userProfile\n  } = useProfile();\n\n  /*\n  reply handeling\n  */\n  const [replyData, setReplyData] = useState();\n  const onSetReplyData = reply => {\n    setReplyData(reply);\n  };\n\n  /*\n  send message\n  */\n  const onSend = data => {\n    // let params: any = {\n    //   text: data.text && data.text,\n    //   time: new Date().toISOString(),\n    //   image: data.image && data.image,\n    //   attachments: data.attachments && data.attachments,\n    //   meta: {\n    //     receiver: chatUserDetails.id,\n    //     sender: userProfile.uid,\n    //   },\n    // };\n    let params = {\n      channel: \"Olfa-Mahran\",\n      receiver: chatUserDetails.id,\n      text: data.text && data.text\n    };\n    let messageobject = {\n      user: userProfile.user.id,\n      text: data.text && data.text,\n      meta: {\n        receiver: chatUserDetails.id,\n        sender: userProfile.user.id,\n        sent: true,\n        received: false,\n        read: false\n      }\n    };\n    if (replyData && replyData !== null) {\n      params[\"replyOf\"] = replyData;\n    }\n    dispatch(onSendMessage(params));\n    dispatch(addChatUserConversations(messageobject));\n    socket.emit(\"new message\", messageobject, userProfile.user.id, chatUserConversations.messages.length);\n    if (!isChannel) {\n      setTimeout(() => {\n        dispatch(receiveMessage(chatUserDetails.id));\n      }, 1000);\n      setTimeout(() => {\n        dispatch(readMessage(chatUserDetails.id));\n      }, 1500);\n      setTimeout(() => {\n        dispatch(receiveMessageFromUser(chatUserDetails.id));\n      }, 2000);\n    }\n    setReplyData(null);\n  };\n  useEffect(() => {\n    socket.emit(\"setup\", userProfile);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.emit(\"join chat\", chatUserDetails);\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n  }, []);\n  useEffect(() => {\n    if (isUserMessageSent || isMessageDeleted || isMessageForwarded || isUserMessagesDeleted || isImageDeleted) {\n      dispatch(getChatUserConversations(chatUserDetails.id));\n    }\n  }, [dispatch, isUserMessageSent, chatUserDetails, isMessageDeleted, isMessageForwarded, isUserMessagesDeleted, isImageDeleted, chatUserConversations, userProfile]);\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved, userId, leng) => {\n      dispatch(addChatUserConversations(newMessageRecieved));\n    });\n  }, []);\n  const onDeleteMessage = messageId => {\n    dispatch(deleteMessage(chatUserDetails.id, messageId));\n  };\n  const onDeleteUserMessages = () => {\n    dispatch(deleteUserMessages(chatUserDetails.id));\n  };\n  const onToggleArchive = () => {\n    dispatch(toggleArchiveContact(chatUserDetails.id));\n  };\n  const sendMessageSocket = (data, userId) => {\n    socket.emit(\"new message\", data, userId);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(UserHead, {\n      chatUserDetails: chatUserDetails,\n      pinnedTabs: pinnedTabs,\n      onOpenUserDetails: onOpenUserDetails,\n      onDelete: onDeleteUserMessages,\n      isChannel: isChannel,\n      onToggleArchive: onToggleArchive\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Conversation, {\n      chatUserConversations: chatUserConversations,\n      chatUserDetails: chatUserDetails,\n      onDelete: onDeleteMessage,\n      onSetReplyData: onSetReplyData,\n      isChannel: isChannel,\n      messagesList: messages,\n      isTyping: isTyping\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatInputSection, {\n      onSend: onSend,\n      replyData: replyData,\n      onSetReplyData: onSetReplyData,\n      chatUserDetails: chatUserDetails,\n      sendMessageSocket: sendMessageSocket\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Index, \"vcW7TNmssWv0t9VvhZvrt9hyejQ=\", true, function () {\n  return [useRedux, useProfile];\n});\n_c = Index;\nexport default Index;\nvar _c;\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"names":["React","useEffect","useState","useRedux","io","toggleUserDetailsTab","getChatUserConversations","onSendMessage","receiveMessage","readMessage","receiveMessageFromUser","deleteMessage","deleteUserMessages","toggleArchiveContact","addChatUserConversations","useProfile","Conversation","ChatInputSection","pinnedTabs","UserHead","jsxDEV","_jsxDEV","Fragment","_Fragment","socket","Index","isChannel","_s","dispatch","useAppSelector","socketConnected","setSocketConnected","selectedChatCompare","setSelectedChatCompare","typing","setTyping","isTyping","setIsTyping","chatUserDetails","chatUserConversations","messages","isUserMessageSent","isMessageDeleted","isMessageForwarded","isUserMessagesDeleted","isImageDeleted","state","Chats","onOpenUserDetails","userProfile","replyData","setReplyData","onSetReplyData","reply","onSend","data","params","channel","receiver","id","text","messageobject","user","meta","sender","sent","received","read","emit","length","setTimeout","on","newMessageRecieved","userId","leng","onDeleteMessage","messageId","onDeleteUserMessages","onToggleArchive","sendMessageSocket","children","onDelete","fileName","_jsxFileName","lineNumber","columnNumber","messagesList","_c","$RefreshReg$"],"sources":["/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/ConversationUser/index.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\n// hooks\nimport { useRedux } from \"../../../hooks/index\";\n\nimport io from \"socket.io-client\";\n\n// actions\nimport {\n  toggleUserDetailsTab,\n  getChatUserConversations,\n  onSendMessage,\n  receiveMessage,\n  readMessage,\n  receiveMessageFromUser,\n  deleteMessage,\n  deleteUserMessages,\n  toggleArchiveContact,\n  addChatUserConversations,\n} from \"../../../redux/actions\";\n\n// hooks\nimport { useProfile } from \"../../../hooks\";\n\n// components\nimport Conversation from \"./Conversation\";\nimport ChatInputSection from \"./ChatInputSection/index\";\n\n// interface\nimport { MessagesTypes } from \"../../../data/messages\";\n\n// dummy data\nimport { pinnedTabs } from \"../../../data/index\";\nimport UserHead from \"./UserHead\";\n\nconst socket = io(\"http://localhost:5000/\");\n\ninterface IndexProps {\n  isChannel: boolean;\n}\nconst Index = ({ isChannel }: IndexProps) => {\n  // global store\n  const { dispatch, useAppSelector } = useRedux();\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [selectedChatCompare, setSelectedChatCompare] = useState();\n\n  const [typing, setTyping] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n\n  const {\n    chatUserDetails,\n    chatUserConversations,\n    messages,\n    isUserMessageSent,\n    isMessageDeleted,\n    isMessageForwarded,\n    isUserMessagesDeleted,\n    isImageDeleted,\n  } = useAppSelector((state) => ({\n    chatUserDetails: state.Chats.chatUserDetails,\n    chatUserConversations: state.Chats.chatUserConversations,\n    messages: state.Chats.messages,\n    isUserMessageSent: state.Chats.isUserMessageSent,\n    isMessageDeleted: state.Chats.isMessageDeleted,\n    isMessageForwarded: state.Chats.isMessageForwarded,\n    isUserMessagesDeleted: state.Chats.isUserMessagesDeleted,\n    isImageDeleted: state.Chats.isImageDeleted,\n  }));\n\n  const onOpenUserDetails = () => {\n    dispatch(toggleUserDetailsTab(true));\n  };\n\n  /*\n  hooks\n  */\n  const { userProfile } = useProfile();\n\n  /*\n  reply handeling\n  */\n  const [replyData, setReplyData] = useState<\n    null | MessagesTypes | undefined\n  >();\n  const onSetReplyData = (reply: null | MessagesTypes | undefined) => {\n    setReplyData(reply);\n  };\n\n\n  /*\n  send message\n  */\n  const onSend = (data: any) => {\n    // let params: any = {\n    //   text: data.text && data.text,\n    //   time: new Date().toISOString(),\n    //   image: data.image && data.image,\n    //   attachments: data.attachments && data.attachments,\n    //   meta: {\n    //     receiver: chatUserDetails.id,\n    //     sender: userProfile.uid,\n    //   },\n    // };\n    let params: any = {\n      channel: \"Olfa-Mahran\",\n      receiver: chatUserDetails.id,\n      text: data.text && data.text,\n    };\n\n    let messageobject: any = {\n      user: userProfile.user.id,\n      text: data.text && data.text,\n      meta: {\n        receiver: chatUserDetails.id,\n        sender: userProfile.user.id,\n        sent: true,\n        received: false,\n        read: false,\n      },\n    };\n    if (replyData && replyData !== null) {\n      params[\"replyOf\"] = replyData;\n    }\n    dispatch(onSendMessage(params));\n    dispatch(addChatUserConversations(messageobject));\n    socket.emit(\n      \"new message\",\n      messageobject,\n      userProfile.user.id,\n      chatUserConversations.messages.length\n    );\n\n    if (!isChannel) {\n      setTimeout(() => {\n        dispatch(receiveMessage(chatUserDetails.id));\n      }, 1000);\n      setTimeout(() => {\n        dispatch(readMessage(chatUserDetails.id));\n      }, 1500);\n      setTimeout(() => {\n        dispatch(receiveMessageFromUser(chatUserDetails.id));\n      }, 2000);\n    }\n    setReplyData(null);\n  };\n\n  useEffect(() => {\n    socket.emit(\"setup\", userProfile);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.emit(\"join chat\", chatUserDetails);\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n  }, []);\n\n  useEffect(() => {\n    if (\n      isUserMessageSent ||\n      isMessageDeleted ||\n      isMessageForwarded ||\n      isUserMessagesDeleted ||\n      isImageDeleted\n    ) {\n      dispatch(getChatUserConversations(chatUserDetails.id));\n    }\n  }, [\n    dispatch,\n    isUserMessageSent,\n    chatUserDetails,\n    isMessageDeleted,\n    isMessageForwarded,\n    isUserMessagesDeleted,\n    isImageDeleted,\n    chatUserConversations,\n    userProfile,\n  ]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved, userId, leng) => {\n      dispatch(addChatUserConversations(newMessageRecieved));\n    });\n  }, []);\n\n  const onDeleteMessage = (messageId: string | number) => {\n    dispatch(deleteMessage(chatUserDetails.id, messageId));\n  };\n\n  const onDeleteUserMessages = () => {\n    dispatch(deleteUserMessages(chatUserDetails.id));\n  };\n\n  const onToggleArchive = () => {\n    dispatch(toggleArchiveContact(chatUserDetails.id));\n  };\n\n  const sendMessageSocket = (data: any, userId: any) => {\n    socket.emit(\"new message\", data, userId);\n  };\n\n  return (\n    <>\n      <UserHead\n        chatUserDetails={chatUserDetails}\n        pinnedTabs={pinnedTabs}\n        onOpenUserDetails={onOpenUserDetails}\n        onDelete={onDeleteUserMessages}\n        isChannel={isChannel}\n        onToggleArchive={onToggleArchive}\n      />\n      <Conversation\n        chatUserConversations={chatUserConversations}\n        chatUserDetails={chatUserDetails}\n        onDelete={onDeleteMessage}\n        onSetReplyData={onSetReplyData}\n        isChannel={isChannel}\n        messagesList={messages}\n        isTyping={isTyping}\n      />\n      <ChatInputSection\n        onSend={onSend}\n        replyData={replyData}\n        onSetReplyData={onSetReplyData}\n        chatUserDetails={chatUserDetails}\n        sendMessageSocket={sendMessageSocket}\n      />\n    </>\n  );\n};\n\nexport default Index;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}