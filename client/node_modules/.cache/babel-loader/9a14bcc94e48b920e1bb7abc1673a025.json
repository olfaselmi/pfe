{"ast":null,"code":"// types\nimport { ContactsActionTypes } from \"./types\";\nexport const INIT_STATE = {\n  contacts: []\n};\nconst Contacts = (state = INIT_STATE, action) => {\n  switch (action.type) {\n    case ContactsActionTypes.API_RESPONSE_SUCCESS:\n      switch (action.payload.actionType) {\n        case ContactsActionTypes.GET_CONTACTS:\n          return {\n            ...state,\n            contacts: action.payload.data,\n            isContactsFetched: true,\n            getContactsLoading: false\n          };\n        case ContactsActionTypes.INVITE_CONTACT:\n          return {\n            ...state,\n            isContactInvited: true\n          };\n        default:\n          return {\n            ...state\n          };\n      }\n    case ContactsActionTypes.API_RESPONSE_ERROR:\n      switch (action.payload.actionType) {\n        case ContactsActionTypes.GET_CONTACTS:\n          return {\n            ...state,\n            isContactsFetched: false,\n            getContactsLoading: false\n          };\n        case ContactsActionTypes.INVITE_CONTACT:\n          return {\n            ...state,\n            isContactInvited: false\n          };\n        default:\n          return {\n            ...state\n          };\n      }\n    case ContactsActionTypes.GET_CONTACTS:\n      {\n        return {\n          ...state,\n          getContactsLoading: true,\n          isContactsFetched: false\n        };\n      }\n    case ContactsActionTypes.INVITE_CONTACT:\n      return {\n        ...state,\n        isContactInvited: false\n      };\n    case ContactsActionTypes.RESET_CONTACTS:\n      const flag = action.payload.flag;\n      const value = action.payload.value;\n      let flags = {};\n      flags[flag] = value;\n      return {\n        ...state,\n        ...flags\n      };\n    default:\n      return {\n        ...state\n      };\n  }\n};\n_c = Contacts;\nexport default Contacts;\nvar _c;\n$RefreshReg$(_c, \"Contacts\");","map":{"version":3,"names":["ContactsActionTypes","INIT_STATE","contacts","Contacts","state","action","type","API_RESPONSE_SUCCESS","payload","actionType","GET_CONTACTS","data","isContactsFetched","getContactsLoading","INVITE_CONTACT","isContactInvited","API_RESPONSE_ERROR","RESET_CONTACTS","flag","value","flags","_c","$RefreshReg$"],"sources":["/home/olfa/Documents/pfe-main/client/src/redux/contacts/reducer.ts"],"sourcesContent":["// types\nimport { ContactsActionTypes, ContactsState } from \"./types\";\n\nexport const INIT_STATE: ContactsState = {\n  contacts: [],\n};\n\nconst Contacts = (state = INIT_STATE, action: any) => {\n  switch (action.type) {\n    case ContactsActionTypes.API_RESPONSE_SUCCESS:\n      switch (action.payload.actionType) {\n        case ContactsActionTypes.GET_CONTACTS:\n          return {\n            ...state,\n            contacts: action.payload.data,\n            isContactsFetched: true,\n            getContactsLoading: false,\n          };\n        case ContactsActionTypes.INVITE_CONTACT:\n          return {\n            ...state,\n            isContactInvited: true,\n          };\n        default:\n          return { ...state };\n      }\n\n    case ContactsActionTypes.API_RESPONSE_ERROR:\n      switch (action.payload.actionType) {\n        case ContactsActionTypes.GET_CONTACTS:\n          return {\n            ...state,\n            isContactsFetched: false,\n            getContactsLoading: false,\n          };\n        case ContactsActionTypes.INVITE_CONTACT:\n          return {\n            ...state,\n            isContactInvited: false,\n          };\n        default:\n          return { ...state };\n      }\n\n    case ContactsActionTypes.GET_CONTACTS: {\n      return {\n        ...state,\n        getContactsLoading: true,\n        isContactsFetched: false,\n      };\n    }\n\n    case ContactsActionTypes.INVITE_CONTACT:\n      return {\n        ...state,\n        isContactInvited: false,\n      };\n    case ContactsActionTypes.RESET_CONTACTS:\n      const flag = action.payload.flag;\n      const value = action.payload.value;\n      let flags: any = {};\n      flags[flag] = value;\n      return {\n        ...state,\n        ...flags,\n      };\n    default:\n      return { ...state };\n  }\n};\n\nexport default Contacts;\n"],"mappings":"AAAA;AACA,SAASA,mBAAmB,QAAuB,SAAS;AAE5D,OAAO,MAAMC,UAAyB,GAAG;EACvCC,QAAQ,EAAE;AACZ,CAAC;AAED,MAAMC,QAAQ,GAAGA,CAACC,KAAK,GAAGH,UAAU,EAAEI,MAAW,KAAK;EACpD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKN,mBAAmB,CAACO,oBAAoB;MAC3C,QAAQF,MAAM,CAACG,OAAO,CAACC,UAAU;QAC/B,KAAKT,mBAAmB,CAACU,YAAY;UACnC,OAAO;YACL,GAAGN,KAAK;YACRF,QAAQ,EAAEG,MAAM,CAACG,OAAO,CAACG,IAAI;YAC7BC,iBAAiB,EAAE,IAAI;YACvBC,kBAAkB,EAAE;UACtB,CAAC;QACH,KAAKb,mBAAmB,CAACc,cAAc;UACrC,OAAO;YACL,GAAGV,KAAK;YACRW,gBAAgB,EAAE;UACpB,CAAC;QACH;UACE,OAAO;YAAE,GAAGX;UAAM,CAAC;MACvB;IAEF,KAAKJ,mBAAmB,CAACgB,kBAAkB;MACzC,QAAQX,MAAM,CAACG,OAAO,CAACC,UAAU;QAC/B,KAAKT,mBAAmB,CAACU,YAAY;UACnC,OAAO;YACL,GAAGN,KAAK;YACRQ,iBAAiB,EAAE,KAAK;YACxBC,kBAAkB,EAAE;UACtB,CAAC;QACH,KAAKb,mBAAmB,CAACc,cAAc;UACrC,OAAO;YACL,GAAGV,KAAK;YACRW,gBAAgB,EAAE;UACpB,CAAC;QACH;UACE,OAAO;YAAE,GAAGX;UAAM,CAAC;MACvB;IAEF,KAAKJ,mBAAmB,CAACU,YAAY;MAAE;QACrC,OAAO;UACL,GAAGN,KAAK;UACRS,kBAAkB,EAAE,IAAI;UACxBD,iBAAiB,EAAE;QACrB,CAAC;MACH;IAEA,KAAKZ,mBAAmB,CAACc,cAAc;MACrC,OAAO;QACL,GAAGV,KAAK;QACRW,gBAAgB,EAAE;MACpB,CAAC;IACH,KAAKf,mBAAmB,CAACiB,cAAc;MACrC,MAAMC,IAAI,GAAGb,MAAM,CAACG,OAAO,CAACU,IAAI;MAChC,MAAMC,KAAK,GAAGd,MAAM,CAACG,OAAO,CAACW,KAAK;MAClC,IAAIC,KAAU,GAAG,CAAC,CAAC;MACnBA,KAAK,CAACF,IAAI,CAAC,GAAGC,KAAK;MACnB,OAAO;QACL,GAAGf,KAAK;QACR,GAAGgB;MACL,CAAC;IACH;MACE,OAAO;QAAE,GAAGhB;MAAM,CAAC;EACvB;AACF,CAAC;AAACiB,EAAA,GA9DIlB,QAAQ;AAgEd,eAAeA,QAAQ;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}