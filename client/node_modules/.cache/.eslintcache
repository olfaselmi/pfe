[{"/home/olfa/Documents/pfe-main/client/src/index.tsx":"1","/home/olfa/Documents/pfe-main/client/src/reportWebVitals.ts":"2","/home/olfa/Documents/pfe-main/client/src/redux/store.ts":"3","/home/olfa/Documents/pfe-main/client/src/App.tsx":"4","/home/olfa/Documents/pfe-main/client/src/redux/reducers.ts":"5","/home/olfa/Documents/pfe-main/client/src/redux/sagas.ts":"6","/home/olfa/Documents/pfe-main/client/src/redux/actions.ts":"7","/home/olfa/Documents/pfe-main/client/src/helpers/fakeBackend.ts":"8","/home/olfa/Documents/pfe-main/client/src/redux/layout/reducer.ts":"9","/home/olfa/Documents/pfe-main/client/src/redux/layout/saga.ts":"10","/home/olfa/Documents/pfe-main/client/src/redux/layout/actions.ts":"11","/home/olfa/Documents/pfe-main/client/src/redux/profile/reducer.ts":"12","/home/olfa/Documents/pfe-main/client/src/redux/profile/actions.ts":"13","/home/olfa/Documents/pfe-main/client/src/redux/profile/saga.ts":"14","/home/olfa/Documents/pfe-main/client/src/redux/contacts/saga.ts":"15","/home/olfa/Documents/pfe-main/client/src/redux/contacts/actions.ts":"16","/home/olfa/Documents/pfe-main/client/src/redux/contacts/reducer.ts":"17","/home/olfa/Documents/pfe-main/client/src/redux/calls/reducer.ts":"18","/home/olfa/Documents/pfe-main/client/src/redux/calls/actions.ts":"19","/home/olfa/Documents/pfe-main/client/src/redux/calls/saga.ts":"20","/home/olfa/Documents/pfe-main/client/src/redux/bookmarks/reducer.ts":"21","/home/olfa/Documents/pfe-main/client/src/redux/bookmarks/actions.ts":"22","/home/olfa/Documents/pfe-main/client/src/redux/bookmarks/saga.ts":"23","/home/olfa/Documents/pfe-main/client/src/redux/settings/reducer.ts":"24","/home/olfa/Documents/pfe-main/client/src/redux/settings/saga.ts":"25","/home/olfa/Documents/pfe-main/client/src/redux/settings/actions.ts":"26","/home/olfa/Documents/pfe-main/client/src/redux/chats/reducer.ts":"27","/home/olfa/Documents/pfe-main/client/src/redux/chats/saga.ts":"28","/home/olfa/Documents/pfe-main/client/src/redux/chats/actions.ts":"29","/home/olfa/Documents/pfe-main/client/src/redux/auth/forgetpwd/reducer.ts":"30","/home/olfa/Documents/pfe-main/client/src/redux/auth/forgetpwd/saga.ts":"31","/home/olfa/Documents/pfe-main/client/src/redux/auth/register/actions.ts":"32","/home/olfa/Documents/pfe-main/client/src/redux/auth/register/saga.ts":"33","/home/olfa/Documents/pfe-main/client/src/redux/auth/forgetpwd/actions.ts":"34","/home/olfa/Documents/pfe-main/client/src/redux/auth/register/reducer.ts":"35","/home/olfa/Documents/pfe-main/client/src/redux/auth/login/reducer.ts":"36","/home/olfa/Documents/pfe-main/client/src/redux/auth/login/saga.ts":"37","/home/olfa/Documents/pfe-main/client/src/redux/auth/login/actions.ts":"38","/home/olfa/Documents/pfe-main/client/src/api/urls.ts":"39","/home/olfa/Documents/pfe-main/client/src/data/settings.ts":"40","/home/olfa/Documents/pfe-main/client/src/routes/index.tsx":"41","/home/olfa/Documents/pfe-main/client/src/data/index.tsx":"42","/home/olfa/Documents/pfe-main/client/src/helpers/firebase_helper.js":"43","/home/olfa/Documents/pfe-main/client/src/redux/profile/types.ts":"44","/home/olfa/Documents/pfe-main/client/src/api/index.ts":"45","/home/olfa/Documents/pfe-main/client/src/redux/layout/types.ts":"46","/home/olfa/Documents/pfe-main/client/src/redux/calls/types.ts":"47","/home/olfa/Documents/pfe-main/client/src/helpers/notifications.ts":"48","/home/olfa/Documents/pfe-main/client/src/redux/contacts/types.ts":"49","/home/olfa/Documents/pfe-main/client/src/redux/bookmarks/types.ts":"50","/home/olfa/Documents/pfe-main/client/src/redux/chats/types.ts":"51","/home/olfa/Documents/pfe-main/client/src/redux/settings/types.ts":"52","/home/olfa/Documents/pfe-main/client/src/redux/auth/forgetpwd/types.ts":"53","/home/olfa/Documents/pfe-main/client/src/redux/auth/login/types.ts":"54","/home/olfa/Documents/pfe-main/client/src/redux/auth/register/types.ts":"55","/home/olfa/Documents/pfe-main/client/src/constants/index.ts":"56","/home/olfa/Documents/pfe-main/client/src/routes/allRoutes.ts":"57","/home/olfa/Documents/pfe-main/client/src/data/contacts.ts":"58","/home/olfa/Documents/pfe-main/client/src/data/myProfile.ts":"59","/home/olfa/Documents/pfe-main/client/src/data/chat.ts":"60","/home/olfa/Documents/pfe-main/client/src/data/bookmarks.ts":"61","/home/olfa/Documents/pfe-main/client/src/data/channels.ts":"62","/home/olfa/Documents/pfe-main/client/src/data/messages.ts":"63","/home/olfa/Documents/pfe-main/client/src/data/calls.ts":"64","/home/olfa/Documents/pfe-main/client/src/routes/AuthProtected.tsx":"65","/home/olfa/Documents/pfe-main/client/src/layouts/NonAuth/index.tsx":"66","/home/olfa/Documents/pfe-main/client/src/api/chats.ts":"67","/home/olfa/Documents/pfe-main/client/src/api/bookmarks.ts":"68","/home/olfa/Documents/pfe-main/client/src/api/calls.ts":"69","/home/olfa/Documents/pfe-main/client/src/api/contacts.ts":"70","/home/olfa/Documents/pfe-main/client/src/api/auth.ts":"71","/home/olfa/Documents/pfe-main/client/src/api/profile.ts":"72","/home/olfa/Documents/pfe-main/client/src/constants/settings.ts":"73","/home/olfa/Documents/pfe-main/client/src/hooks/index.ts":"74","/home/olfa/Documents/pfe-main/client/src/constants/layout.ts":"75","/home/olfa/Documents/pfe-main/client/src/pages/meet/Room.tsx":"76","/home/olfa/Documents/pfe-main/client/src/layouts/Default/index.tsx":"77","/home/olfa/Documents/pfe-main/client/src/pages/StarterPage/index.tsx":"78","/home/olfa/Documents/pfe-main/client/src/pages/Authentication/Logout.tsx":"79","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/index.tsx":"80","/home/olfa/Documents/pfe-main/client/src/pages/Authentication/ChangePassword.tsx":"81","/home/olfa/Documents/pfe-main/client/src/pages/Authentication/RecoverPassword.tsx":"82","/home/olfa/Documents/pfe-main/client/src/pages/Authentication/LockScreen.tsx":"83","/home/olfa/Documents/pfe-main/client/src/pages/Authentication/Register.tsx":"84","/home/olfa/Documents/pfe-main/client/src/pages/Authentication/Login.tsx":"85","/home/olfa/Documents/pfe-main/client/src/pages/Root/index.tsx":"86","/home/olfa/Documents/pfe-main/client/src/api/apiCore.ts":"87","/home/olfa/Documents/pfe-main/client/src/hooks/WindowHooks.ts":"88","/home/olfa/Documents/pfe-main/client/src/hooks/useRedux.ts":"89","/home/olfa/Documents/pfe-main/client/src/hooks/UserHooks.ts":"90","/home/olfa/Documents/pfe-main/client/src/layouts/Default/SideMenu.tsx":"91","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Leftbar.tsx":"92","/home/olfa/Documents/pfe-main/client/src/components/AuthHeader.tsx":"93","/home/olfa/Documents/pfe-main/client/src/components/Loader.tsx":"94","/home/olfa/Documents/pfe-main/client/src/components/FormInput.tsx":"95","/home/olfa/Documents/pfe-main/client/src/components/NonAutnLayoutWrapper.tsx":"96","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/ConversationUser/Welcome.tsx":"97","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/ConversationUser/index.tsx":"98","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/UserProfileDetails/index.tsx":"99","/home/olfa/Documents/pfe-main/client/src/config.ts":"100","/home/olfa/Documents/pfe-main/client/src/layouts/Default/menu.ts":"101","/home/olfa/Documents/pfe-main/client/src/components/LightDarkMode.tsx":"102","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Profile/index.tsx":"103","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Chats/index.tsx":"104","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Calls/index.tsx":"105","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Contacts/index.tsx":"106","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/ConversationUser/Conversation.tsx":"107","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Settings/index.tsx":"108","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Bookmark/index.tsx":"109","/home/olfa/Documents/pfe-main/client/src/components/AudioCallModal.tsx":"110","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/ConversationUser/UserHead.tsx":"111","/home/olfa/Documents/pfe-main/client/src/components/AppSimpleBar.tsx":"112","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/UserProfileDetails/ProfileUser.tsx":"113","/home/olfa/Documents/pfe-main/client/src/components/Media.tsx":"114","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/UserProfileDetails/BasicDetails.tsx":"115","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/UserProfileDetails/Status.tsx":"116","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/UserProfileDetails/Groups.tsx":"117","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/UserProfileDetails/Actions.tsx":"118","/home/olfa/Documents/pfe-main/client/src/components/AttachedFiles.tsx":"119","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/UserProfileDetails/Members.tsx":"120","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/ConversationUser/ChatInputSection/index.tsx":"121","/home/olfa/Documents/pfe-main/client/src/components/VideoCallModal.jsx":"122","/home/olfa/Documents/pfe-main/client/src/utils/index.ts":"123","/home/olfa/Documents/pfe-main/client/src/components/ForwardModal.tsx":"124","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Bookmark/BookMark.tsx":"125","/home/olfa/Documents/pfe-main/client/src/components/AddPinnedTabModal.tsx":"126","/home/olfa/Documents/pfe-main/client/src/components/LeftbarTitle.tsx":"127","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Settings/Security.tsx":"128","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Settings/Help.tsx":"129","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Profile/SectionTitle.tsx":"130","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Settings/Privacy.tsx":"131","/home/olfa/Documents/pfe-main/client/src/context/SocketContext.js":"132","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Settings/ThemeSettings.tsx":"133","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Settings/UserProfile.tsx":"134","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Settings/PersonalInfo.tsx":"135","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Settings/UserCoverImage.tsx":"136","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Contacts/Contact.tsx":"137","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Contacts/ListHeader.tsx":"138","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/ConversationUser/Message.tsx":"139","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/ConversationUser/ChatInputSection/Reply.tsx":"140","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/ConversationUser/ChatInputSection/MoreMenu.tsx":"141","/home/olfa/Documents/pfe-main/client/src/utils/dateutils.ts":"142","/home/olfa/Documents/pfe-main/client/src/utils/arrayutils.ts":"143","/home/olfa/Documents/pfe-main/client/src/utils/DOMutils.ts":"144","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/ConversationUser/ChatInputSection/InputSection.tsx":"145","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/ConversationUser/ChatInputSection/EndButtons.tsx":"146","/home/olfa/Documents/pfe-main/client/src/components/EmptyStateResult.tsx":"147","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/ConversationUser/ChatInputSection/StartButtons.tsx":"148","/home/olfa/Documents/pfe-main/client/src/components/InviteContactModal.tsx":"149","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Calls/Call.tsx":"150","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Chats/DirectMessages.tsx":"151","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Chats/Chanels.tsx":"152","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Chats/Archive.tsx":"153","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Chats/Favourites.tsx":"154","/home/olfa/Documents/pfe-main/client/src/components/AddButton.tsx":"155","/home/olfa/Documents/pfe-main/client/src/components/ContactModal.tsx":"156","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Profile/UserDescription.tsx":"157","/home/olfa/Documents/pfe-main/client/src/components/AddGroupModal.tsx":"158","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Profile/MyProfile.tsx":"159","/home/olfa/Documents/pfe-main/client/src/components/UpdateDeleteBookmark.tsx":"160","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Settings/DisplaySelect.tsx":"161","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Settings/ThemeImage.tsx":"162","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Settings/ThemeColor.tsx":"163","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/ConversationUser/RepliedMessage.tsx":"164","/home/olfa/Documents/pfe-main/client/src/components/LightBox.tsx":"165","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Chats/ChatUser.tsx":"166","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Chats/ChatChannel.tsx":"167"},{"size":672,"mtime":1708205246000,"results":"168","hashOfConfig":"169"},{"size":425,"mtime":1708205246000,"results":"170","hashOfConfig":"169"},{"size":869,"mtime":1708205246000,"results":"171","hashOfConfig":"169"},{"size":1633,"mtime":1708205246000,"results":"172","hashOfConfig":"169"},{"size":625,"mtime":1708205246000,"results":"173","hashOfConfig":"169"},{"size":746,"mtime":1708205246000,"results":"174","hashOfConfig":"169"},{"size":454,"mtime":1708205246000,"results":"175","hashOfConfig":"169"},{"size":30344,"mtime":1708205246000,"results":"176","hashOfConfig":"169"},{"size":639,"mtime":1708205246000,"results":"177","hashOfConfig":"169"},{"size":1112,"mtime":1708205246000,"results":"178","hashOfConfig":"169"},{"size":293,"mtime":1708205246000,"results":"179","hashOfConfig":"169"},{"size":1167,"mtime":1708205246000,"results":"180","hashOfConfig":"169"},{"size":507,"mtime":1708205246000,"results":"181","hashOfConfig":"169"},{"size":893,"mtime":1708205246000,"results":"182","hashOfConfig":"169"},{"size":1651,"mtime":1708205246000,"results":"183","hashOfConfig":"169"},{"size":794,"mtime":1708205246000,"results":"184","hashOfConfig":"169"},{"size":1789,"mtime":1708205246000,"results":"185","hashOfConfig":"169"},{"size":1087,"mtime":1708205246000,"results":"186","hashOfConfig":"169"},{"size":476,"mtime":1708205246000,"results":"187","hashOfConfig":"169"},{"size":732,"mtime":1708205246000,"results":"188","hashOfConfig":"169"},{"size":2387,"mtime":1708205246000,"results":"189","hashOfConfig":"169"},{"size":910,"mtime":1708205246000,"results":"190","hashOfConfig":"169"},{"size":2332,"mtime":1708205246000,"results":"191","hashOfConfig":"169"},{"size":1622,"mtime":1708205246000,"results":"192","hashOfConfig":"169"},{"size":1465,"mtime":1708205246000,"results":"193","hashOfConfig":"169"},{"size":659,"mtime":1708205246000,"results":"194","hashOfConfig":"169"},{"size":10222,"mtime":1708205246000,"results":"195","hashOfConfig":"169"},{"size":12759,"mtime":1708205246000,"results":"196","hashOfConfig":"169"},{"size":3555,"mtime":1708205246000,"results":"197","hashOfConfig":"169"},{"size":1886,"mtime":1708205246000,"results":"198","hashOfConfig":"169"},{"size":2638,"mtime":1708205246000,"results":"199","hashOfConfig":"169"},{"size":587,"mtime":1708205246000,"results":"200","hashOfConfig":"169"},{"size":2067,"mtime":1708205246000,"results":"201","hashOfConfig":"169"},{"size":759,"mtime":1708205246000,"results":"202","hashOfConfig":"169"},{"size":1282,"mtime":1708205246000,"results":"203","hashOfConfig":"169"},{"size":2250,"mtime":1708205246000,"results":"204","hashOfConfig":"169"},{"size":3053,"mtime":1708205246000,"results":"205","hashOfConfig":"169"},{"size":916,"mtime":1708205246000,"results":"206","hashOfConfig":"169"},{"size":2192,"mtime":1708205246000,"results":"207","hashOfConfig":"169"},{"size":1711,"mtime":1708205246000,"results":"208","hashOfConfig":"169"},{"size":1280,"mtime":1708205246000,"results":"209","hashOfConfig":"169"},{"size":191,"mtime":1708205246000,"results":"210","hashOfConfig":"169"},{"size":5092,"mtime":1708205246000,"results":"211","hashOfConfig":"169"},{"size":267,"mtime":1708205246000,"results":"212","hashOfConfig":"169"},{"size":158,"mtime":1708205246000,"results":"213","hashOfConfig":"169"},{"size":419,"mtime":1708205246000,"results":"214","hashOfConfig":"169"},{"size":232,"mtime":1708205246000,"results":"215","hashOfConfig":"169"},{"size":262,"mtime":1708205246000,"results":"216","hashOfConfig":"169"},{"size":352,"mtime":1708205246000,"results":"217","hashOfConfig":"169"},{"size":417,"mtime":1708205246000,"results":"218","hashOfConfig":"169"},{"size":1649,"mtime":1708205246000,"results":"219","hashOfConfig":"169"},{"size":322,"mtime":1708205246000,"results":"220","hashOfConfig":"169"},{"size":373,"mtime":1708205246000,"results":"221","hashOfConfig":"169"},{"size":419,"mtime":1708205246000,"results":"222","hashOfConfig":"169"},{"size":346,"mtime":1708205246000,"results":"223","hashOfConfig":"169"},{"size":54,"mtime":1708205246000,"results":"224","hashOfConfig":"169"},{"size":1303,"mtime":1708205246000,"results":"225","hashOfConfig":"169"},{"size":30939,"mtime":1708205246000,"results":"226","hashOfConfig":"169"},{"size":2701,"mtime":1708205246000,"results":"227","hashOfConfig":"169"},{"size":3141,"mtime":1708205246000,"results":"228","hashOfConfig":"169"},{"size":1522,"mtime":1708205246000,"results":"229","hashOfConfig":"169"},{"size":1896,"mtime":1708205246000,"results":"230","hashOfConfig":"169"},{"size":6409,"mtime":1708205246000,"results":"231","hashOfConfig":"169"},{"size":23392,"mtime":1708205246000,"results":"232","hashOfConfig":"169"},{"size":874,"mtime":1708205246000,"results":"233","hashOfConfig":"169"},{"size":173,"mtime":1708205246000,"results":"234","hashOfConfig":"169"},{"size":3046,"mtime":1708205246000,"results":"235","hashOfConfig":"169"},{"size":469,"mtime":1708205246000,"results":"236","hashOfConfig":"169"},{"size":189,"mtime":1708205246000,"results":"237","hashOfConfig":"169"},{"size":333,"mtime":1708205246000,"results":"238","hashOfConfig":"169"},{"size":1187,"mtime":1708205246000,"results":"239","hashOfConfig":"169"},{"size":498,"mtime":1708205246000,"results":"240","hashOfConfig":"169"},{"size":639,"mtime":1708205246000,"results":"241","hashOfConfig":"169"},{"size":88,"mtime":1708205246000,"results":"242","hashOfConfig":"169"},{"size":323,"mtime":1708205246000,"results":"243","hashOfConfig":"169"},{"size":1596,"mtime":1708452843853,"results":"244","hashOfConfig":"169"},{"size":813,"mtime":1708205246000,"results":"245","hashOfConfig":"169"},{"size":139,"mtime":1708205246000,"results":"246","hashOfConfig":"169"},{"size":1665,"mtime":1708205246000,"results":"247","hashOfConfig":"169"},{"size":1372,"mtime":1708205246000,"results":"248","hashOfConfig":"169"},{"size":5221,"mtime":1708205246000,"results":"249","hashOfConfig":"169"},{"size":3898,"mtime":1708205246000,"results":"250","hashOfConfig":"169"},{"size":3120,"mtime":1708205246000,"results":"251","hashOfConfig":"169"},{"size":7907,"mtime":1708205246000,"results":"252","hashOfConfig":"169"},{"size":8854,"mtime":1708205246000,"results":"253","hashOfConfig":"169"},{"size":203,"mtime":1708205246000,"results":"254","hashOfConfig":"169"},{"size":2619,"mtime":1708205246000,"results":"255","hashOfConfig":"169"},{"size":531,"mtime":1708205246000,"results":"256","hashOfConfig":"169"},{"size":356,"mtime":1708205246000,"results":"257","hashOfConfig":"169"},{"size":2178,"mtime":1708205246000,"results":"258","hashOfConfig":"169"},{"size":6170,"mtime":1708205246000,"results":"259","hashOfConfig":"169"},{"size":2027,"mtime":1708205246000,"results":"260","hashOfConfig":"169"},{"size":340,"mtime":1708205246000,"results":"261","hashOfConfig":"169"},{"size":262,"mtime":1708205246000,"results":"262","hashOfConfig":"169"},{"size":5854,"mtime":1708205246000,"results":"263","hashOfConfig":"169"},{"size":2041,"mtime":1708205246000,"results":"264","hashOfConfig":"169"},{"size":1086,"mtime":1708205246000,"results":"265","hashOfConfig":"169"},{"size":5827,"mtime":1708205246000,"results":"266","hashOfConfig":"169"},{"size":4583,"mtime":1708205246000,"results":"267","hashOfConfig":"169"},{"size":782,"mtime":1708205246000,"results":"268","hashOfConfig":"169"},{"size":1194,"mtime":1708205246000,"results":"269","hashOfConfig":"169"},{"size":942,"mtime":1708205246000,"results":"270","hashOfConfig":"169"},{"size":1561,"mtime":1708205246000,"results":"271","hashOfConfig":"169"},{"size":9005,"mtime":1708205246000,"results":"272","hashOfConfig":"169"},{"size":1472,"mtime":1708205246000,"results":"273","hashOfConfig":"169"},{"size":3910,"mtime":1708205246000,"results":"274","hashOfConfig":"169"},{"size":4615,"mtime":1708205246000,"results":"275","hashOfConfig":"169"},{"size":5787,"mtime":1708205246000,"results":"276","hashOfConfig":"169"},{"size":2233,"mtime":1708205246000,"results":"277","hashOfConfig":"169"},{"size":3436,"mtime":1708205246000,"results":"278","hashOfConfig":"169"},{"size":12755,"mtime":1708205246000,"results":"279","hashOfConfig":"169"},{"size":483,"mtime":1708205246000,"results":"280","hashOfConfig":"169"},{"size":5537,"mtime":1708205246000,"results":"281","hashOfConfig":"169"},{"size":1979,"mtime":1708205246000,"results":"282","hashOfConfig":"169"},{"size":1322,"mtime":1708205246000,"results":"283","hashOfConfig":"169"},{"size":324,"mtime":1708205246000,"results":"284","hashOfConfig":"169"},{"size":1952,"mtime":1708205246000,"results":"285","hashOfConfig":"169"},{"size":4890,"mtime":1708205246000,"results":"286","hashOfConfig":"169"},{"size":3620,"mtime":1708205246000,"results":"287","hashOfConfig":"169"},{"size":3249,"mtime":1708205246000,"results":"288","hashOfConfig":"169"},{"size":4277,"mtime":1708205246000,"results":"289","hashOfConfig":"169"},{"size":3096,"mtime":1708205246000,"results":"290","hashOfConfig":"169"},{"size":87,"mtime":1708205246000,"results":"291","hashOfConfig":"169"},{"size":9046,"mtime":1708205246000,"results":"292","hashOfConfig":"169"},{"size":3685,"mtime":1708205246000,"results":"293","hashOfConfig":"169"},{"size":3941,"mtime":1708205246000,"results":"294","hashOfConfig":"169"},{"size":385,"mtime":1708205246000,"results":"295","hashOfConfig":"169"},{"size":1750,"mtime":1708205246000,"results":"296","hashOfConfig":"169"},{"size":936,"mtime":1708205246000,"results":"297","hashOfConfig":"169"},{"size":316,"mtime":1708205246000,"results":"298","hashOfConfig":"169"},{"size":4281,"mtime":1708205246000,"results":"299","hashOfConfig":"169"},{"size":2536,"mtime":1708205246000,"results":"300","hashOfConfig":"169"},{"size":593,"mtime":1708205246000,"results":"301","hashOfConfig":"169"},{"size":3933,"mtime":1708205246000,"results":"302","hashOfConfig":"169"},{"size":1291,"mtime":1708205246000,"results":"303","hashOfConfig":"169"},{"size":2419,"mtime":1708205246000,"results":"304","hashOfConfig":"169"},{"size":3752,"mtime":1708205246000,"results":"305","hashOfConfig":"169"},{"size":1743,"mtime":1708205246000,"results":"306","hashOfConfig":"169"},{"size":13627,"mtime":1708205246000,"results":"307","hashOfConfig":"169"},{"size":2440,"mtime":1708205246000,"results":"308","hashOfConfig":"169"},{"size":7419,"mtime":1708205246000,"results":"309","hashOfConfig":"169"},{"size":284,"mtime":1708205246000,"results":"310","hashOfConfig":"169"},{"size":1760,"mtime":1708205246000,"results":"311","hashOfConfig":"169"},{"size":599,"mtime":1708205246000,"results":"312","hashOfConfig":"169"},{"size":627,"mtime":1708205246000,"results":"313","hashOfConfig":"169"},{"size":1401,"mtime":1708205246000,"results":"314","hashOfConfig":"169"},{"size":386,"mtime":1708205246000,"results":"315","hashOfConfig":"169"},{"size":1948,"mtime":1708205246000,"results":"316","hashOfConfig":"169"},{"size":3570,"mtime":1708205246000,"results":"317","hashOfConfig":"169"},{"size":5885,"mtime":1708205246000,"results":"318","hashOfConfig":"169"},{"size":1635,"mtime":1708205246000,"results":"319","hashOfConfig":"169"},{"size":1638,"mtime":1708205246000,"results":"320","hashOfConfig":"169"},{"size":1266,"mtime":1708205246000,"results":"321","hashOfConfig":"169"},{"size":910,"mtime":1708205246000,"results":"322","hashOfConfig":"169"},{"size":338,"mtime":1708205246000,"results":"323","hashOfConfig":"169"},{"size":6281,"mtime":1708205246000,"results":"324","hashOfConfig":"169"},{"size":1746,"mtime":1708205246000,"results":"325","hashOfConfig":"169"},{"size":7344,"mtime":1708205246000,"results":"326","hashOfConfig":"169"},{"size":3460,"mtime":1708205246000,"results":"327","hashOfConfig":"169"},{"size":2279,"mtime":1708205246000,"results":"328","hashOfConfig":"169"},{"size":1062,"mtime":1708205246000,"results":"329","hashOfConfig":"169"},{"size":3486,"mtime":1708205246000,"results":"330","hashOfConfig":"169"},{"size":3442,"mtime":1708205246000,"results":"331","hashOfConfig":"169"},{"size":1526,"mtime":1708205246000,"results":"332","hashOfConfig":"169"},{"size":1200,"mtime":1708205246000,"results":"333","hashOfConfig":"169"},{"size":2737,"mtime":1708205246000,"results":"334","hashOfConfig":"169"},{"size":1487,"mtime":1708205246000,"results":"335","hashOfConfig":"169"},{"filePath":"336","messages":"337","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},"2ogtly",{"filePath":"339","messages":"340","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"341","messages":"342","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"343","messages":"344","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"345","messages":"346","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"347","messages":"348","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"349","messages":"350","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"351","messages":"352","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"338"},{"filePath":"354","messages":"355","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"356","messages":"357","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"358","messages":"359","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"360","messages":"361","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"362","messages":"363","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"364","messages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"366","messages":"367","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"368","messages":"369","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"370","messages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"372","messages":"373","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"374","messages":"375","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"376","messages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"378","messages":"379","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"380","messages":"381","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"382","messages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"384","messages":"385","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"386","messages":"387","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"388","messages":"389","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"390","messages":"391","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"392","usedDeprecatedRules":"338"},{"filePath":"393","messages":"394","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"395","messages":"396","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"397","messages":"398","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"399","messages":"400","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"401","messages":"402","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"403","messages":"404","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"405","usedDeprecatedRules":"338"},{"filePath":"406","messages":"407","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"408","messages":"409","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"410","messages":"411","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"412","messages":"413","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"414","usedDeprecatedRules":"338"},{"filePath":"415","messages":"416","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"417","messages":"418","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"419","messages":"420","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"421","messages":"422","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"423","messages":"424","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"425","messages":"426","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"427"},{"filePath":"428","messages":"429","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"430","messages":"431","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"432","messages":"433","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"434","messages":"435","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"436","messages":"437","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"438","messages":"439","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"440","messages":"441","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"442","messages":"443","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"444","messages":"445","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"446","messages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"448","messages":"449","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"450","messages":"451","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"452","messages":"453","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"454","messages":"455","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"456","messages":"457","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"458","messages":"459","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"460","usedDeprecatedRules":"338"},{"filePath":"461","messages":"462","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"463","messages":"464","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"465","messages":"466","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"467","messages":"468","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"469","messages":"470","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"471","messages":"472","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"473","messages":"474","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"475","messages":"476","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"477","messages":"478","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"479","messages":"480","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"481","messages":"482","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"483","messages":"484","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"485","messages":"486","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"487","messages":"488","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"489","messages":"490","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"491","messages":"492","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"493","messages":"494","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"495","messages":"496","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"497","messages":"498","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"499","messages":"500","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"501","messages":"502","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"503","messages":"504","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"505","usedDeprecatedRules":"338"},{"filePath":"506","messages":"507","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"508","messages":"509","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"510","messages":"511","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"512","messages":"513","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"514","usedDeprecatedRules":"338"},{"filePath":"515","messages":"516","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"517","messages":"518","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"519","messages":"520","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"521","messages":"522","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"523","messages":"524","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"525","messages":"526","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"527","messages":"528","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"529","messages":"530","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"531","messages":"532","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"533","messages":"534","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"535","messages":"536","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"537","messages":"538","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"539","messages":"540","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"541","usedDeprecatedRules":"338"},{"filePath":"542","messages":"543","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"544","messages":"545","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"546","messages":"547","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"548","messages":"549","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"550","messages":"551","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"552","messages":"553","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"554","messages":"555","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"556","messages":"557","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"558","usedDeprecatedRules":"338"},{"filePath":"559","messages":"560","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"561","usedDeprecatedRules":"338"},{"filePath":"562","messages":"563","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"564","messages":"565","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"566","messages":"567","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"568","messages":"569","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"570","usedDeprecatedRules":"338"},{"filePath":"571","messages":"572","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"573","messages":"574","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"575","messages":"576","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"577","messages":"578","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"579","messages":"580","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"581","messages":"582","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"583","messages":"584","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"585","messages":"586","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"587","messages":"588","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"589","messages":"590","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"591","usedDeprecatedRules":"338"},{"filePath":"592","messages":"593","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"594","usedDeprecatedRules":"427"},{"filePath":"595","messages":"596","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"597","messages":"598","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"599","messages":"600","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"601","messages":"602","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"603","messages":"604","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"605","messages":"606","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"607","messages":"608","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"609","messages":"610","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"611","messages":"612","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"613","messages":"614","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"615","usedDeprecatedRules":"427"},{"filePath":"616","messages":"617","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"618","messages":"619","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"620","messages":"621","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"622","messages":"623","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"624","messages":"625","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"626","messages":"627","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"628","messages":"629","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"630","usedDeprecatedRules":"338"},{"filePath":"631","messages":"632","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"633","messages":"634","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"635","messages":"636","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"637","messages":"638","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"639","messages":"640","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"641","messages":"642","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"643","messages":"644","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"645","messages":"646","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"647","messages":"648","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"649","messages":"650","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"651","messages":"652","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"653","messages":"654","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"655","messages":"656","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"657","messages":"658","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"659","messages":"660","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"661","messages":"662","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"663","messages":"664","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"665","messages":"666","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"667","messages":"668","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"669","messages":"670","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"671","messages":"672","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"673","messages":"674","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"675","messages":"676","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"677","messages":"678","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"679","messages":"680","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"681","messages":"682","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},{"filePath":"683","messages":"684","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"685","usedDeprecatedRules":"338"},{"filePath":"686","messages":"687","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"338"},"/home/olfa/Documents/pfe-main/client/src/index.tsx",[],["688","689"],"/home/olfa/Documents/pfe-main/client/src/reportWebVitals.ts",[],"/home/olfa/Documents/pfe-main/client/src/redux/store.ts",[],"/home/olfa/Documents/pfe-main/client/src/App.tsx",[],"/home/olfa/Documents/pfe-main/client/src/redux/reducers.ts",[],"/home/olfa/Documents/pfe-main/client/src/redux/sagas.ts",[],"/home/olfa/Documents/pfe-main/client/src/redux/actions.ts",[],"/home/olfa/Documents/pfe-main/client/src/helpers/fakeBackend.ts",["690","691"],"import axios from \"axios\";\nimport MockAdapter from \"axios-mock-adapter\";\nimport * as url from \"../api/urls\";\n\n// dummy data\nimport {\n  // profile\n  profileDetails,\n  myData,\n\n  //contacts\n  contacts,\n  onChangeContacts,\n\n  // calls\n  calls,\n\n  // channels\n  userChannels,\n  onChangeUserChannels,\n\n  // bookmarks\n  bookmarks,\n  onChangeBookmark,\n\n  // chats\n  favourites,\n  onChangeFavourite,\n  directMessages,\n  channels,\n  onChangeDirectMessages,\n  onChangeChannels,\n  conversations,\n  onChangeConversations,\n\n  // archive\n  archiveChats,\n  onChangeArchives,\n} from \"../data/index\";\nimport { settings, onChangeSettings } from \"../data/settings\";\n\nconst accessToken =\n  \"Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6ImFkbWluIiwiYWRtaW4iOnRydWUsImp0aSI6ImQ2MTEwYzAxLWMwYjUtNDUzNy1iNDZhLTI0NTk5Mjc2YjY1NiIsImlhdCI6MTU5MjU2MDk2MCwiZXhwIjoxNTkyNTY0NjE5fQ.QgFSQtFaK_Ktauadttq1Is7f9w0SUtKcL8xCmkAvGLw\";\n\nlet users = [myData];\n\nconst fakeBackend = () => {\n  // This sets the mock adapter on the default instance\n  const mock = new MockAdapter(axios, { onNoMatch: \"passthrough\" });\n\n  // mock.onPost(url.POST_FAKE_REGISTER).reply(config => {\n  //   const user = JSON.parse(config[\"data\"]);\n  //   users.push(user);\n  //   return new Promise((resolve, reject) => {\n  //     setTimeout(() => {\n  //       resolve([200, user]);\n  //     });\n  //   });\n  // });\n\n  mock.onPost(\"/post-fake-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const validUser = users.filter(\n      usr => usr.email === user.email && usr.password === user.password\n    );\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          setTimeout(() => {\n            resolve([200, validUser[0]]);\n          }, 1000);\n        } else {\n          reject([\n            \"Username and password are invalid. Please enter correct username and password\",\n          ]);\n        }\n      });\n    });\n  });\n\n  // mock.onPost(\"/fake-forget-pwd\").reply(config => {\n  //   // User needs to check that user is eXist or not and send mail for Reset New password\n\n  //   return new Promise((resolve, reject) => {\n  //     setTimeout(() => {\n  //       resolve([200, \"Check you mail and reset your password.\"]);\n  //     });\n  //   });\n  // });\n\n  mock.onPost(\"/post-jwt-register\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    users.push(user);\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, user]);\n      });\n    });\n  });\n\n  mock.onPost(\"/post-jwt-login\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n    const validUser = users.filter(\n      usr => usr.email === user.email && usr.password === user.password\n    );\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          // You have to generate AccessToken by jwt. but this is fakeBackend so, right now its dummy\n          const token = accessToken;\n\n          // JWT AccessToken\n          const tokenObj = { accessToken: token }; // Token Obj\n          const validUserObj = { ...validUser[0], ...tokenObj }; // validUser Obj\n\n          resolve([200, validUserObj]);\n        } else {\n          reject([\n            400,\n            \"Username and password are invalid. Please enter correct username and password\",\n          ]);\n        }\n      });\n    });\n  });\n\n  mock.onPost(\"/post-jwt-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n\n    const one = config.headers;\n\n    let finalToken = one.Authorization;\n\n    const validUser = users.filter(usr => usr.uid === user.idx);\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        // Verify Jwt token from header.Authorization\n        if (finalToken === accessToken) {\n          if (validUser[\"length\"] === 1) {\n            let objIndex;\n\n            //Find index of specific object using findIndex method.\n            objIndex = users.findIndex(obj => obj.uid === user.idx);\n\n            //Update object's name property.\n            users[objIndex].username = user.username;\n\n            // Assign a value to locastorage\n            localStorage.removeItem(\"authUser\");\n            localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]));\n\n            resolve([200, \"Profile Updated Successfully\"]);\n          } else {\n            reject([400, \"Something wrong for edit profile\"]);\n          }\n        } else {\n          reject([400, \"Invalid Token !!\"]);\n        }\n      });\n    });\n  });\n\n  mock.onPost(\"/post-fake-profile\").reply(config => {\n    const user = JSON.parse(config[\"data\"]);\n\n    const validUser = users.filter(usr => usr.uid === user.idx);\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (validUser[\"length\"] === 1) {\n          let objIndex;\n\n          //Find index of specific object using findIndex method.\n          objIndex = users.findIndex(obj => obj.uid === user.idx);\n\n          //Update object's name property.\n          users[objIndex].username = user.username;\n\n          // Assign a value to locastorage\n          localStorage.removeItem(\"authUser\");\n          localStorage.setItem(\"authUser\", JSON.stringify(users[objIndex]));\n\n          resolve([200, \"Profile Updated Successfully\"]);\n        } else {\n          reject([400, \"Something wrong for edit profile\"]);\n        }\n      });\n    });\n  });\n\n  // mock.onPost(\"/jwt-forget-pwd\").reply(config => {\n  //   // User needs to check that user is eXist or not and send mail for Reset New password\n\n  //   return new Promise((resolve, reject) => {\n  //     setTimeout(() => {\n  //       resolve([200, \"Check you mail and reset your password.\"]);\n  //     });\n  //   });\n  // });\n\n  // mock.onPut(url.USER_CHANGE_PASSWORD).reply(config => {\n  //   return new Promise((resolve, reject) => {\n  //     const user = JSON.parse(config[\"data\"]);\n  //     users[0].password = user.password;\n  //     if (user) {\n  //       resolve([200, users[0]]);\n  //     } else {\n  //       reject([\"Some thing went wrong!\"]);\n  //     }\n  //   });\n  // });\n\n  /*\n  profile\n  */\n  // mock.onGet(url.GET_PROFILE_DETAILS).reply(config => {\n  //   return new Promise((resolve, reject) => {\n  //     if (profileDetails) {\n  //       resolve([200, profileDetails]);\n  //     } else {\n  //       reject([\"Some thing went wrong!\"]);\n  //     }\n  //   });\n  // });\n\n  /*\n  contacts\n  */\n  // mock.onGet(url.GET_CONTACTS).reply(config => {\n  //   return new Promise((resolve, reject) => {\n  //     if (contacts) {\n  //       resolve([200, contacts]);\n  //     } else {\n  //       reject([\"Some thing went wrong!\"]);\n  //     }\n  //   });\n  // });\n\n  // mock.onPost(url.INVITE_CONTACT).reply(config => {\n  //   // const use r = JSON.parse(config[\"data\"]);\n\n  //   return new Promise((resolve, reject) => {\n  //     resolve([200, \"User is Invited\"]);\n  //   });\n  // });\n\n  /*\n  calls\n  */\n  mock.onGet(url.GET_CALLS_LIST).reply(config => {\n    return new Promise((resolve, reject) => {\n      if (calls) {\n        resolve([200, calls]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n\n  /*\n  bookmarks\n  */\n  mock.onGet(url.GET_BOOKMARKS_LIST).reply(config => {\n    return new Promise((resolve, reject) => {\n      if (bookmarks) {\n        resolve([200, bookmarks]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n\n  mock.onDelete(new RegExp(`${url.DELETE_BOOKMARK}/*`)).reply(config => {\n    const { params } = config;\n\n    return new Promise((resolve, reject) => {\n      if (params.id && bookmarks.length !== 0) {\n        const updatedB = bookmarks.filter(\n          (b: any) => b.id + \"\" !== params.id + \"\"\n        );\n        onChangeBookmark(updatedB);\n        resolve([200, \"Bookmark is Deleted!\"]);\n      } else {\n        reject([\"Your id is not found\"]);\n      }\n    });\n  });\n\n  mock.onPut(new RegExp(`${url.UPDATE_BOOKMARK}/*`)).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n    return new Promise((resolve, reject) => {\n      if (data.id && bookmarks.length !== 0) {\n        const bookmIdx = bookmarks.findIndex(\n          (b: any) => b.id + \"\" === data.id + \"\"\n        );\n\n        if (bookmIdx > -1) {\n          let updatedB = [...bookmarks];\n          updatedB[bookmIdx] = data;\n          onChangeBookmark(updatedB);\n        }\n        resolve([200, \"Bookmark is Updated!\"]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n\n  /*\n  settings\n  */\n  mock.onGet(url.GET_USER_SETTINGS).reply(config => {\n    return new Promise((resolve, reject) => {\n      if (settings) {\n        resolve([200, settings]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n\n  /*\n  chats\n  */\n  /*\n   settings\n   */\n  mock.onGet(url.GET_FAVOURITES).reply(config => {\n    return new Promise((resolve, reject) => {\n    \n      if (favourites) {\n        resolve([200, favourites]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n\n  // mock.onGet(url.GET_DIRECT_MESSAGES).reply(config => {\n  //   return new Promise((resolve, reject) => {\n  //     if (directMessages) {\n  //       resolve([200, directMessages]);\n  //     } else {\n  //       reject([\"Some thing went wrong!\"]);\n  //     }\n  //   });\n  // });\n\n  mock.onGet(url.GET_CHANNELS).reply(config => {\n    return new Promise((resolve, reject) => {\n      if (channels) {\n        resolve([200, channels]);\n      } else {\n        reject([\"Some thing went wrong!\"]);\n      }\n    });\n  });\n\n  // mock.onPost(url.ADD_CONTACTS).reply(config => {\n  //   const data = JSON.parse(config[\"data\"]);\n\n  //   return new Promise((resolve, reject) => {\n  //     if (data) {\n  //       let newC: Array<any> = [];\n  //       for (let index = 0; index < (data || []).length; index++) {\n  //         const contactId = data[index];\n  //         const contact = contacts.find((c: any) => c.id + \"\" === contactId);\n  //         if (contact) {\n  //           newC = [...newC, contact];\n  //         }\n  //       }\n  //       onChangeDirectMessages([...directMessages, ...newC]);\n  //       resolve([200, \"Contacts Added!\"]);\n  //     } else {\n  //       reject([\"Some thing went wrong!\"]);\n  //     }\n  //   });\n  // });\n\n  mock.onPost(url.CREATE_CHANNEL).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n    return new Promise((resolve, reject) => {\n      if (data) {\n        const newC = {\n          id:\n            channels[channels.length - 1].id + new Date().getTime().toString(),\n          name: data.name,\n          description: data.description,\n          members: data.members,\n        };\n        onChangeChannels([...channels, newC]);\n        resolve([200, \"Channel Created!\"]);\n      } else {\n        reject([400, \"Some thing went wrong!\"]);\n      }\n    });\n  });\n\n  // mock.onGet(new RegExp(`${url.GET_CHAT_USER_DETAILS}/*`)).reply(config => {\n  //   const { params } = config;\n  //   let data: any;\n  //   if (params.id && contacts.length !== 0) {\n  //     const chat = (contacts || []).find(\n  //       (c: any) => c.id + \"\" === params.id + \"\"\n  //     );\n  //     if (chat) {\n  //       data = chat;\n  //     }\n  //   }\n\n  //   return new Promise((resolve, reject) => {\n  //     if (data) {\n  //       setTimeout(() => {\n  //         resolve([200, data]);\n  //       });\n  //     } else {\n  //       reject([\"Your id is not found\"]);\n  //     }\n  //   });\n  // });\n\n  // mock\n  //   .onGet(new RegExp(`${url.GET_CHAT_USER_CONVERSATIONS}/*`))\n  //   .reply(config => {\n  //     const { params } = config;\n\n  //     let data: any;\n  //     if (params.id && conversations.length !== 0) {\n  //       const chat = (conversations || []).find(\n  //         (c: any) => c.userId + \"\" === params.id + \"\"\n  //       );\n  //       if (chat) {\n  //         data = chat;\n  //       }\n  //     }\n\n  //     return new Promise((resolve, reject) => {\n  //       if (data) {\n  //         setTimeout(() => {\n  //           resolve([200, data]);\n  //         }, 500);\n  //       } else {\n  //         setTimeout(() => {\n  //           reject([\"Your id is not found\"]);\n  //         }, 500);\n  //       }\n  //     });\n  //   });\n\n  // mock.onPost(url.SEND_MESSAGE).reply(config => {\n  //   const data = JSON.parse(config[\"data\"]);\n  //   if (data && data.meta && data.meta.receiver && data.meta.sender) {\n  //     let modifiedC = [...conversations];\n  //     const conversationIdx = (conversations || []).findIndex(\n  //       (c: any) => c.userId + \"\" === data.meta.receiver + \"\"\n  //     );\n  //     if (conversationIdx > -1) {\n  //       const mid =\n  //         conversations[conversationIdx].messages &&\n  //         conversations[conversationIdx].messages.length\n  //           ? conversations[conversationIdx].messages.length + 1\n  //           : 1;\n  //       let newM: any = {\n  //         mId: mid,\n  //         text: data.text && data.text,\n  //         time: data.time,\n  //         meta: {\n  //           ...data.meta,\n  //           sent: true,\n  //           received: false,\n  //           read: false,\n  //         },\n  //       };\n  //       if (data.image && data.image.length) {\n  //         newM[\"image\"] = data.image;\n  //       }\n  //       if (data.attachments && data.attachments.length) {\n  //         newM[\"attachments\"] = data.attachments;\n  //       }\n  //       if (data.replyOf) {\n  //         newM[\"replyOf\"] = data.replyOf;\n  //       }\n\n  //       conversations[conversationIdx].messages = [\n  //         ...conversations[conversationIdx].messages,\n  //         newM,\n  //       ];\n  //       modifiedC = [...conversations];\n  //     } else {\n  //       // new message first time\n  //       let newM: any = {\n  //         mId: 1,\n  //         text: data.text,\n  //         time: data.time,\n  //         meta: {\n  //           ...data.meta,\n  //           sent: true,\n  //           received: false,\n  //           read: false,\n  //         },\n  //       };\n  //       if (data.image && data.image.length) {\n  //         newM[\"image\"] = data.image;\n  //       }\n  //       if (data.attachments && data.attachments.length) {\n  //         newM[\"attachments\"] = data.attachments;\n  //       }\n  //       if (data.replyOf) {\n  //         newM[\"replyOf\"] = data.replyOf;\n  //       }\n  //       const newC = {\n  //         conversationId: conversations.length + 1,\n  //         userId: data.meta.receiver,\n  //         messages: [\n  //           {\n  //             ...newM,\n  //           },\n  //         ],\n  //       };\n  //       modifiedC = [...conversations, newC];\n  //     }\n  //     onChangeConversations(modifiedC);\n  //   }\n\n  //   return new Promise((resolve, reject) => {\n  //     if (data && data.meta && data.meta.receiver && data.meta.sender) {\n  //       resolve([200, \"Channel Created!\"]);\n  //     } else {\n  //       reject([400, \"Some thing went wrong!\"]);\n  //     }\n  //   });\n  // });\n\n  mock.onPut(new RegExp(`${url.RECEIVE_MESSAGE}/*`)).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n    let updatedUserC: any;\n    if (data.params && data.params.id && conversations.length !== 0) {\n      let modifiedC = [...conversations];\n      const conversationIdx = (modifiedC || []).findIndex(\n        (c: any) => c.userId + \"\" === data.params.id + \"\"\n      );\n      if (conversationIdx > -1) {\n        if (modifiedC[conversationIdx].messages) {\n          modifiedC[conversationIdx].messages = (\n            modifiedC[conversationIdx].messages || []\n          ).map((c: any) => {\n            return {\n              ...c,\n              meta: { ...c.meta, received: true },\n            };\n          });\n        }\n        updatedUserC = modifiedC[conversationIdx];\n        onChangeConversations(modifiedC);\n      }\n    }\n\n    return new Promise((resolve, reject) => {\n      if (updatedUserC) {\n        resolve([200, updatedUserC]);\n      } else {\n        setTimeout(() => {\n          reject([\"Your id is not found\"]);\n        }, 500);\n      }\n    });\n  });\n\n  mock.onPut(new RegExp(`${url.READ_MESSAGE}/*`)).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n    let updatedUserC: any;\n    if (data.params && data.params.id && conversations.length !== 0) {\n      let modifiedC = [...conversations];\n      const conversationIdx = (modifiedC || []).findIndex(\n        (c: any) => c.userId + \"\" === data.params.id + \"\"\n      );\n      if (conversationIdx > -1) {\n        if (modifiedC[conversationIdx].messages) {\n          modifiedC[conversationIdx].messages = (\n            modifiedC[conversationIdx].messages || []\n          ).map((c: any) => {\n            return {\n              ...c,\n              meta: { ...c.meta, read: true },\n            };\n          });\n        }\n        updatedUserC = modifiedC[conversationIdx];\n        onChangeConversations(modifiedC);\n      }\n    }\n\n    return new Promise((resolve, reject) => {\n      if (updatedUserC) {\n        resolve([200, updatedUserC]);\n      } else {\n        setTimeout(() => {\n          reject([\"Your id is not found\"]);\n        }, 500);\n      }\n    });\n  });\n\n  mock.onGet(new RegExp(`${url.RECEIVE_MESSAGE_FROM_USER}/*`)).reply(config => {\n    let updatedUserC: any;\n    const { params } = config;\n    if (params && params.id && conversations.length !== 0) {\n      let modifiedC = [...conversations];\n      const conversationIdx = (modifiedC || []).findIndex(\n        (c: any) => c.userId + \"\" === params.id + \"\"\n      );\n      if (conversationIdx > -1) {\n        if (modifiedC[conversationIdx].messages) {\n          const newM = {\n            ...modifiedC[conversationIdx].messages[\n              modifiedC[conversationIdx].messages.length - 1\n            ],\n          };\n\n          modifiedC[conversationIdx].messages.push({\n            ...newM,\n            mId: newM.mId + new Date().getTime(),\n            meta: {\n              ...newM.meta,\n              receiver: newM.meta.sender,\n              sender: newM.meta.receiver,\n            },\n          });\n        }\n        updatedUserC = modifiedC[conversationIdx];\n        onChangeConversations(modifiedC);\n      }\n    }\n\n    return new Promise((resolve, reject) => {\n      if (updatedUserC) {\n        resolve([200, updatedUserC]);\n      } else {\n        setTimeout(() => {\n          reject([\"Your id is not found\"]);\n        }, 500);\n      }\n    });\n  });\n\n  mock.onDelete(new RegExp(`${url.DELETE_MESSAGE}/*`)).reply(config => {\n    const { params } = config;\n\n    return new Promise((resolve, reject) => {\n      if (params.userId && params.messageId) {\n        let modifiedC = [...conversations];\n        const conversationIdx = (modifiedC || []).findIndex(\n          (c: any) => c.userId + \"\" === params.userId + \"\"\n        );\n        if (conversationIdx > -1) {\n          modifiedC[conversationIdx].messages = (\n            modifiedC[conversationIdx].messages || []\n          ).filter((m: any) => m.mId + \"\" !== params.messageId + \"\");\n        }\n        onChangeConversations(modifiedC);\n        resolve([200, \"Message is Deleted!\"]);\n      } else {\n        reject([\"Your id is not found\"]);\n      }\n    });\n  });\n\n  mock.onPost(url.FORWARD_MESSAGE).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n    let modifiedC = [...conversations];\n    if (data && data.contacts) {\n      for (let index = 0; index < data.contacts.length; index++) {\n        const c = data.contacts[index];\n        const conversationIdx = (modifiedC || []).findIndex(\n          (con: any) => con.userId + \"\" === c + \"\"\n        );\n\n        if (conversationIdx > -1) {\n          const mid =\n            modifiedC[conversationIdx].messages &&\n            modifiedC[conversationIdx].messages.length\n              ? modifiedC[conversationIdx].messages.length + 1\n              : 1;\n          let newM: any = {\n            mId: mid,\n            text: data.message && data.message,\n            time: new Date().toISOString(),\n            meta: {\n              receiver: c,\n              sender: users[0].uid,\n              sent: true,\n              received: false,\n              read: false,\n              isForwarded: true,\n            },\n          };\n          if (data.image && data.image.length) {\n            newM[\"image\"] = data.image;\n          }\n          if (data.attachments && data.attachments.length) {\n            newM[\"attachments\"] = data.attachments;\n          }\n          if (data.forwardedMessage) {\n            newM[\"replyOf\"] = data.forwardedMessage;\n          }\n\n          modifiedC[conversationIdx].messages = [\n            ...modifiedC[conversationIdx].messages,\n            newM,\n          ];\n          modifiedC = [...modifiedC];\n        } else {\n          // new message first time\n          let newM: any = {\n            mId: 1,\n            text: data.message && data.message,\n            time: new Date().toISOString(),\n            meta: {\n              receiver: \"614ecab4ac946a9bdafa4e3b\",\n              sender: users[0].uid,\n              sent: true,\n              received: false,\n              read: false,\n              isForwarded: true,\n            },\n          };\n          if (data.image && data.image.length) {\n            newM[\"image\"] = data.image;\n          }\n          if (data.attachments && data.attachments.length) {\n            newM[\"attachments\"] = data.attachments;\n          }\n          if (data.forwardedMessage) {\n            newM[\"replyOf\"] = data.forwardedMessage;\n          }\n          const newC = {\n            conversationId: modifiedC.length + 1,\n            userId: c,\n            messages: [\n              {\n                ...newM,\n              },\n            ],\n          };\n          modifiedC = [...modifiedC, newC];\n        }\n      }\n    }\n\n    onChangeConversations(modifiedC);\n    return new Promise((resolve, reject) => {\n      if (data) {\n        resolve([200, \"Message is Forwarded!\"]);\n      } else {\n        reject([\"Your id is not found\"]);\n      }\n    });\n  });\n\n  mock.onDelete(new RegExp(`${url.DELETE_USER_MESSAGES}/*`)).reply(config => {\n    const { params } = config;\n\n    return new Promise((resolve, reject) => {\n      if (params.userId) {\n        let modifiedC = [...conversations];\n        modifiedC = (modifiedC || []).filter(\n          (c: any) => c.userId + \"\" !== params.userId + \"\"\n        );\n        onChangeConversations(modifiedC);\n        resolve([200, \"Messages are Deleted!\"]);\n      } else {\n        reject([\"Your id is not found\"]);\n      }\n    });\n  });\n\n  mock.onGet(new RegExp(`${url.GET_CHANNEL_DETAILS}/*`)).reply(config => {\n    const { params } = config;\n    let data: any;\n    if (params.id && contacts.length !== 0) {\n      const chat = (userChannels || []).find(\n        (c: any) => c.id + \"\" === params.id + \"\"\n      );\n      if (chat) {\n        data = chat;\n      }\n    }\n\n    return new Promise((resolve, reject) => {\n      if (data) {\n        setTimeout(() => {\n          resolve([200, data]);\n        });\n      } else {\n        reject([\"The channel is not found\"]);\n      }\n    });\n  });\n\n  mock.onPut(new RegExp(`${url.TOGGLE_FAVOURITE_CONTACT}/*`)).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n\n    let message = \"User has been added to your favourite\";\n    let modifiedC = [...contacts];\n    let modifiedF = [...favourites];\n    let modifiedD = [...directMessages];\n    if (data.params.id && contacts.length !== 0) {\n      const contactIdx = (modifiedC || []).findIndex(\n        (c: any) => c.id + \"\" === data.params.id + \"\"\n      );\n      if (contactIdx > -1) {\n        if (contacts[contactIdx].isFavourite) {\n          contacts[contactIdx].isFavourite = false;\n          modifiedF = modifiedF.filter((f: any) => f.id !== data.params.id);\n          message = \"User has been removed to your favourite\";\n        } else {\n          contacts[contactIdx].isFavourite = true;\n          modifiedF = [...modifiedF, contacts[contactIdx]];\n          modifiedD = modifiedD.filter((c: any) => c.id !== data.params.id);\n        }\n      }\n    }\n    onChangeContacts(contacts);\n    onChangeFavourite(modifiedF);\n    onChangeDirectMessages(modifiedD);\n\n    return new Promise((resolve, reject) => {\n      if (data.params.id) {\n        setTimeout(() => {\n          resolve([200, message]);\n        });\n      } else {\n        reject([\"The channel is not found\"]);\n      }\n    });\n  });\n\n  mock.onGet(url.GET_ARCHIVE_CONTACT).reply(config => {\n    return new Promise((resolve, reject) => {\n      if (archiveChats) {\n        setTimeout(() => {\n          resolve([200, archiveChats]);\n        });\n      } else {\n        reject([\"The archive chat is not found\"]);\n      }\n    });\n  });\n\n  mock.onPut(new RegExp(`${url.TOGGLE_ARCHIVE_CONTACT}/*`)).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n\n    let message = \"User has been added to your archives\";\n    let modifiedC = [...contacts];\n    let modifiedA = [...archiveChats];\n    let modifiedD = [...directMessages];\n    let modifiedChannels = [...userChannels];\n    let modifiedChatChannels = [...channels];\n    if (data.params.id && contacts.length !== 0) {\n      const contactIdx = (modifiedC || []).findIndex(\n        (c: any) => c.id + \"\" === data.params.id + \"\"\n      );\n      const channelIdx = (modifiedChannels || []).findIndex(\n        (c: any) => c.id + \"\" === data.params.id + \"\"\n      );\n      if (contactIdx > -1) {\n        if (contacts[contactIdx].isArchived) {\n          contacts[contactIdx].isArchived = false;\n          modifiedA = modifiedA.filter((f: any) => f.id !== data.params.id);\n          message = \"User has been removed to your archives\";\n        } else {\n          contacts[contactIdx].isArchived = true;\n          modifiedA = [...modifiedA, contacts[contactIdx]];\n          modifiedD = modifiedD.filter((c: any) => c.id !== data.params.id);\n        }\n      } else if (channelIdx > -1) {\n        if (userChannels[channelIdx].isArchived) {\n          userChannels[channelIdx].isArchived = false;\n          modifiedA = modifiedA.filter((f: any) => f.id !== data.params.id);\n          message = \"User has been removed to your archives\";\n        } else {\n          userChannels[channelIdx].isArchived = true;\n          modifiedA = [\n            ...modifiedA,\n            { ...userChannels[channelIdx], isChannel: true },\n          ];\n          modifiedChannels = modifiedChannels.filter(\n            (c: any) => c.id !== data.params.id\n          );\n          modifiedChatChannels = modifiedChatChannels.filter(\n            (c: any) => c.id !== data.params.id\n          );\n        }\n      }\n    }\n    onChangeContacts(contacts);\n    onChangeArchives(modifiedA);\n    onChangeDirectMessages(modifiedD);\n    onChangeUserChannels(modifiedChannels);\n    onChangeChannels(modifiedChatChannels);\n\n    return new Promise((resolve, reject) => {\n      if (data.params.id) {\n        setTimeout(() => {\n          resolve([200, message]);\n        });\n      } else {\n        reject([\"Internal Error!\"]);\n      }\n    });\n  });\n\n  mock.onPut(new RegExp(`${url.READ_CONVERSATION}/*`)).reply(config => {\n    const data = JSON.parse(config[\"data\"]);\n    let modifiedD = [...directMessages];\n    let modifiedF = [...favourites];\n    let modifiedC = [...channels];\n    if (data.params && data.params.id && conversations.length !== 0) {\n      /*\n     for chat conversations\n     */\n\n      const contactIdx = (modifiedD || []).findIndex(\n        (c: any) => c.id + \"\" === data.params.id + \"\"\n      );\n      const contactFIdx = (modifiedF || []).findIndex(\n        (c: any) => c.id + \"\" === data.params.id + \"\"\n      );\n      const contactCIdx = (modifiedC || []).findIndex(\n        (c: any) => c.id + \"\" === data.params.id + \"\"\n      );\n      if (contactIdx > -1 && modifiedD[contactIdx][\"meta\"]) {\n        modifiedD[contactIdx].meta!.unRead = 0;\n        onChangeDirectMessages(modifiedD);\n      }\n      if (contactFIdx > -1 && modifiedF[contactFIdx][\"meta\"]) {\n        modifiedF[contactFIdx].meta!.unRead = 0;\n        onChangeFavourite(modifiedF);\n      }\n      if (contactCIdx > -1 && modifiedC[contactCIdx][\"meta\"]) {\n        modifiedC[contactCIdx].meta!.unRead = 0;\n        onChangeChannels(modifiedC);\n      }\n    }\n\n    return new Promise((resolve, reject) => {\n      if (modifiedD) {\n        resolve([200, \"true\"]);\n      } else {\n        setTimeout(() => {\n          reject([\"Your id is not found\"]);\n        }, 500);\n      }\n    });\n  });\n\n  mock.onDelete(new RegExp(`${url.DELETE_IMAGE}/*`)).reply(config => {\n    const { params } = config;\n\n    return new Promise((resolve, reject) => {\n      if (params.userId && params.messageId && params.imageId) {\n        let modifiedC = [...conversations];\n        const conversationIdx = (modifiedC || []).findIndex(\n          (c: any) => c.userId + \"\" === params.userId + \"\"\n        );\n        if (conversationIdx > -1 && modifiedC[conversationIdx].messages) {\n          const mIdx = (modifiedC[conversationIdx].messages || []).findIndex(\n            (c: any) => c.mId + \"\" === params.messageId + \"\"\n          );\n          if (\n            mIdx > -1 &&\n            modifiedC[conversationIdx].messages[mIdx] &&\n            modifiedC[conversationIdx].messages[mIdx].image\n          ) {\n            if (modifiedC[conversationIdx].messages[mIdx].image?.length === 1) {\n              modifiedC[conversationIdx].messages = (\n                modifiedC[conversationIdx].messages || []\n              ).filter((m: any) => m.mId + \"\" !== params.messageId + \"\");\n            } else {\n              modifiedC[conversationIdx].messages[mIdx].image = modifiedC[\n                conversationIdx\n              ].messages[mIdx].image?.filter(\n                (m: any) => m.id + \"\" !== params.imageId + \"\"\n              );\n            }\n          }\n        }\n        onChangeConversations(modifiedC);\n        resolve([200, \"Message is Deleted!\"]);\n      } else {\n        reject([\"Your id is not found\"]);\n      }\n    });\n  });\n\n  // mock.onPut(new RegExp(`${url.UPDATE_ETTINGS}/*`)).reply(config => {\n  //   const data = JSON.parse(config[\"data\"]);\n  //   const { field, value } = data;\n  //   const modifiedS: any = { ...settings };\n  //   modifiedS[field] = value;\n  //   onChangeSettings(modifiedS);\n\n  //   return new Promise((resolve, reject) => {\n  //     if (modifiedS) {\n  //       setTimeout(() => {\n  //         resolve([200, \"Setting Updated!\"]);\n  //       });\n  //     } else {\n  //       reject([\"Something went wrong!\"]);\n  //     }\n  //   });\n  // });\n};\n\nexport default fakeBackend;\n","/home/olfa/Documents/pfe-main/client/src/redux/layout/reducer.ts",[],"/home/olfa/Documents/pfe-main/client/src/redux/layout/saga.ts",[],"/home/olfa/Documents/pfe-main/client/src/redux/layout/actions.ts",[],"/home/olfa/Documents/pfe-main/client/src/redux/profile/reducer.ts",[],"/home/olfa/Documents/pfe-main/client/src/redux/profile/actions.ts",[],"/home/olfa/Documents/pfe-main/client/src/redux/profile/saga.ts",[],"/home/olfa/Documents/pfe-main/client/src/redux/contacts/saga.ts",[],"/home/olfa/Documents/pfe-main/client/src/redux/contacts/actions.ts",[],"/home/olfa/Documents/pfe-main/client/src/redux/contacts/reducer.ts",[],"/home/olfa/Documents/pfe-main/client/src/redux/calls/reducer.ts",[],"/home/olfa/Documents/pfe-main/client/src/redux/calls/actions.ts",[],"/home/olfa/Documents/pfe-main/client/src/redux/calls/saga.ts",[],"/home/olfa/Documents/pfe-main/client/src/redux/bookmarks/reducer.ts",[],"/home/olfa/Documents/pfe-main/client/src/redux/bookmarks/actions.ts",[],"/home/olfa/Documents/pfe-main/client/src/redux/bookmarks/saga.ts",[],"/home/olfa/Documents/pfe-main/client/src/redux/settings/reducer.ts",[],"/home/olfa/Documents/pfe-main/client/src/redux/settings/saga.ts",[],"/home/olfa/Documents/pfe-main/client/src/redux/settings/actions.ts",[],"/home/olfa/Documents/pfe-main/client/src/redux/chats/reducer.ts",["692"],"// types\nimport { ChatsActionTypes, ChatsState } from \"./types\";\n\nexport const INIT_STATE: any = {\n  favourites: [],\n  directMessages: [],\n  channels: [],\n  selectedChat: null,\n  chatUserDetails: {},\n  chatUserConversations: {},\n  isOpenUserDetails: false,\n  channelDetails: {},\n  archiveContacts: [],\n  messages: [],\n};\n\nconst Chats = (state = INIT_STATE, action: any) => {\n  switch (action.type) {\n    case ChatsActionTypes.API_RESPONSE_SUCCESS:\n      switch (action.payload.actionType) {\n        case ChatsActionTypes.GET_FAVOURITES:\n          return {\n            ...state,\n            favourites: action.payload.data,\n            isFavouritesFetched: true,\n            getFavouritesLoading: false,\n          };\n        case ChatsActionTypes.GET_DIRECT_MESSAGES:\n          return {\n            ...state,\n            directMessages: action.payload.data,\n            isDirectMessagesFetched: true,\n            getDirectMessagesLoading: false,\n            isContactsAdded: false,\n          };\n        case ChatsActionTypes.GET_CHANNELS:\n          return {\n            ...state,\n            channels: action.payload.data,\n            isChannelsFetched: true,\n            getChannelsLoading: false,\n            isChannelCreated: false,\n          };\n        case ChatsActionTypes.ADD_CONTACTS:\n          return {\n            ...state,\n            isContactsAdded: true,\n            addContactsLoading: false,\n          };\n        case ChatsActionTypes.CREATE_CHANNEL:\n          return {\n            ...state,\n            isChannelCreated: true,\n            createChannelLoading: false,\n          };\n        case ChatsActionTypes.GET_CHAT_USER_DETAILS:\n          return {\n            ...state,\n            chatUserDetails: action.payload.data,\n            isUserDetailsFetched: true,\n            getUserDetailsLoading: false,\n          };\n        case ChatsActionTypes.GET_CHAT_USER_CONVERSATIONS:\n          return {\n            ...state,\n            chatUserConversations: action.payload.data,\n            messages: action.payload.data.messages,\n            isUserConversationsFetched: true,\n            getUserConversationsLoading: false,\n            isUserMessageSent: false,\n            isMessageDeleted: false,\n            isMessageForwarded: false,\n          };\n        case ChatsActionTypes.ADD_MESSAGE:\n          return {\n            ...state,\n            messages: [...state.messages, action.payload.data],\n          };\n        case ChatsActionTypes.ON_SEND_MESSAGE:\n          return {\n            ...state,\n            isUserMessageSent: true,\n          };\n        case ChatsActionTypes.RECEIVE_MESSAGE:\n        case ChatsActionTypes.RECEIVE_MESSAGE_FROM_USER:\n          return {\n            ...state,\n            chatUserConversations: action.payload.data,\n          };\n        case ChatsActionTypes.READ_MESSAGE:\n          return {\n            ...state,\n            isMessageRead: true,\n            chatUserConversations: action.payload.data,\n          };\n        case ChatsActionTypes.DELETE_MESSAGE:\n          return {\n            ...state,\n            isMessageDeleted: true,\n          };\n        case ChatsActionTypes.FORWARD_MESSAGE:\n          return {\n            ...state,\n            isMessageForwarded: true,\n          };\n        case ChatsActionTypes.DELETE_USER_MESSAGES:\n          return {\n            ...state,\n            isUserMessagesDeleted: true,\n          };\n        case ChatsActionTypes.GET_CHANNEL_DETAILS:\n          return {\n            ...state,\n            chatUserDetails: { ...action.payload.data, isChannel: true },\n            isChannelDetailsFetched: true,\n            getUserDetailsLoading: false,\n          };\n        case ChatsActionTypes.TOGGLE_FAVOURITE_CONTACT:\n          return {\n            ...state,\n            isFavouriteContactToggled: true,\n          };\n        case ChatsActionTypes.GET_ARCHIVE_CONTACT:\n          return {\n            ...state,\n            archiveContacts: action.payload.data,\n            isArchiveContactFetched: true,\n            isContactArchiveToggled: false,\n          };\n        case ChatsActionTypes.TOGGLE_ARCHIVE_CONTACT:\n          return {\n            ...state,\n            isContactArchiveToggled: true,\n          };\n        case ChatsActionTypes.DELETE_IMAGE:\n          return {\n            ...state,\n            isImageDeleted: true,\n          };\n        default:\n          return { ...state };\n      }\n\n    case ChatsActionTypes.API_RESPONSE_ERROR:\n      switch (action.payload.actionType) {\n        case ChatsActionTypes.GET_FAVOURITES:\n          return {\n            ...state,\n            isFavouritesFetched: false,\n            getFavouritesLoading: false,\n          };\n        case ChatsActionTypes.GET_DIRECT_MESSAGES:\n          return {\n            ...state,\n            isDirectMessagesFetched: false,\n            getDirectMessagesLoading: false,\n          };\n        case ChatsActionTypes.GET_CHANNELS:\n          return {\n            ...state,\n            isChannelsFetched: false,\n            getChannelsLoading: false,\n          };\n        case ChatsActionTypes.ADD_CONTACTS:\n          return {\n            ...state,\n            isContactsAdded: false,\n            addContactsLoading: false,\n          };\n        case ChatsActionTypes.CREATE_CHANNEL:\n          return {\n            ...state,\n            isChannelCreated: false,\n            createChannelLoading: false,\n          };\n        case ChatsActionTypes.GET_CHAT_USER_DETAILS:\n          return {\n            ...state,\n            isUserDetailsFetched: false,\n            getUserDetailsLoading: false,\n          };\n        case ChatsActionTypes.GET_CHAT_USER_CONVERSATIONS:\n          return {\n            ...state,\n            chatUserConversations: {},\n            isUserConversationsFetched: false,\n            getUserConversationsLoading: false,\n            isUserMessageSent: false,\n          };\n        case ChatsActionTypes.ADD_MESSAGE:\n          return {\n            ...state,\n          };\n        case ChatsActionTypes.ON_SEND_MESSAGE:\n          return {\n            ...state,\n            isUserMessageSent: false,\n          };\n        case ChatsActionTypes.DELETE_MESSAGE:\n          return {\n            ...state,\n            isMessageDeleted: false,\n          };\n        case ChatsActionTypes.FORWARD_MESSAGE:\n          return {\n            ...state,\n            isMessageForwarded: false,\n          };\n        case ChatsActionTypes.DELETE_USER_MESSAGES:\n          return {\n            ...state,\n            isUserMessagesDeleted: false,\n          };\n        case ChatsActionTypes.GET_CHANNEL_DETAILS:\n          return {\n            ...state,\n            isChannelDetailsFetched: false,\n            getUserDetailsLoading: false,\n          };\n        case ChatsActionTypes.TOGGLE_FAVOURITE_CONTACT:\n          return {\n            ...state,\n            isFavouriteContactToggled: false,\n          };\n        case ChatsActionTypes.GET_ARCHIVE_CONTACT:\n          return {\n            ...state,\n            isArchiveContactFetched: false,\n          };\n        case ChatsActionTypes.TOGGLE_ARCHIVE_CONTACT:\n          return {\n            ...state,\n            isContactArchiveToggled: false,\n          };\n        case ChatsActionTypes.READ_CONVERSATION:\n          return {\n            ...state,\n            isRead: false,\n          };\n        case ChatsActionTypes.DELETE_IMAGE:\n          return {\n            ...state,\n            isImageDeleted: true,\n          };\n        default:\n          return { ...state };\n      }\n\n    case ChatsActionTypes.GET_FAVOURITES: {\n      return {\n        ...state,\n        getFavouritesLoading: true,\n        isFavouritesFetched: false,\n      };\n    }\n    case ChatsActionTypes.GET_DIRECT_MESSAGES:\n      return {\n        ...state,\n        isDirectMessagesFetched: false,\n        getDirectMessagesLoading: true,\n      };\n    case ChatsActionTypes.GET_CHANNELS:\n      return {\n        ...state,\n        isChannelsFetched: false,\n        getChannelsLoading: true,\n      };\n    case ChatsActionTypes.ADD_CONTACTS:\n      return {\n        ...state,\n        isContactsAdded: false,\n        addContactsLoading: true,\n      };\n    case ChatsActionTypes.CREATE_CHANNEL:\n      return {\n        ...state,\n        isChannelCreated: false,\n        createChannelLoading: true,\n      };\n    case ChatsActionTypes.CHANGE_SELECTED_CHAT:\n      return {\n        ...state,\n        selectedChat: action.payload,\n      };\n    case ChatsActionTypes.GET_CHAT_USER_DETAILS:\n      return {\n        ...state,\n        isUserDetailsFetched: false,\n        getUserDetailsLoading: true,\n      };\n    case ChatsActionTypes.GET_CHAT_USER_CONVERSATIONS:\n      return {\n        ...state,\n        isUserConversationsFetched: false,\n        getUserConversationsLoading: true,\n        isUserMessageSent: false,\n      };\n    case ChatsActionTypes.ADD_MESSAGE:\n      return {\n        ...state,\n      };\n    case ChatsActionTypes.TOGGLE_USER_DETAILS_TAB:\n      return {\n        ...state,\n        isOpenUserDetails: action.payload,\n      };\n    case ChatsActionTypes.ON_SEND_MESSAGE:\n      return {\n        ...state,\n        isUserMessageSent: false,\n      };\n    case ChatsActionTypes.DELETE_MESSAGE:\n      return {\n        ...state,\n        isMessageDeleted: false,\n      };\n    case ChatsActionTypes.FORWARD_MESSAGE:\n      return {\n        ...state,\n        isMessageForwarded: false,\n      };\n    case ChatsActionTypes.DELETE_USER_MESSAGES:\n      return {\n        ...state,\n        isUserMessagesDeleted: false,\n      };\n    case ChatsActionTypes.GET_CHANNEL_DETAILS:\n      return {\n        ...state,\n        isChannelDetailsFetched: false,\n        getUserDetailsLoading: true,\n      };\n    case ChatsActionTypes.TOGGLE_FAVOURITE_CONTACT:\n      return {\n        ...state,\n        isFavouriteContactToggled: false,\n      };\n    case ChatsActionTypes.GET_ARCHIVE_CONTACT:\n      return {\n        ...state,\n        isArchiveContactFetched: false,\n      };\n    case ChatsActionTypes.TOGGLE_ARCHIVE_CONTACT:\n      return {\n        ...state,\n        isContactArchiveToggled: false,\n      };\n    case ChatsActionTypes.DELETE_IMAGE:\n      return {\n        ...state,\n        isImageDeleted: false,\n      };\n    default:\n      return { ...state };\n  }\n};\n\nexport default Chats;\n","/home/olfa/Documents/pfe-main/client/src/redux/chats/saga.ts",[],"/home/olfa/Documents/pfe-main/client/src/redux/chats/actions.ts",[],"/home/olfa/Documents/pfe-main/client/src/redux/auth/forgetpwd/reducer.ts",[],"/home/olfa/Documents/pfe-main/client/src/redux/auth/forgetpwd/saga.ts",[],"/home/olfa/Documents/pfe-main/client/src/redux/auth/register/actions.ts",[],"/home/olfa/Documents/pfe-main/client/src/redux/auth/register/saga.ts",["693","694"],"import { takeEvery, fork, put, all, call } from \"redux-saga/effects\";\n\n//Account Redux states\nimport { AuthRegisterActionTypes } from \"./types\";\nimport {\n  authRegisterApiResponseSuccess,\n  authRegisterApiResponseError,\n} from \"./actions\";\n\n//Include Both Helper File with needed methods\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\";\nimport { postFakeRegister, postJwtRegister } from \"../../../api/index\";\n\n// initialize relavant method of both Auth\nconst fireBaseBackend = getFirebaseBackend();\n\n// Is user register successfull then direct plot user in redux.\nfunction* registerUser({ payload: { user } }: any) {\n  try {\n    // if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n    //   const response: Promise<any> = yield call(\n    //     fireBaseBackend.registerUser,\n    //     user.email,\n    //     user.password\n    //   );\n    //   yield put(\n    //     authRegisterApiResponseSuccess(\n    //       AuthRegisterActionTypes.REGISTER_USER,\n    //       response\n    //     )\n    //   );\n    // } else if (process.env.REACT_APP_DEFAULTAUTH === \"jwt\") {\n      //const response: Promise<any> = yield call(postJwtRegister, user);\n\n      const response: Promise<any> = yield call(postFakeRegister, user);\n      console.log(user)\n      yield put(\n        authRegisterApiResponseSuccess(\n          AuthRegisterActionTypes.REGISTER_USER,\n          response\n        )\n      );\n    // } else if (process.env.REACT_APP_DEFAULTAUTH === \"fake\") {\n    //   const response: Promise<any> = yield call(postFakeRegister, user);\n    //   yield put(\n    //     authRegisterApiResponseSuccess(\n    //       AuthRegisterActionTypes.REGISTER_USER,\n    //       response\n    //     )\n    //   );\n    // }\n  } catch (error: any) {\n    yield put(\n      authRegisterApiResponseError(AuthRegisterActionTypes.REGISTER_USER, error)\n    );\n  }\n}\n\nexport function* watchUserRegister() {\n  yield takeEvery(AuthRegisterActionTypes.REGISTER_USER, registerUser);\n}\n\nfunction* registerSaga() {\n  yield all([fork(watchUserRegister)]);\n}\n\nexport default registerSaga;\n","/home/olfa/Documents/pfe-main/client/src/redux/auth/forgetpwd/actions.ts",[],"/home/olfa/Documents/pfe-main/client/src/redux/auth/register/reducer.ts",[],"/home/olfa/Documents/pfe-main/client/src/redux/auth/login/reducer.ts",[],"/home/olfa/Documents/pfe-main/client/src/redux/auth/login/saga.ts",["695"],"import { call, put, takeEvery, takeLatest } from \"redux-saga/effects\";\n\n// Login Redux States\nimport { AuthLoginActionTypes } from \"./types\";\nimport {\n  authLoginApiResponseSuccess,\n  authLoginApiResponseError,\n} from \"./actions\";\n\n//Include Both Helper File with needed methods\nimport {\n  getFirebaseBackend,\n  setLoggeedInUser,\n} from \"../../../helpers/firebase_helper\";\nimport {\n  getCurrentUser,\n  postFakeLogin,\n  postJwtLogin,\n  postSocialLogin,\n} from \"../../../api/index\";\n\nconst fireBaseBackend = getFirebaseBackend();\n\nfunction* loadCurrentUser() {\n  try {\n    const response: Promise<any> = yield call(getCurrentUser);\n    yield put(\n      authLoginApiResponseSuccess(\n        AuthLoginActionTypes.LOAD_CURRENT_USER,\n        response\n      )\n    );\n  } catch (error: any) {\n    yield put(\n      authLoginApiResponseError(AuthLoginActionTypes.LOAD_CURRENT_USER, error)\n    );\n  }\n}\n\nfunction* loginUser({ payload: { user } }: any) {\n  try {\n    const response: Promise<String> = yield call(postFakeLogin, {\n      email: user.email,\n      password: user.password,\n    });\n\n    localStorage.setItem(\"authUser\", JSON.stringify(response) );\n    setLoggeedInUser(response);\n    yield put(\n      authLoginApiResponseSuccess(AuthLoginActionTypes.LOGIN_USER, response)\n    );\n  } catch (error: any) {\n    yield put(\n      authLoginApiResponseError(AuthLoginActionTypes.LOGIN_USER, error)\n    );\n  }\n}\n\nfunction* socialLogin({ payload: { data, type } }: any) {\n  try {\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n      let fireBaseBackend = getFirebaseBackend();\n      const response: Promise<any> = yield call(\n        fireBaseBackend.socialLoginUser,\n        data,\n        type\n      );\n      setLoggeedInUser(response);\n      yield put(\n        authLoginApiResponseSuccess(AuthLoginActionTypes.LOGIN_USER, response)\n      );\n    } else {\n      const response: Promise<any> = yield call(postSocialLogin, data);\n      yield put(\n        authLoginApiResponseSuccess(AuthLoginActionTypes.LOGIN_USER, response)\n      );\n    }\n  } catch (error: any) {\n    yield put(\n      authLoginApiResponseError(AuthLoginActionTypes.LOGIN_USER, error)\n    );\n  }\n}\n\nfunction* logoutUser() {\n  try {\n    localStorage.removeItem(\"authUser\");\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n      const response: Promise<any> = yield call(fireBaseBackend.logout);\n      yield put(\n        authLoginApiResponseSuccess(AuthLoginActionTypes.LOGOUT_USER, response)\n      );\n    } else {\n      yield put(\n        authLoginApiResponseSuccess(AuthLoginActionTypes.LOGOUT_USER, true)\n      );\n    }\n  } catch (error: any) {\n    yield put(\n      authLoginApiResponseError(AuthLoginActionTypes.LOGOUT_USER, error)\n    );\n  }\n}\n\nfunction* loginSaga() {\n  yield takeEvery(AuthLoginActionTypes.LOAD_CURRENT_USER, loadCurrentUser);\n  yield takeEvery(AuthLoginActionTypes.LOGIN_USER, loginUser);\n  yield takeEvery(AuthLoginActionTypes.LOGOUT_USER, logoutUser);\n  yield takeLatest(AuthLoginActionTypes.SOCIAL_LOGIN, socialLogin);\n}\n\nexport default loginSaga;\n","/home/olfa/Documents/pfe-main/client/src/redux/auth/login/actions.ts",[],"/home/olfa/Documents/pfe-main/client/src/api/urls.ts",[],"/home/olfa/Documents/pfe-main/client/src/data/settings.ts",[],"/home/olfa/Documents/pfe-main/client/src/routes/index.tsx",[],"/home/olfa/Documents/pfe-main/client/src/data/index.tsx",[],"/home/olfa/Documents/pfe-main/client/src/helpers/firebase_helper.js",[],["696","697"],"/home/olfa/Documents/pfe-main/client/src/redux/profile/types.ts",[],"/home/olfa/Documents/pfe-main/client/src/api/index.ts",[],"/home/olfa/Documents/pfe-main/client/src/redux/layout/types.ts",[],"/home/olfa/Documents/pfe-main/client/src/redux/calls/types.ts",[],"/home/olfa/Documents/pfe-main/client/src/helpers/notifications.ts",[],"/home/olfa/Documents/pfe-main/client/src/redux/contacts/types.ts",[],"/home/olfa/Documents/pfe-main/client/src/redux/bookmarks/types.ts",[],"/home/olfa/Documents/pfe-main/client/src/redux/chats/types.ts",[],"/home/olfa/Documents/pfe-main/client/src/redux/settings/types.ts",[],"/home/olfa/Documents/pfe-main/client/src/redux/auth/forgetpwd/types.ts",[],"/home/olfa/Documents/pfe-main/client/src/redux/auth/login/types.ts",[],"/home/olfa/Documents/pfe-main/client/src/redux/auth/register/types.ts",[],"/home/olfa/Documents/pfe-main/client/src/constants/index.ts",[],"/home/olfa/Documents/pfe-main/client/src/routes/allRoutes.ts",[],"/home/olfa/Documents/pfe-main/client/src/data/contacts.ts",[],"/home/olfa/Documents/pfe-main/client/src/data/myProfile.ts",["698"],"import image4 from \"../assets/images/small/img-4.jpg\";\nimport avatar1 from \"../assets/images/users/avatar-1.jpg\";\nimport Gravatar from 'react-gravatar';\nimport img1 from \"../assets/images/small/img-1.jpg\";\nimport img2 from \"../assets/images/small/img-2.jpg\";\nimport img4 from \"../assets/images/small/img-4.jpg\";\n\nexport interface BasicDetailsTypes {\n  firstName: string;\n  lastName: string;\n  title: string;\n  description: string;\n  fullName: string;\n  email: string;\n  location: string;\n  avatar: string;\n  coverImage: string;\n}\n\nexport interface MediaListItemTypes {\n  id: number;\n  url: string;\n}\nexport interface MediaTypes {\n  total: number;\n  list: MediaListItemTypes[];\n}\n\nexport interface AttachedfileTypes {\n  total: number;\n  list: AttachedfileItemTypes[];\n}\n\nexport interface AttachedfileItemTypes {\n  id: number;\n  fileName: string;\n  size: string;\n  downloadUrl: string;\n  icon: string;\n}\nexport interface ProfileDetailsTypes {\n  basicDetails: BasicDetailsTypes;\n  media: MediaTypes;\n  attachedFiles: AttachedfileTypes;\n}\n// Get user avatar\n\nconst profileDetails: ProfileDetailsTypes = {\n  basicDetails: {\n    firstName: \"Kathryn\",\n    lastName: \"Swarey\",\n    title: \"Front end Developer\",\n    description:\n      \"If several languages coalesce, the grammar of the resulting language is more simple.\",\n    fullName: \"Kathryn Swarey\",\n    email: \"admin@themesbrand.com\",\n    location: \"California, USA\",\n    avatar: avatar1,\n    coverImage: image4,\n  },\n  media: {\n    total: 17,\n    list: [\n      {\n        id: 1,\n        url: img1,\n      },\n      {\n        id: 2,\n        url: img2,\n      },\n      {\n        id: 3,\n        url: img4,\n      },\n      {\n        id: 4,\n        url: img1,\n      },\n    ],\n  },\n  attachedFiles: {\n    total: 4,\n    list: [\n      {\n        id: 1,\n        fileName: \"design-phase-1-approved.pdf\",\n        size: \"12.5 MB\",\n        downloadUrl: \"#\",\n        icon: \"bx bx-file\",\n      },\n      {\n        id: 2,\n        fileName: \"Image-1.jpg\",\n        size: \"4.2 MB\",\n        downloadUrl: \"#\",\n        icon: \"bx bx-image\",\n      },\n      {\n        id: 3,\n        fileName: \"Image-2.jpg\",\n        size: \"3.1 MB\",\n        downloadUrl: \"#\",\n        icon: \"bx bx-image\",\n      },\n      {\n        id: 4,\n        fileName: \"Landing-A.zip\",\n        size: \"6.7 MB\",\n        downloadUrl: \"#\",\n        icon: \"bx bx-file\",\n      },\n    ],\n  },\n};\n\nlet user: any = localStorage.getItem(\"authUser\");\nuser = JSON.parse(user);\n\nconst myData = {\n  uid: user && user.uid ? user.uid : 1,\n  username: \"admin\",\n  role: \"admin\",\n  password: \"123456\",\n  email: profileDetails.basicDetails.email,\n  profileImage: profileDetails.basicDetails.avatar,\n};\n\nexport { profileDetails, myData };\n","/home/olfa/Documents/pfe-main/client/src/data/chat.ts",[],"/home/olfa/Documents/pfe-main/client/src/data/bookmarks.ts",[],"/home/olfa/Documents/pfe-main/client/src/data/channels.ts",[],"/home/olfa/Documents/pfe-main/client/src/data/messages.ts",[],"/home/olfa/Documents/pfe-main/client/src/data/calls.ts",[],"/home/olfa/Documents/pfe-main/client/src/routes/AuthProtected.tsx",[],"/home/olfa/Documents/pfe-main/client/src/layouts/NonAuth/index.tsx",[],"/home/olfa/Documents/pfe-main/client/src/api/chats.ts",[],"/home/olfa/Documents/pfe-main/client/src/api/bookmarks.ts",[],"/home/olfa/Documents/pfe-main/client/src/api/calls.ts",[],"/home/olfa/Documents/pfe-main/client/src/api/contacts.ts",[],"/home/olfa/Documents/pfe-main/client/src/api/auth.ts",[],"/home/olfa/Documents/pfe-main/client/src/api/profile.ts",[],"/home/olfa/Documents/pfe-main/client/src/constants/settings.ts",[],"/home/olfa/Documents/pfe-main/client/src/hooks/index.ts",[],"/home/olfa/Documents/pfe-main/client/src/constants/layout.ts",[],"/home/olfa/Documents/pfe-main/client/src/pages/meet/Room.tsx",[],"/home/olfa/Documents/pfe-main/client/src/layouts/Default/index.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/StarterPage/index.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Authentication/Logout.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/index.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Authentication/ChangePassword.tsx",["699","700"],"import React from \"react\";\nimport { Alert, Row, Col, Form } from \"reactstrap\";\nimport { useLocation } from 'react-router-dom';\n\n// hooks\nimport { useRedux } from \"../../hooks/index\";\n\n// validations\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport { useForm } from \"react-hook-form\";\n\n//components\nimport NonAuthLayoutWrapper from \"../../components/NonAutnLayoutWrapper\";\nimport AuthHeader from \"../../components/AuthHeader\";\nimport FormInput from \"../../components/FormInput\";\nimport Loader from \"../../components/Loader\";\n\nimport jwt_decode from \"jwt-decode\";\n\nimport avatar1 from \"../../assets/images/users/avatar-1.jpg\";\nimport { userChangePassword } from \"../../redux/actions\";\n\ninterface ChangePasswordProps { }\nconst ChangePassword = (props: ChangePasswordProps) => {\n  // global store\n  const { dispatch, useAppSelector } = useRedux();\n\n  const { changepasswordError, passwordChanged, changePassLoading } =\n    useAppSelector(state => ({\n      passwordChanged: state.ForgetPassword.passwordChanged,\n      changepasswordError: state.ForgetPassword.changepasswordError,\n      changePassLoading: state.ForgetPassword.loading,\n    }));\n\n  const resolver = yupResolver(\n    yup.object().shape({\n      //oldPassword: yup.string().required(\"Please Enter Old Password.\"),\n      password: yup.string().required(\"Please Enter New Password.\"),\n      confirmpassword: yup\n        .string()\n        .oneOf([yup.ref(\"password\"), null], \"Passwords don't match\")\n        .required(\"This value is required.\"),\n    })\n  );\n\n  const defaultValues: any = {};\n\n  const methods = useForm({ defaultValues, resolver });\n  const {\n    handleSubmit,\n    register,\n    control,\n    formState: { errors },\n  } = methods;\n\n  const location = useLocation().search;\n\n  const decode = () => {\n    const searchParams = new URLSearchParams(location)\n\n    const resetTokenParam = searchParams.get('token');\n\n    if (resetTokenParam) {\n      var decoded: any = jwt_decode(resetTokenParam);\n\n      return decoded?.resetToken.token;\n    }\n  };\n\n  const onSubmitForm = (values: { password: string }) => {\n    const token = decode()\n    //console.log(token)\n    dispatch(userChangePassword({ newPassword: values.password, sentToken: token }));\n  };\n\n  return (\n    <NonAuthLayoutWrapper>\n      <Row className=\"justify-content-center my-auto\">\n        <Col sm={8} lg={6} xl={5} className=\"col-xxl-4\">\n          <div className=\"py-md-5 py-4\">\n            {changepasswordError && changepasswordError ? (\n              <Alert color=\"danger\">{changepasswordError}</Alert>\n            ) : null}\n            {passwordChanged ? (\n              <Alert color=\"success\">Your Password is changed</Alert>\n            ) : null}\n\n            <Form\n              onSubmit={handleSubmit(onSubmitForm)}\n              className=\"position-relative\"\n            >\n              {changePassLoading && <Loader />}\n              {/* <div className=\"mb-3\">\n                <FormInput\n                  label=\"Old Password\"\n                  type=\"password\"\n                  name=\"oldPassword\"\n                  register={register}\n                  errors={errors}\n                  control={control}\n                  labelClassName=\"form-label\"\n                  placeholder=\"Enter Old Password\"\n                  className=\"form-control\"\n                  withoutLabel={true}\n                  hidePasswordButton={true}\n                />\n              </div> */}\n              <div className=\"mb-3\">\n                <FormInput\n                  label=\"New Password\"\n                  type=\"password\"\n                  name=\"password\"\n                  register={register}\n                  errors={errors}\n                  control={control}\n                  labelClassName=\"form-label\"\n                  placeholder=\"Enter New Password\"\n                  className=\"form-control\"\n                  withoutLabel={true}\n                  hidePasswordButton={false}\n                />\n              </div>\n              <div className=\"mb-3\">\n                <FormInput\n                  label=\"Confirm New Password\"\n                  type=\"password\"\n                  name=\"confirmpassword\"\n                  register={register}\n                  errors={errors}\n                  control={control}\n                  labelClassName=\"form-label\"\n                  placeholder=\"Enter Confirm Password\"\n                  className=\"form-control\"\n                  withoutLabel={true}\n                  hidePasswordButton={true}\n                />\n              </div>\n\n              <div className=\"text-center mt-4\">\n                <div className=\"row\">\n                  <div className=\"col-6\">\n                    <button className=\"btn btn-primary w-100\" type=\"submit\">\n                      Save\n                    </button>\n                  </div>\n                  <div className=\"col-6\">\n                    <button className=\"btn btn-light w-100\" type=\"button\">\n                      Cancel\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </Form>\n          </div>\n        </Col>\n      </Row>\n    </NonAuthLayoutWrapper>\n  );\n};\n\nexport default ChangePassword;\n","/home/olfa/Documents/pfe-main/client/src/pages/Authentication/RecoverPassword.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Authentication/LockScreen.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Authentication/Register.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Authentication/Login.tsx",["701","702","703"],"import React, { useEffect, useState } from \"react\";\nimport {\n  Alert,\n  Row,\n  Col,\n  Form,\n  Label,\n  Button,\n  UncontrolledTooltip,\n} from \"reactstrap\";\n\n//Social Media Imports\n//import { GoogleLogin } from \"react-google-login\";\nimport FacebookLogin from \"react-facebook-login/dist/facebook-login-render-props\";\n\n// router\nimport { Link, Redirect, useHistory, useLocation } from \"react-router-dom\";\n\n// validations\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport { useForm } from \"react-hook-form\";\n\n// config\nimport config from \"../../config\";\n\n// hooks\nimport { useProfile, useRedux } from \"../../hooks/index\";\n\n//actions\nimport { loginUser, socialLogin } from \"../../redux/actions\";\n\n// components\nimport NonAuthLayoutWrapper from \"../../components/NonAutnLayoutWrapper\";\nimport AuthHeader from \"../../components/AuthHeader\";\nimport FormInput from \"../../components/FormInput\";\nimport Loader from \"../../components/Loader\";\n\ninterface LocationTypes {\n  from?: Location;\n}\ninterface LoginProps { }\nconst Login = (props: LoginProps) => {\n  // global store\n  const { dispatch, useAppSelector } = useRedux();\n\n  const { isUserLogin, error, loginLoading, isUserLogout } = useAppSelector(\n    state => ({\n      isUserLogin: state.Login.isUserLogin,\n      error: state.Login.error,\n      loginLoading: state.Login.loading,\n      isUserLogout: state.Login.isUserLogout,\n    })\n  );\n\n  const history: any = useHistory();\n  const location = useLocation<LocationTypes>();\n  const [redirectUrl, setRedirectUrl] = useState(\"/\");\n  useEffect(() => {\n    const url =\n      location.state && location.state.from\n        ? location.state.from.pathname\n        : \"/\";\n    setRedirectUrl(url);\n  }, [location]);\n  useEffect(() => {\n    if (isUserLogin && !loginLoading && !isUserLogout) {\n      history.push(redirectUrl);\n    }\n  }, [isUserLogin, history, loginLoading, isUserLogout, redirectUrl]);\n\n  const resolver = yupResolver(\n    yup.object().shape({\n      email: yup.string().required(\"Please Enter E-mail.\"),\n      password: yup.string().required(\"Please Enter Password.\"),\n    })\n  );\n\n  const defaultValues: any = {\n    email: \"olfa.selmi@esprit.tn\",\n    password: \"azerty\",\n  };\n\n  const methods = useForm({ defaultValues, resolver });\n  const {\n    handleSubmit,\n    register,\n    control,\n    formState: { errors },\n  } = methods;\n\n  const onSubmitForm = (values: object) => {\n    dispatch(loginUser(values));\n  };\n\n  const { userProfile, loading } = useProfile();\n\n  if (userProfile && !loading) {\n    return <Redirect to={{ pathname: redirectUrl }} />;\n  }\n\n  // const signIn = (res: any, type: \"google\" | \"facebook\") => {\n  //   if (type === \"google\" && res) {\n  //     const postData = {\n  //       name: res.profileObj.name,\n  //       email: res.profileObj.email,\n  //       token: res.tokenObj.access_token,\n  //       idToken: res.tokenId,\n  //     };\n  //     dispatch(socialLogin(postData, type));\n  //   } else if (type === \"facebook\" && res) {\n  //     const postData = {\n  //       name: res.name,\n  //       token: res.accessToken,\n  //     };\n  //     dispatch(socialLogin(postData, type));\n  //   }\n  // };\n\n  //handleFacebookLoginResponse\n  // const facebookResponse = (response: object) => {\n  //   signIn(response, \"facebook\");\n  // };\n\n  // //handleGoogleLoginResponse\n  // const googleResponse = (response: object) => {\n  //   signIn(response, \"google\");\n  // };\n\n  return (\n    <NonAuthLayoutWrapper>\n      <Row className=\" justify-content-center my-auto\">\n        <Col sm={8} lg={6} xl={5} className=\"col-xxl-4\">\n          <div className=\"py-md-5 py-4\">\n            <AuthHeader\n              title=\"Welcome Back !\"\n              subtitle=\"Sign in to continue to Doot.\"\n            />\n\n            {error && <Alert color=\"danger\">{error}</Alert>}\n\n            <Form\n              onSubmit={handleSubmit(onSubmitForm)}\n              className=\"position-relative\"\n            >\n              {loginLoading && <Loader />}\n              <div className=\"mb-3\">\n                <FormInput\n                  label=\"Email\"\n                  type=\"text\"\n                  name=\"email\"\n                  register={register}\n                  errors={errors}\n                  control={control}\n                  labelClassName=\"form-label\"\n                  placeholder=\"Enter username\"\n                  className=\"form-control\"\n                />\n              </div>\n\n              <div className=\"mb-3\">\n                <FormInput\n                  label=\"Password\"\n                  type=\"password\"\n                  name=\"password\"\n                  register={register}\n                  errors={errors}\n                  control={control}\n                  labelClassName=\"form-label\"\n                  className=\"form-control pe-5\"\n                  placeholder=\"Enter Password\"\n                />\n              </div>\n\n              <div className=\"form-check form-check-info font-size-16\">\n                <input\n                  className=\"form-check-input\"\n                  type=\"checkbox\"\n                  id=\"remember-check\"\n                />\n                <Label\n                  className=\"form-check-label font-size-14\"\n                  htmlFor=\"remember-check\"\n                >\n                  Remember me\n                </Label>\n              </div>\n\n              <div className=\"text-center mt-4\">\n                <Button color=\"primary\" className=\"w-100\" type=\"submit\">\n                  Log In\n                </Button>\n              </div>\n\n              <div className=\"mt-4 text-center\">\n                <div className=\"signin-other-title\">\n                  <h5 className=\"font-size-14 mb-4 title\">Sign in with</h5>\n                </div>\n                <Row className=\"\">\n                  <div className=\"col-4\">\n                    <div>\n                      {/* <FacebookLogin\n                        appId={config.FACEBOOK.APP_ID}\n                        autoLoad={false}\n                        callback={facebookResponse}\n                        render={(renderProps: any) => (\n                          <button\n                            type=\"button\"\n                            className=\"btn btn-light w-100\"\n                            id=\"facebook\"\n                            onClick={renderProps.onClick}\n                          >\n                            <i className=\"mdi mdi-facebook text-indigo\"></i>\n                          </button>\n                        )}\n                      /> */}\n                    </div>\n                    {/* <UncontrolledTooltip placement=\"top\" target=\"facebook\">\n                      Facebook\n                    </UncontrolledTooltip> */}\n                  </div>\n                  <div className=\"col-4\">\n                    <div>\n                      <button\n                        type=\"button\"\n                        className=\"btn btn-light w-100\"\n                        id=\"twitter\"\n                      >\n                        <i className=\"mdi mdi-twitter text-info\"></i>\n                      </button>\n                    </div>\n                    <UncontrolledTooltip placement=\"top\" target=\"twitter\">\n                      Twitter\n                    </UncontrolledTooltip>\n                  </div>\n                  <div className=\"col-4\">\n                    <div>\n                      {/* <GoogleLogin\n                        clientId={\n                          config.GOOGLE.CLIENT_ID ? config.GOOGLE.CLIENT_ID : \"\"\n                        }\n                        render={renderProps => (\n                          <button\n                            type=\"button\"\n                            className=\"btn btn-light w-100\"\n                            id=\"google\"\n                            onClick={renderProps.onClick}\n                          >\n                            <i className=\"mdi mdi-google text-danger\"></i>\n                          </button>\n                        )}\n                        onSuccess={googleResponse}\n                        onFailure={() => { }}\n                      /> */}\n                    </div>\n                    {/* <UncontrolledTooltip placement=\"top\" target=\"google\">\n                      Google\n                    </UncontrolledTooltip> */}\n                  </div>\n                </Row>\n              </div>\n            </Form>\n\n            <div className=\"mt-5 text-center text-muted\">\n              <p>\n                Don't have an account ?{\" \"}\n                <Link\n                  to=\"/auth-register\"\n                  className=\"fw-medium text-decoration-underline\"\n                >\n                  {\" \"}\n                  Register\n                </Link>\n              </p>\n            </div>\n          </div>\n        </Col>\n      </Row>\n    </NonAuthLayoutWrapper>\n  );\n};\n\nexport default Login;\n","/home/olfa/Documents/pfe-main/client/src/pages/Root/index.tsx",[],"/home/olfa/Documents/pfe-main/client/src/api/apiCore.ts",[],"/home/olfa/Documents/pfe-main/client/src/hooks/WindowHooks.ts",[],"/home/olfa/Documents/pfe-main/client/src/hooks/useRedux.ts",[],"/home/olfa/Documents/pfe-main/client/src/hooks/UserHooks.ts",[],"/home/olfa/Documents/pfe-main/client/src/layouts/Default/SideMenu.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Leftbar.tsx",[],"/home/olfa/Documents/pfe-main/client/src/components/AuthHeader.tsx",[],"/home/olfa/Documents/pfe-main/client/src/components/Loader.tsx",[],"/home/olfa/Documents/pfe-main/client/src/components/FormInput.tsx",[],"/home/olfa/Documents/pfe-main/client/src/components/NonAutnLayoutWrapper.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/ConversationUser/Welcome.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/ConversationUser/index.tsx",["704","705","706","707","708","709","710"],"import React, { useEffect, useState } from \"react\";\n\n// hooks\nimport { useRedux } from \"../../../hooks/index\";\n\nimport io from \"socket.io-client\";\n\n// actions\nimport {\n  toggleUserDetailsTab,\n  getChatUserConversations,\n  onSendMessage,\n  receiveMessage,\n  readMessage,\n  receiveMessageFromUser,\n  deleteMessage,\n  deleteUserMessages,\n  toggleArchiveContact,\n  addChatUserConversations,\n} from \"../../../redux/actions\";\n\n// hooks\nimport { useProfile } from \"../../../hooks\";\n\n// components\nimport Conversation from \"./Conversation\";\nimport ChatInputSection from \"./ChatInputSection/index\";\n\n// interface\nimport { MessagesTypes } from \"../../../data/messages\";\n\n// dummy data\nimport { pinnedTabs } from \"../../../data/index\";\nimport UserHead from \"./UserHead\";\n\nconst socket = io(\"http://localhost:5000/\");\n\ninterface IndexProps {\n  isChannel: boolean;\n}\nconst Index = ({ isChannel }: IndexProps) => {\n  // global store\n  const { dispatch, useAppSelector } = useRedux();\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [selectedChatCompare, setSelectedChatCompare] = useState();\n\n  const [typing, setTyping] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n\n  const {\n    chatUserDetails,\n    chatUserConversations,\n    messages,\n    isUserMessageSent,\n    isMessageDeleted,\n    isMessageForwarded,\n    isUserMessagesDeleted,\n    isImageDeleted,\n  } = useAppSelector((state) => ({\n    chatUserDetails: state.Chats.chatUserDetails,\n    chatUserConversations: state.Chats.chatUserConversations,\n    messages: state.Chats.messages,\n    isUserMessageSent: state.Chats.isUserMessageSent,\n    isMessageDeleted: state.Chats.isMessageDeleted,\n    isMessageForwarded: state.Chats.isMessageForwarded,\n    isUserMessagesDeleted: state.Chats.isUserMessagesDeleted,\n    isImageDeleted: state.Chats.isImageDeleted,\n  }));\n\n  const onOpenUserDetails = () => {\n    dispatch(toggleUserDetailsTab(true));\n  };\n\n  /*\n  hooks\n  */\n  const { userProfile } = useProfile();\n\n  /*\n  reply handeling\n  */\n  const [replyData, setReplyData] = useState<\n    null | MessagesTypes | undefined\n  >();\n  const onSetReplyData = (reply: null | MessagesTypes | undefined) => {\n    setReplyData(reply);\n  };\n\n\n  /*\n  send message\n  */\n  const onSend = (data: any) => {\n    // let params: any = {\n    //   text: data.text && data.text,\n    //   time: new Date().toISOString(),\n    //   image: data.image && data.image,\n    //   attachments: data.attachments && data.attachments,\n    //   meta: {\n    //     receiver: chatUserDetails.id,\n    //     sender: userProfile.uid,\n    //   },\n    // };\n    let params: any = {\n      channel: \"Olfa-Mahran\",\n      receiver: chatUserDetails.id,\n      text: data.text && data.text,\n    };\n\n    let messageobject: any = {\n      user: userProfile.user.id,\n      text: data.text && data.text,\n      meta: {\n        receiver: chatUserDetails.id,\n        sender: userProfile.user.id,\n        sent: true,\n        received: false,\n        read: false,\n      },\n    };\n    if (replyData && replyData !== null) {\n      params[\"replyOf\"] = replyData;\n    }\n    dispatch(onSendMessage(params));\n    dispatch(addChatUserConversations(messageobject));\n    socket.emit(\n      \"new message\",\n      messageobject,\n      userProfile.user.id,\n      chatUserConversations.messages.length\n    );\n\n    if (!isChannel) {\n      setTimeout(() => {\n        dispatch(receiveMessage(chatUserDetails.id));\n      }, 1000);\n      setTimeout(() => {\n        dispatch(readMessage(chatUserDetails.id));\n      }, 1500);\n      setTimeout(() => {\n        dispatch(receiveMessageFromUser(chatUserDetails.id));\n      }, 2000);\n    }\n    setReplyData(null);\n  };\n\n  useEffect(() => {\n    socket.emit(\"setup\", userProfile);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.emit(\"join chat\", chatUserDetails);\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n  }, []);\n\n  useEffect(() => {\n    if (\n      isUserMessageSent ||\n      isMessageDeleted ||\n      isMessageForwarded ||\n      isUserMessagesDeleted ||\n      isImageDeleted\n    ) {\n      dispatch(getChatUserConversations(chatUserDetails.id));\n    }\n  }, [\n    dispatch,\n    isUserMessageSent,\n    chatUserDetails,\n    isMessageDeleted,\n    isMessageForwarded,\n    isUserMessagesDeleted,\n    isImageDeleted,\n    chatUserConversations,\n    userProfile,\n  ]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved, userId, leng) => {\n      dispatch(addChatUserConversations(newMessageRecieved));\n    });\n  }, []);\n\n  const onDeleteMessage = (messageId: string | number) => {\n    dispatch(deleteMessage(chatUserDetails.id, messageId));\n  };\n\n  const onDeleteUserMessages = () => {\n    dispatch(deleteUserMessages(chatUserDetails.id));\n  };\n\n  const onToggleArchive = () => {\n    dispatch(toggleArchiveContact(chatUserDetails.id));\n  };\n\n  const sendMessageSocket = (data: any, userId: any) => {\n    socket.emit(\"new message\", data, userId);\n  };\n\n  return (\n    <>\n      <UserHead\n        chatUserDetails={chatUserDetails}\n        pinnedTabs={pinnedTabs}\n        onOpenUserDetails={onOpenUserDetails}\n        onDelete={onDeleteUserMessages}\n        isChannel={isChannel}\n        onToggleArchive={onToggleArchive}\n      />\n      <Conversation\n        chatUserConversations={chatUserConversations}\n        chatUserDetails={chatUserDetails}\n        onDelete={onDeleteMessage}\n        onSetReplyData={onSetReplyData}\n        isChannel={isChannel}\n        messagesList={messages}\n        isTyping={isTyping}\n      />\n      <ChatInputSection\n        onSend={onSend}\n        replyData={replyData}\n        onSetReplyData={onSetReplyData}\n        chatUserDetails={chatUserDetails}\n        sendMessageSocket={sendMessageSocket}\n      />\n    </>\n  );\n};\n\nexport default Index;\n","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/UserProfileDetails/index.tsx",[],"/home/olfa/Documents/pfe-main/client/src/config.ts",[],"/home/olfa/Documents/pfe-main/client/src/layouts/Default/menu.ts",[],"/home/olfa/Documents/pfe-main/client/src/components/LightDarkMode.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Profile/index.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Chats/index.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Calls/index.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Contacts/index.tsx",["711","712"],"import React, { useEffect, useState } from \"react\";\n\n// hooks\nimport { useRedux } from \"../../../hooks/index\";\n\n// components\nimport Loader from \"../../../components/Loader\";\nimport AppSimpleBar from \"../../../components/AppSimpleBar\";\nimport InviteContactModal from \"../../../components/InviteContactModal\";\nimport EmptyStateResult from \"../../../components/EmptyStateResult\";\nimport ListHeader from \"./ListHeader\";\nimport Contact from \"./Contact\";\n\n// actions\nimport {\n  getContacts,\n  inviteContact,\n  resetContacts,\n  getChannelDetails,\n  getChatUserDetails,\n  getChatUserConversations,\n  changeSelectedChat,\n} from \"../../../redux/actions\";\n\n//utils\nimport { divideByKey, DivideByKeyResultTypes } from \"../../../utils\";\n\ninterface IndexProps {}\n\nconst Index = (props: IndexProps) => {\n  // global store\n  const { dispatch, useAppSelector } = useRedux();\n\n  const { contactsList, getContactsLoading, isContactInvited } = useAppSelector(\n    state => ({\n      contactsList: state.Contacts.contacts,\n      getContactsLoading: state.Contacts.getContactsLoading,\n      isContactInvited: state.Contacts.isContactInvited,\n    })\n  );\n\n  /*\n  get contacts\n  */\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n\n  const [contacts, setContacts] = useState<Array<any>>([]);\n  const [contactsData, setContactsData] = useState<Array<any>>([]);\n  useEffect(() => {\n    if (contactsList.length > 0) {\n      setContacts(contactsList);\n    }\n  }, [contactsList]);\n\n  useEffect(() => {\n    // if (contacts.length > 0) {\n    //   const formattedContacts = divideByKey(\"firstName\", contacts);\n    //   setContactsData(formattedContacts);\n    // }\n  }, [contacts]);\n\n  /*\n  add contact modal handeling\n  */\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const openModal = () => {\n    setIsOpen(true);\n  };\n  const closeModal = () => {\n    setIsOpen(false);\n  };\n\n  /*\n  onInvite handeling\n  */\n  const onInviteContact = (data: any) => {\n    dispatch(inviteContact(data));\n  };\n  useEffect(() => {\n    if (isContactInvited) {\n      setIsOpen(false);\n      setTimeout(() => {\n        dispatch(resetContacts(\"isContactInvited\", false));\n      }, 1000);\n    }\n  }, [dispatch, isContactInvited]);\n\n  /*\n  contact search\n  */\n  const [search, setSearch] = useState(\"\");\n  const onChangeSearch = (value: string) => {\n    setSearch(value);\n    let modifiedContacts = [...contactsList];\n    let filteredContacts = (modifiedContacts || []).filter((c: any) =>\n      c[\"firstName\"].toLowerCase().includes(value.toLowerCase())\n    );\n    setContacts(filteredContacts);\n  };\n\n  const totalC = (contacts || []).length;\n  const onSelectChat = (id: string | number, isChannel?: boolean) => {\n    if (isChannel) {\n      dispatch(getChannelDetails(id));\n    } else {\n      dispatch(getChatUserDetails(id));\n    }\n    dispatch(getChatUserConversations(id));\n    dispatch(changeSelectedChat(id));\n  };\n\n  return (\n    <>\n      <div className=\"position-relative\">\n        {getContactsLoading && <Loader />}\n        <ListHeader\n          search={search}\n          onChangeSearch={onChangeSearch}\n          openModal={openModal}\n        />\n\n        <AppSimpleBar className=\"chat-message-list chat-group-list\">\n          <div>\n            {totalC === 0 ? (\n              <EmptyStateResult searchedText={search} />\n            ) : (\n              (contactsData || []).map(\n                (letterContacts: DivideByKeyResultTypes, key: number) => (\n                  <Contact\n                    letterContacts={letterContacts}\n                    key={key}\n                    index={key}\n                    onSelectChat={onSelectChat}\n                  />\n                )\n              )\n            )}\n          </div>\n        </AppSimpleBar>\n      </div>\n      <InviteContactModal\n        isOpen={isOpen}\n        onClose={closeModal}\n        onInvite={onInviteContact}\n      />\n    </>\n  );\n};\n\nexport default Index;\n","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/ConversationUser/Conversation.tsx",["713"],"import React, { useEffect, useRef, useCallback, useState } from \"react\";\n\n// hooks\nimport { useRedux } from \"../../../hooks/index\";\n\n// hooks\nimport { useProfile } from \"../../../hooks\";\n\n// components\nimport AppSimpleBar from \"../../../components/AppSimpleBar\";\nimport Loader from \"../../../components/Loader\";\nimport Message from \"./Message\";\n// import Day from \"./Day\";\n\n// interface\nimport { MessagesTypes } from \"../../../data/messages\";\nimport ForwardModal from \"../../../components/ForwardModal\";\n\n// actions\nimport { forwardMessage, deleteImage } from \"../../../redux/actions\";\nimport { io } from \"socket.io-client\";\n\ninterface ConversationProps {\n  chatUserConversations: any;\n  chatUserDetails: any;\n  onDelete: (messageId: string | number) => any;\n  onSetReplyData: (reply: null | MessagesTypes | undefined) => void;\n  isChannel: boolean;\n  messagesList: any;\n  isTyping: any;\n}\nconst Conversation = ({\n  chatUserDetails,\n  chatUserConversations,\n  onDelete,\n  onSetReplyData,\n  isChannel,\n  messagesList,\n  isTyping,\n}: ConversationProps) => {\n  // global store\n  const { dispatch, useAppSelector } = useRedux();\n\n  const { userProfile } = useProfile();\n\n  const { getUserConversationsLoading, isMessageForwarded } = useAppSelector(\n    (state: any) => ({\n      getUserConversationsLoading: state.Chats.getUserConversationsLoading,\n      isMessageForwarded: state.Chats.isMessageForwarded,\n    })\n  );\n\n  // const messages =\n  //   chatUserConversations.isChannel && chatUserConversations.isChannel.length\n  //     ? chatUserConversations.isChannel\n  //     : [];\n\n  const ref = useRef<any>();\n  const scrollElement = useCallback(() => {\n    if (ref && ref.current) {\n      const listEle = document.getElementById(\"chat-conversation-list\");\n      let offsetHeight = 0;\n      if (listEle) {\n        offsetHeight = listEle.scrollHeight - window.innerHeight + 250;\n      }\n      if (offsetHeight) {\n        ref.current\n          .getScrollElement()\n          .scrollTo({ top: offsetHeight, behavior: \"smooth\" });\n      }\n    }\n  }, [ref]);\n\n  useEffect(() => {\n    // setMessages(\n    //   chatUserConversations.messages && chatUserConversations.messages.length\n    //     ? chatUserConversations.messages\n    //     : []\n    // );\n\n    if (ref && ref.current) {\n      ref.current.recalculate();\n    }\n  }, []);\n\n  useEffect(() => {\n    if (chatUserConversations.messages) {\n      scrollElement();\n    }\n  }, [chatUserConversations.messages, scrollElement]);\n\n  /*\n  forward message\n  */\n  const [forwardData, setForwardData] = useState<\n    null | MessagesTypes | undefined\n  >();\n  const [isOpenForward, setIsOpenForward] = useState<boolean>(false);\n  const onOpenForward = (message: MessagesTypes) => {\n    setForwardData(message);\n    setIsOpenForward(true);\n  };\n  const onCloseForward = () => {\n    setIsOpenForward(false);\n  };\n\n  const onForwardMessage = (data: any) => {\n    const params = {\n      contacts: data.contacts,\n      message: data.message,\n      forwardedMessage: forwardData,\n    };\n    dispatch(forwardMessage(params));\n  };\n  useEffect(() => {\n    if (isMessageForwarded) {\n      setIsOpenForward(false);\n    }\n  }, [isMessageForwarded]);\n\n  /*\n  image delete\n  */\n  const onDeleteImage = (\n    messageId: string | number,\n    imageId: string | number\n  ) => {\n    dispatch(deleteImage(chatUserDetails.id, messageId, imageId));\n  };\n  return (\n    <AppSimpleBar\n      scrollRef={ref}\n      className=\"chat-conversation p-3 p-lg-4 positin-relative\"\n    >\n      {getUserConversationsLoading && <Loader />}\n      <ul\n        className=\"list-unstyled chat-conversation-list\"\n        id=\"chat-conversation-list\"\n      >\n        {(messagesList || []).map((message: MessagesTypes, key: number) => {\n          const isFromMe = message.meta.sender === userProfile.user.id;\n          return (\n            <Message\n              message={message}\n              key={key}\n              chatUserDetails={chatUserDetails}\n              onDelete={onDelete}\n              onSetReplyData={onSetReplyData}\n              isFromMe={isFromMe}\n              onOpenForward={onOpenForward}\n              isChannel={isChannel}\n              onDeleteImage={onDeleteImage}\n            />\n          );\n        })}\n        {/*  <Day /> */}\n      </ul>\n      {isOpenForward && (\n        <ForwardModal\n          isOpen={isOpenForward}\n          onClose={onCloseForward}\n          forwardData={forwardData}\n          chatUserDetails={chatUserDetails}\n          onForward={onForwardMessage}\n        />\n      )}\n      {isTyping ? <>is typing ...</> : <></>}\n    </AppSimpleBar>\n  );\n};\n\nexport default Conversation;\n","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Settings/index.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Bookmark/index.tsx",[],"/home/olfa/Documents/pfe-main/client/src/components/AudioCallModal.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/ConversationUser/UserHead.tsx",["714","715","716","717","718","719"],"import React, { useState } from \"react\";\nimport {\n  Row,\n  Col,\n  Dropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  Input,\n  Button,\n  Alert,\n  UncontrolledTooltip,\n} from \"reactstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport classnames from \"classnames\";\n\n// hooks\nimport { useRedux } from \"../../../hooks/index\";\n\n// components\nimport AudioCallModal from \"../../../components/AudioCallModal\";\nimport VideoCallModal from \"../../../components/VideoCallModal\";\nimport AddPinnedTabModal from \"../../../components/AddPinnedTabModal\";\n\n// interface\nimport { PinTypes } from \"../../../data/chat\";\n\n// actions\nimport { changeSelectedChat } from \"../../../redux/actions\";\n\n// constants\nimport { STATUS_TYPES } from \"../../../constants\";\ninterface ProfileImageProps {\n  chatUserDetails: any;\n  onCloseConversation: () => any;\n  onOpenUserDetails: () => any;\n  isChannel: boolean;\n}\nconst ProfileImage = ({\n  chatUserDetails,\n  onCloseConversation,\n  onOpenUserDetails,\n  isChannel,\n}: ProfileImageProps) => {\n  const fullName = !isChannel\n    ? chatUserDetails.firstName\n      ? `${chatUserDetails.firstName} ${chatUserDetails.lastName}`\n      : \"-\"\n    : chatUserDetails.name;\n  const shortName = !isChannel\n    ? chatUserDetails.firstName\n      ? `${chatUserDetails.firstName.charAt(\n          0\n        )}${chatUserDetails.lastName.charAt(0)}`\n      : \"-\"\n    : \"#\";\n\n  const colors = [\n    \"bg-primary\",\n    \"bg-danger\",\n    \"bg-info\",\n    \"bg-warning\",\n    \"bg-secondary\",\n    \"bg-pink\",\n    \"bg-purple\",\n  ];\n  const [color] = useState(Math.floor(Math.random() * colors.length));\n\n  const isOnline =\n    chatUserDetails.status && chatUserDetails.status === STATUS_TYPES.ACTIVE;\n\n  const members = (chatUserDetails.members || []).length;\n  return (\n    <div className=\"d-flex align-items-center\">\n      <div className=\"flex-shrink-0 d-block d-lg-none me-2\">\n        <Link\n          to=\"#\"\n          onClick={onCloseConversation}\n          className=\"user-chat-remove text-muted font-size-24 p-2\"\n        >\n          <i className=\"bx bx-chevron-left align-middle\"></i>\n        </Link>\n      </div>\n      <div className=\"flex-grow-1 overflow-hidden\">\n        <div className=\"d-flex align-items-center\">\n          <div\n            className={classnames(\n              \"flex-shrink-0\",\n              \"chat-user-img\",\n              \"align-self-center\",\n              \"me-3\",\n              \"ms-0\",\n              { online: isOnline }\n            )}\n          >\n            {chatUserDetails.profileImage ? (\n              <>\n                <img\n                  src={chatUserDetails.profileImage}\n                  className=\"rounded-circle avatar-sm\"\n                  alt=\"\"\n                />\n                <span\n                  className={classnames(\n                    \"user-status\",\n                    {\n                      \"bg-success\":\n                        chatUserDetails.status === STATUS_TYPES.ACTIVE,\n                    },\n                    {\n                      \"bg-warning\":\n                        chatUserDetails.status === STATUS_TYPES.AWAY,\n                    },\n                    {\n                      \"bg-danger\":\n                        chatUserDetails.status === STATUS_TYPES.DO_NOT_DISTURB,\n                    }\n                  )}\n                ></span>\n              </>\n            ) : (\n              <div className=\"avatar-sm align-self-center\">\n                <span\n                  className={classnames(\n                    \"avatar-title\",\n                    \"rounded-circle\",\n                    \"text-uppercase\",\n                    \"text-white\",\n                    colors[color]\n                  )}\n                >\n                  <span className=\"username\"> {shortName}</span>\n                  <span className=\"user-status\"></span>\n                </span>\n              </div>\n            )}\n          </div>\n          <div className=\"flex-grow-1 overflow-hidden\">\n            <h6 className=\"text-truncate mb-0 font-size-18\">\n              <Link\n                to=\"#\"\n                onClick={onOpenUserDetails}\n                className=\"user-profile-show text-reset\"\n              >\n                {fullName}\n              </Link>\n            </h6>\n            <p className=\"text-truncate text-muted mb-0\">\n              {isChannel ? (\n                <small>{members} Members</small>\n              ) : (\n                <small>{chatUserDetails.status}</small>\n              )}\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst Search = () => {\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const toggle = () => setDropdownOpen(!dropdownOpen);\n\n  return (\n    <Dropdown isOpen={dropdownOpen} toggle={toggle}>\n      <DropdownToggle\n        color=\"none\"\n        className=\"btn nav-btn dropdown-toggle\"\n        type=\"button\"\n      >\n        <i className=\"bx bx-search\"></i>\n      </DropdownToggle>\n      <DropdownMenu className=\"dropdown-menu p-0 dropdown-menu-end dropdown-menu-lg\">\n        <div className=\"search-box p-2\">\n          <Input type=\"text\" className=\"form-control\" placeholder=\"Search..\" />\n        </div>\n      </DropdownMenu>\n    </Dropdown>\n  );\n};\ninterface MoreProps {\n  onOpenAudio: () => void;\n  onOpenVideo: () => void;\n  onDelete: () => void;\n  isArchive: boolean;\n  onToggleArchive: () => void;\n}\nconst More = ({\n  onOpenAudio,\n  onOpenVideo,\n  onDelete,\n  isArchive,\n  onToggleArchive,\n}: MoreProps) => {\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const toggle = () => setDropdownOpen(!dropdownOpen);\n\n  return (\n    <Dropdown isOpen={dropdownOpen} toggle={toggle}>\n      <DropdownToggle color=\"none\" className=\"btn nav-btn\" type=\"button\">\n        <i className=\"bx bx-dots-vertical-rounded\"></i>\n      </DropdownToggle>\n      <DropdownMenu className=\"dropdown-menu-end\">\n        <DropdownItem\n          className=\"d-flex justify-content-between align-items-center d-lg-none user-profile-show\"\n          to=\"#\"\n        >\n          View Profile <i className=\"bx bx-user text-muted\"></i>\n        </DropdownItem>\n        <DropdownItem\n          className=\"d-flex justify-content-between align-items-center d-lg-none\"\n          to=\"#\"\n          onClick={onOpenAudio}\n        >\n          Audio <i className=\"bx bxs-phone-call text-muted\"></i>\n        </DropdownItem>\n        <DropdownItem\n          className=\"d-flex justify-content-between align-items-center d-lg-none\"\n          to=\"#\"\n          onClick={onOpenVideo}\n        >\n          Video <i className=\"bx bx-video text-muted\"></i>\n        </DropdownItem>\n        <DropdownItem\n          className=\"d-flex justify-content-between align-items-center\"\n          to=\"#\"\n          onClick={onToggleArchive}\n        >\n          {isArchive ? (\n            <>\n              Un-Archive <i className=\"bx bx-archive-out text-muted\"></i>\n            </>\n          ) : (\n            <>\n              Archive <i className=\"bx bx-archive text-muted\"></i>\n            </>\n          )}\n        </DropdownItem>\n        <DropdownItem\n          className=\"d-flex justify-content-between align-items-center\"\n          to=\"#\"\n        >\n          Muted <i className=\"bx bx-microphone-off text-muted\"></i>\n        </DropdownItem>\n        <DropdownItem\n          className=\"d-flex justify-content-between align-items-center\"\n          to=\"#\"\n          onClick={onDelete}\n        >\n          Delete <i className=\"bx bx-trash text-muted\"></i>\n        </DropdownItem>\n      </DropdownMenu>\n    </Dropdown>\n  );\n};\n\ninterface PinnedAlertProps {\n  onOpenPinnedTab: () => void;\n}\nconst PinnedAlert = ({ onOpenPinnedTab }: PinnedAlertProps) => {\n  const [visible, setVisible] = useState(true);\n\n  const onDismiss = () => setVisible(false);\n\n  return (\n    <Alert\n      color=\"warning\"\n      isOpen={visible}\n      toggle={onDismiss}\n      className=\"topbar-bookmark p-1 px-3 px-lg-4 pe-lg-5 pe-5 alert-dismiss-custom\"\n      role=\"alert\"\n    >\n      <div className=\"d-flex align-items-start bookmark-tabs\">\n        <div className=\"tab-list-link\">\n          <Link to=\"#\" className=\"tab-links\" onClick={onOpenPinnedTab}>\n            <i className=\"ri-pushpin-fill align-middle me-1\"></i> 10 Pinned\n          </Link>\n        </div>\n        <div id=\"add-bookmark\">\n          <Link to=\"#\" className=\"tab-links border-0 px-3\">\n            <i className=\"ri-add-fill align-middle\"></i>\n          </Link>\n        </div>\n        <UncontrolledTooltip target=\"add-bookmark\" placement=\"bottom\">\n          Add Bookmark\n        </UncontrolledTooltip>\n      </div>\n    </Alert>\n  );\n};\ninterface UserHeadProps {\n  chatUserDetails: any;\n  pinnedTabs: Array<PinTypes>;\n  onOpenUserDetails: () => void;\n  onDelete: () => void;\n  isChannel: boolean;\n  onToggleArchive: () => void;\n}\nconst UserHead = ({\n  chatUserDetails,\n  pinnedTabs,\n  onOpenUserDetails,\n  onDelete,\n  isChannel,\n  onToggleArchive,\n}: UserHeadProps) => {\n  // global store\n  const { dispatch } = useRedux();\n  /*\n    video call modal\n    */\n  const [isOpenVideoModal, setIsOpenVideoModal] = useState<boolean>(false);\n  const history = useHistory()\n  const onOpenVideo = () => {\n   // history.push('/WEB_UIKITS.html')\n    window.open(\"/WEB_UIKITS.html\", \"_blank\");\n\n  };\n  const onCloseVideo = () => {\n    setIsOpenVideoModal(false);\n  };\n\n  /*\n        audio call modal\n    */\n  const [isOpenAudioModal, setIsOpenAudioModal] = useState<boolean>(false);\n  const onOpenAudio = () => {\n    setIsOpenAudioModal(true);\n  };\n  const onCloseAudio = () => {\n    setIsOpenAudioModal(false);\n  };\n\n  /*\n  pinned tab modal\n  */\n  const [isOpenPinnedTabModal, setIsOpenPinnedTabModal] =\n    useState<boolean>(false);\n  const onOpenPinnedTab = () => {\n    setIsOpenPinnedTabModal(true);\n  };\n  const onClosePinnedTab = () => {\n    setIsOpenPinnedTabModal(false);\n  };\n\n  /*\n  mobile menu chat conversation close\n  */\n  const onCloseConversation = () => {\n    dispatch(changeSelectedChat(null));\n  };\n\n  return (\n    <div className=\"p-3 p-lg-4 user-chat-topbar\">\n      <Row className=\"align-items-center\">\n        <Col sm={4} className=\"col-8\">\n          <ProfileImage\n            chatUserDetails={chatUserDetails}\n            onCloseConversation={onCloseConversation}\n            onOpenUserDetails={onOpenUserDetails}\n            isChannel={isChannel}\n          />\n        </Col>\n        <Col sm={8} className=\"col-4\">\n          <ul className=\"list-inline user-chat-nav text-end mb-0\">\n            <li className=\"list-inline-item\">\n              <Search />\n            </li>\n\n            {!isChannel && (\n              <>\n                <li className=\"list-inline-item d-none d-lg-inline-block me-2 ms-0\">\n                  <Button\n                    type=\"button\"\n                    color=\"none\"\n                    className=\"btn nav-btn\"\n                    onClick={onOpenAudio}\n                  >\n                    <i className=\"bx bxs-phone-call\"></i>\n                  </Button>\n                </li>\n\n                <li className=\"list-inline-item d-none d-lg-inline-block me-2 ms-0\">\n                  <Button\n                    type=\"button\"\n                    color=\"none\"\n                    className=\"btn nav-btn\"\n                    onClick={onOpenVideo}\n                  >\n                    <i className=\"bx bx-video\"></i>\n                  </Button>\n                </li>\n              </>\n            )}\n\n            <li className=\"list-inline-item d-none d-lg-inline-block me-2 ms-0\">\n              <button\n                onClick={onOpenUserDetails}\n                type=\"button\"\n                className=\"btn nav-btn user-profile-show\"\n              >\n                <i className=\"bx bxs-info-circle\"></i>\n              </button>\n            </li>\n\n            <li className=\"list-inline-item\">\n              <More\n                onOpenAudio={onOpenAudio}\n                onOpenVideo={onOpenVideo}\n                onDelete={onDelete}\n                isArchive={chatUserDetails.isArchived}\n                onToggleArchive={onToggleArchive}\n              />\n            </li>\n          </ul>\n        </Col>\n      </Row>\n      {/* <PinnedAlert onOpenPinnedTab={onOpenPinnedTab} /> */}\n      {isOpenAudioModal && (\n        <AudioCallModal\n          isOpen={isOpenAudioModal}\n          onClose={onCloseAudio}\n          user={chatUserDetails}\n        />\n      )}\n      {/* {isOpenVideoModal && (\n        <VideoCallModal\n          isOpen={isOpenVideoModal}\n          onClose={onCloseVideo}\n          user={chatUserDetails}\n        />\n      )} */}\n      {isOpenPinnedTabModal && (\n        <AddPinnedTabModal\n          isOpen={isOpenPinnedTabModal}\n          onClose={onClosePinnedTab}\n          pinnedTabs={pinnedTabs}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default UserHead;\n","/home/olfa/Documents/pfe-main/client/src/components/AppSimpleBar.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/UserProfileDetails/ProfileUser.tsx",[],"/home/olfa/Documents/pfe-main/client/src/components/Media.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/UserProfileDetails/BasicDetails.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/UserProfileDetails/Status.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/UserProfileDetails/Groups.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/UserProfileDetails/Actions.tsx",[],"/home/olfa/Documents/pfe-main/client/src/components/AttachedFiles.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/UserProfileDetails/Members.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/ConversationUser/ChatInputSection/index.tsx",["720"],"import React, { useEffect, useState } from \"react\";\nimport { Alert, Form } from \"reactstrap\";\n// components\nimport StartButtons from \"./StartButtons\";\nimport InputSection from \"./InputSection\";\nimport EndButtons from \"./EndButtons\";\nimport MoreMenu from \"./MoreMenu\";\nimport Reply from \"./Reply\";\n\n// interface\nimport { MessagesTypes } from \"../../../../data/messages\";\nimport { useProfile } from \"../../../../hooks\";\n\ninterface IndexProps {\n  onSend: (data: any) => void;\n  replyData: null | MessagesTypes | undefined;\n  onSetReplyData: (reply: null | MessagesTypes | undefined) => void;\n  chatUserDetails: any;\n  sendMessageSocket : any;\n}\nconst Index = ({\n  onSend,\n  replyData,\n  onSetReplyData,\n  chatUserDetails,\n  sendMessageSocket\n}: IndexProps) => {\n  /*\n  more menu collapse\n  */\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const onToggle = () => {\n    setIsOpen(!isOpen);\n  };\n\n  /*\n  disable send button\n  */\n  const [disabled, setDisabled] = useState<boolean>(true);\n\n  /*\n  input text\n  */\n  const [text, setText] = useState<null | string>(null);\n  const onChangeText = (value: string) => {\n    setText(value);\n  };\n\n  /*\n  images\n  */\n  const [images, setImages] = useState<Array<any> | null | undefined>();\n  const onSelectImages = (images: Array<any>) => {\n    setImages(images);\n  };\n\n  /*\n  files\n  */\n  const [files, setFiles] = useState<Array<any> | null | undefined>();\n  const onSelectFiles = (files: Array<any>) => {\n    setFiles(files);\n  };\n  useEffect(() => {\n    if (text || images || files) {\n      setDisabled(false);\n    } else {\n      setDisabled(true);\n    }\n  }, [text, images, files]);\n\n  const onSubmit = () => {\n    let data: any = {};\n    if (text) {\n      data[\"text\"] = text;\n    }\n    //sendMessageSocket(text,chatUserDetails.id.toString())\n    if (images && images.length) {\n      const imgs = (images || []).map((i: any, key: number) => {\n        const src = URL.createObjectURL(i);\n        return {\n          id: key + 1,\n          downloadLink: src,\n        };\n      });\n      data[\"image\"] = imgs;\n    }\n\n    if (files && files.length) {\n      const fs = (files || []).map((f: any, key: number) => {\n        const src = URL.createObjectURL(f);\n        return {\n          id: key + 1,\n          name: f.name,\n          downloadLink: src,\n          desc: f.size,\n        };\n      });\n      data[\"attachments\"] = fs;\n    }\n\n    setText(\"\");\n    setImages(null);\n    setFiles(null);\n    onSend(data);\n  };\n\n  const onClearMedia = () => {\n    setImages(null);\n    setFiles(null);\n  };\n  return (\n    <div className=\"chat-input-section p-3 p-lg-4\">\n      <Form\n        id=\"chatinput-form\"\n        onSubmit={(e: any) => {\n          e.preventDefault();\n          onSubmit();\n        }}\n      >\n        <div className=\"row g-0 align-items-center\">\n          <div className=\"col-auto\">\n            <StartButtons\n              onToggle={onToggle}\n              text={text}\n              onChange={onChangeText}\n            />\n          </div>\n          <div className=\"col\">\n            <InputSection value={text} onChange={onChangeText} />\n          </div>\n          <div className=\"col-auto\">\n            <EndButtons onSubmit={onSubmit} disabled={disabled} />\n          </div>\n        </div>\n      </Form>\n\n      {(images && images.length) || (files && files.length) ? (\n        <Alert\n          isOpen={true}\n          toggle={onClearMedia}\n          color=\"secondary\"\n          className=\"alert-dismiss-custom \n        rounded-pill font-size-12 mb-1 selected-media\"\n          closeClassName=\"selected-media-close\"\n        >\n          <p className=\"me-2 mb-0\">\n            {images && !files && ` You have selected ${images.length} images`}\n            {files && !images && ` You have selected ${files.length} files`}\n            {files &&\n              images &&\n              ` You have selected ${files.length} files & ${images.length} images.`}\n          </p>\n        </Alert>\n      ) : null}\n\n      <MoreMenu\n        isOpen={isOpen}\n        onSelectImages={onSelectImages}\n        onSelectFiles={onSelectFiles}\n        onToggle={onToggle}\n      />\n\n      <Reply\n        reply={replyData}\n        onSetReplyData={onSetReplyData}\n        chatUserDetails={chatUserDetails}\n      />\n    </div>\n  );\n};\n\nexport default Index;\n","/home/olfa/Documents/pfe-main/client/src/components/VideoCallModal.jsx",["721","722","723","724","725","726","727","728","729","730","731","732","733","734","735","736","737","738","739"],"import React, { useContext, useEffect, useRef, useState } from \"react\";\n// import { Button, Modal, ModalBody } from \"reactstrap\";\nimport {\n  Button,\n  TextField,\n  Typography,\n  Container,\n  Paper,\n} from \"@material-ui/core\";\n\nimport { Grid, makeStyles } from \"@material-ui/core\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { Assignment, Phone, PhoneDisabled } from \"@material-ui/icons\";\n\n// interface\nimport { CallItem } from \"../data/calls\";\n\n//images\nimport imagePlaceholder from \"../assets/images/users/profile-placeholder.png\";\nimport { SocketContext } from \"../context/SocketContext\";\n\nimport { io } from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport { useHistory } from \"react-router-dom\";\n\n\n// interface VideoCallModalProps {\n//   user: CallItem | null;\n//   isOpen: boolean;\n//   onClose: () => void;\n// }\n\nconst VideoCallModal = ({ isOpen, onClose, user }) => {\n  const [RoomCode, setRoomCode] = useState(\"\");\n  const history = useHistory();\n\n  const submitCode = (e) => {\n    e.preventDefault();\n    history.push(`/room/${RoomCode}`);\n  };\n\n  return (\n    <div className=\" \">\n      {/* Navbar */}\n      {/* <Navbar /> */}\n      {/* Hero */}\n      <div className=\"relative h-screen \">\n        {/* Image */}\n        <div className=\"absolute h-full w-full flex overflow-hidden\">\n          {/* <img src={conf} className=\"object-cover  w-full h-full\" /> */}\n        </div>\n        {/* Overlay */}\n        <div className=\"absolute h-full w-full flex overflow-hidden bg-black/60\"></div>\n        {/* Hero Info */}\n        <div className=\"lg:flex lg:pt-20 flex-col items-center justify-center relative z-10 px-6 md:max-w-[90vw] mx-auto\">\n          {/* Main */}\n          <div className=\" flex flex-col items-center justify-center pb-8\">\n            <h1 className=\"text-[50px] md:text-[80px] text-white font-bold pt-12\">\n              Video Chat App\n            </h1>\n            <p className=\"text-[26px] text-white  -mt-2\">With ZegoCloud</p>\n          </div>\n\n          {/* Enter Code */}\n          <form\n            onSubmit={submitCode}\n            className=\"text-white md:pt-12 flex flex-col items-center justify-center\"\n          >\n            <div className=\" flex flex-col justify-center items-center\">\n              <label className=\"text-[30px] md:text-[40px] font-bold pt-6\">\n                Enter Room Code\n              </label>\n              <input\n                type=\"text\"\n                required\n                placeholder=\"Enter Room Code\"\n                value={RoomCode}\n                onChange={(e) => setRoomCode(e.target.value)}\n                className=\"py-1.5 md:py-2 px-4 rounded-full max-w-[14rem] mt-2 text-black md:mt-6 outline-0\"\n              />\n            </div>\n            <button\n              type=\"submit\"\n              className=\" bg-blue-500 hover:bg-blue-400 duration-100 ease-out font-bold w-[5rem] md:w-[7rem] rounded-full py-[5px] md:py-[7px] mt-2 md:mt-4 \"\n            >\n              Go\n            </button>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default VideoCallModal;\n","/home/olfa/Documents/pfe-main/client/src/utils/index.ts",[],"/home/olfa/Documents/pfe-main/client/src/components/ForwardModal.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Bookmark/BookMark.tsx",[],"/home/olfa/Documents/pfe-main/client/src/components/AddPinnedTabModal.tsx",[],"/home/olfa/Documents/pfe-main/client/src/components/LeftbarTitle.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Settings/Security.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Settings/Help.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Profile/SectionTitle.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Settings/Privacy.tsx",[],"/home/olfa/Documents/pfe-main/client/src/context/SocketContext.js",["740","741","742"],"import React, { createContext, useState, useRef, useEffect } from \"react\";\nimport { io } from \"socket.io-client\";\nimport Peer from \"simple-peer\";\n\nconst SocketContext = createContext();\n\nconst socket = io(\"http://localhost:5000/\");\n\nconst ContextProvider = ({ children }) => {\n  const [callAccepted, setCallAccepted] = useState(false);\n  const [callEnded, setCallEnded] = useState(false);\n  const [stream, setStream] = useState();\n  const [name, setName] = useState(\"\");\n  const [call, setCall] = useState({});\n  const [me, setMe] = useState(\"\");\n\n  const myVideo = useRef();\n  const userVideo = useRef();\n  const connectionRef = useRef();\n\n  useEffect(() => {\n    // navigator.mediaDevices\n    //   .getUserMedia({ video: true, audio: true })\n    //   .then((currentStream) => {\n    //     setStream(currentStream);\n\n    //     myVideo.current.srcObject = currentStream;\n    //   });\n\n    // socket.on(\"me\", (id) => setMe(id));\n\n    // socket.on(\"callUser\", ({ from, name: callerName, signal }) => {\n    //   setCall({ isReceivingCall: true, from, name: callerName, signal });\n    // });\n  }, []);\n\n  const answerCall = () => {\n    setCallAccepted(true);\n    const peer = new Peer({ initiator: false, trickle: false, stream });\n\n    peer.on(\"signal\", (data) => {\n      socket.emit(\"answerCall\", { signal: data, to: call.from });\n    });\n\n    peer.on(\"stream\", (currentStream) => {\n      userVideo.current.srcObject = currentStream;\n    });\n\n    peer.signal(call.signal);\n\n    connectionRef.current = peer;\n  };\n\n  const callUser = (id) => {\n    const peer = new Peer({ initiator: true, trickle: false, stream });\n\n    peer.on(\"signal\", (data) => {\n      socket.emit(\"callUser\", {\n        userToCall: id,\n        signalData: data,\n        from: me,\n        name,\n      });\n    });\n\n    peer.on(\"stream\", (currentStream) => {\n      userVideo.current.srcObject = currentStream;\n    });\n\n    socket.on(\"callAccepted\", (signal) => {\n      setCallAccepted(true);\n\n      peer.signal(signal);\n    });\n\n    connectionRef.current = peer;\n  };\n\n  const leaveCall = () => {\n    setCallEnded(true);\n\n    connectionRef.current.destroy();\n\n    window.location.reload();\n  };\n\n  return (\n    <SocketContext.Provider\n      value={{\n        call,\n        callAccepted,\n        myVideo,\n        userVideo,\n        stream,\n        name,\n        setName,\n        callEnded,\n        me,\n        callUser,\n        leaveCall,\n        answerCall,\n      }}\n    >\n      {children}\n    </SocketContext.Provider>\n  );\n};\n\nexport { ContextProvider, SocketContext };","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Settings/ThemeSettings.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Settings/UserProfile.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Settings/PersonalInfo.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Settings/UserCoverImage.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Contacts/Contact.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Contacts/ListHeader.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/ConversationUser/Message.tsx",["743"],"import React, { useState } from \"react\";\nimport {\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  UncontrolledDropdown,\n} from \"reactstrap\";\nimport classnames from \"classnames\";\nimport { Link } from \"react-router-dom\";\n\n// components\nimport LightBox from \"../../../components/LightBox\";\n\n//images\nimport imagePlaceholder from \"../../../assets/images/users/profile-placeholder.png\";\n\n// interface\nimport {\n  MessagesTypes,\n  ImageTypes,\n  AttachmentTypes,\n} from \"../../../data/messages\";\n\n// hooks\nimport { useProfile } from \"../../../hooks\";\n\n// utils\nimport { formateDate } from \"../../../utils\";\nimport RepliedMessage from \"./RepliedMessage\";\n\ninterface MenuProps {\n  onDelete: () => any;\n  onReply: () => any;\n  onForward: () => void;\n}\n\nconst Menu = ({ onDelete, onReply, onForward }: MenuProps) => {\n  return (\n    <UncontrolledDropdown className=\"align-self-start message-box-drop\">\n      <DropdownToggle className=\"btn btn-toggle\" role=\"button\" tag={\"a\"}>\n        <i className=\"ri-more-2-fill\"></i>\n      </DropdownToggle>\n      <DropdownMenu>\n        <DropdownItem\n          className=\"d-flex align-items-center justify-content-between\"\n          to=\"#\"\n          onClick={onReply}\n        >\n          Reply <i className=\"bx bx-share ms-2 text-muted\"></i>\n        </DropdownItem>\n        <DropdownItem\n          className=\"d-flex align-items-center justify-content-between\"\n          to=\"#\"\n          onClick={onForward}\n        >\n          Forward <i className=\"bx bx-share-alt ms-2 text-muted\"></i>\n        </DropdownItem>\n        <DropdownItem\n          className=\"d-flex align-items-center justify-content-between\"\n          to=\"#\"\n        >\n          Copy <i className=\"bx bx-copy text-muted ms-2\"></i>\n        </DropdownItem>\n        <DropdownItem\n          className=\"d-flex align-items-center justify-content-between\"\n          to=\"#\"\n        >\n          Bookmark <i className=\"bx bx-bookmarks text-muted ms-2\"></i>\n        </DropdownItem>\n        <DropdownItem\n          className=\"d-flex align-items-center justify-content-between\"\n          to=\"#\"\n        >\n          Mark as Unread <i className=\"bx bx-message-error text-muted ms-2\"></i>\n        </DropdownItem>\n        <DropdownItem\n          className=\"d-flex align-items-center justify-content-between delete-item\"\n          onClick={onDelete}\n        >\n          Delete <i className=\"bx bx-trash text-muted ms-2\"></i>\n        </DropdownItem>\n      </DropdownMenu>\n    </UncontrolledDropdown>\n  );\n};\ninterface ImageMoreMenuProps {\n  onDelete: () => void;\n}\nconst ImageMoreMenu = ({ onDelete }: ImageMoreMenuProps) => {\n  return (\n    <div className=\"message-img-link\">\n      <ul className=\"list-inline mb-0\">\n        <UncontrolledDropdown\n          tag=\"li\"\n          color=\"none\"\n          className=\"list-inline-item dropdown\"\n        >\n          <DropdownToggle tag=\"a\" role=\"button\" className=\"btn btn-toggle\">\n            <i className=\"bx bx-dots-horizontal-rounded\"></i>\n          </DropdownToggle>\n          <DropdownMenu>\n            <DropdownItem\n              className=\" d-flex align-items-center justify-content-between\"\n              to=\"#\"\n            >\n              Download <i className=\"bx bx-download ms-2 text-muted\"></i>\n            </DropdownItem>\n            <DropdownItem\n              className=\" d-flex align-items-center justify-content-between\"\n              to=\"#\"\n              data-bs-toggle=\"collapse\"\n              data-bs-target=\".replyCollapse\"\n            >\n              Reply <i className=\"bx bx-share ms-2 text-muted\"></i>\n            </DropdownItem>\n            <DropdownItem\n              className=\" d-flex align-items-center justify-content-between\"\n              to=\"#\"\n              data-bs-toggle=\"modal\"\n              data-bs-target=\".forwardModal\"\n            >\n              Forward <i className=\"bx bx-share-alt ms-2 text-muted\"></i>\n            </DropdownItem>\n            <DropdownItem\n              className=\" d-flex align-items-center justify-content-between\"\n              to=\"#\"\n            >\n              Bookmark <i className=\"bx bx-bookmarks text-muted ms-2\"></i>\n            </DropdownItem>\n            <DropdownItem\n              className=\" d-flex align-items-center justify-content-between delete-item\"\n              to=\"#\"\n              onClick={onDelete}\n            >\n              Delete <i className=\"bx bx-trash ms-2 text-muted\"></i>\n            </DropdownItem>\n          </DropdownMenu>\n        </UncontrolledDropdown>\n      </ul>\n    </div>\n  );\n};\n\ninterface ImageProps {\n  image: ImageTypes;\n  onImageClick: (id: number) => void;\n  index: number;\n  onDeleteImg: (imageId: string | number) => void;\n}\nconst Image = ({ image, onImageClick, index, onDeleteImg }: ImageProps) => {\n  const onDelete = () => {\n    onDeleteImg(image.id);\n  };\n  return (\n    <div className=\"message-img-list\">\n      <div>\n        <Link\n          className=\"popup-img d-inline-block\"\n          to={\"#\"}\n          onClick={() => onImageClick(index)}\n        >\n          <img src={image.downloadLink} alt=\"\" className=\"rounded border\" />\n        </Link>\n      </div>\n      <ImageMoreMenu onDelete={onDelete} />\n    </div>\n  );\n};\ninterface ImagesProps {\n  images: ImageTypes[];\n  onDeleteImg: (imageId: string | number) => void;\n}\nconst Images = ({ images, onDeleteImg }: ImagesProps) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [selected, setSelected] = useState(0);\n  const onImageClick = (id: number) => {\n    setSelected(id);\n    setIsOpen(true);\n  };\n  const onClose = () => {\n    setIsOpen(false);\n  };\n\n  return (\n    <>\n      <div className=\"message-img mb-0\">\n        {(images || []).map((image: ImageTypes, key: number) => (\n          <Image\n            image={image}\n            key={key}\n            index={key}\n            onImageClick={onImageClick}\n            onDeleteImg={onDeleteImg}\n          />\n        ))}\n      </div>\n      {isOpen && (\n        <LightBox\n          isOpen={isOpen}\n          images={images}\n          onClose={onClose}\n          defaultIdx={selected}\n        />\n      )}\n    </>\n  );\n};\n\ninterface AttachmentsProps {\n  attachments: AttachmentTypes[] | undefined;\n}\nconst Attachments = ({ attachments }: AttachmentsProps) => {\n  return (\n    <>\n      {(attachments || []).map((attachment: AttachmentTypes, key: number) => (\n        <div\n          key={key}\n          className={classnames(\"p-3\", \"border-primary\", \"border rounded-3\", {\n            \"mt-2\": key !== 0,\n          })}\n        >\n          <div className=\"d-flex align-items-center attached-file\">\n            <div className=\"flex-shrink-0 avatar-sm me-3 ms-0 attached-file-avatar\">\n              <div className=\"avatar-title bg-soft-primary text-primary rounded-circle font-size-20\">\n                <i className=\"ri-attachment-2\"></i>\n              </div>\n            </div>\n            <div className=\"flex-grow-1 overflow-hidden\">\n              <div className=\"text-start\">\n                <h5 className=\"font-size-14 mb-1\">{attachment.name}</h5>\n                <p className=\"text-muted text-truncate font-size-13 mb-0\">\n                  {attachment.desc}\n                </p>\n              </div>\n            </div>\n            <div className=\"flex-shrink-0 ms-4\">\n              <div className=\"d-flex gap-2 font-size-20 d-flex align-items-start\">\n                <div>\n                  <Link\n                    to={attachment.downloadLink ? attachment.downloadLink : \"#\"}\n                    className=\"text-muted\"\n                  >\n                    <i className=\"bx bxs-download\"></i>\n                  </Link>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      ))}\n    </>\n  );\n};\n\nconst Typing = () => {\n  return (\n    <p className=\"mb-0\">\n      typing\n      <span className=\"animate-typing\">\n        <span className=\"dot mx-1\"></span>\n        <span className=\"dot me-1\"></span>\n        <span className=\"dot\"></span>\n      </span>\n    </p>\n  );\n};\ninterface MessageProps {\n  message: MessagesTypes;\n  chatUserDetails: any;\n  onDelete: (messageId: string | number) => any;\n  onSetReplyData: (reply: null | MessagesTypes | undefined) => void;\n  isFromMe: boolean;\n  onOpenForward: (message: MessagesTypes) => void;\n  isChannel: boolean;\n  onDeleteImage: (messageId: string | number, imageId: string | number) => void;\n}\nconst Message = ({\n  message,\n  chatUserDetails,\n  onDelete,\n  onSetReplyData,\n  isFromMe,\n  onOpenForward,\n  isChannel,\n  onDeleteImage,\n}: MessageProps) => {\n  const { userProfile } = useProfile();\n  const hasImages = message.image && message.image.length;\n  const hasAttachments = message.attachments && message.attachments.length;\n  const hasText = message.text;\n  const isTyping = false;\n\n  const chatUserFullName = chatUserDetails.firstName\n    ? `${chatUserDetails.firstName} ${chatUserDetails.lastName}`\n    : \"-\";\n\n  const myProfile = userProfile.profileImage\n    ? userProfile.profileImage\n    : imagePlaceholder;\n  const channeluserProfile =\n    message.meta.userData && message.meta.userData.profileImage\n      ? message.meta.userData.profileImage\n      : imagePlaceholder;\n  const chatUserprofile = chatUserDetails.profileImage\n    ? chatUserDetails.profileImage\n    : imagePlaceholder;\n  const profile = isChannel ? channeluserProfile : chatUserprofile;\n  const date = \"\";\n  const isSent = message.meta.sent;\n  const isReceived = message.meta.received;\n  const isRead = message.meta.read;\n  const isForwarded = message.meta.isForwarded;\n  const channdelSenderFullname = message.meta.userData\n    ? `${message.meta.userData.firstName} ${message.meta.userData.lastName}`\n    : \"-\";\n  const fullName = isChannel ? channdelSenderFullname : chatUserFullName;\n  const onDeleteMessage = () => {\n    onDelete(message.mId);\n  };\n\n  const onClickReply = () => {\n    onSetReplyData(message);\n  };\n  const isRepliedMessage = message.replyOf;\n\n  const onForwardMessage = () => {\n    onOpenForward(message);\n  };\n\n  const onDeleteImg = (imageId: number | string) => {\n    onDeleteImage(message.mId, imageId);\n  };\n  return (\n    <li\n      className={classnames(\n        \"chat-list\",\n        { right: isFromMe },\n        { reply: isRepliedMessage }\n      )}\n    >\n      <div className=\"conversation-list\">\n        <div className=\"chat-avatar\">\n          <img src={isFromMe ? myProfile : profile} alt=\"\" />\n        </div>\n\n        <div className=\"user-chat-content\">\n          {hasImages && message.text && (\n            <div className=\"ctext-wrap\">\n              <div className=\"ctext-wrap-content\">\n                <p className=\"mb-0 ctext-content\">{message.text}</p>\n              </div>\n            </div>\n          )}\n          {isForwarded && (\n            <span\n              className={classnames(\n                \"me-1\",\n                \"text-muted\",\n                \"font-size-13\",\n                \"mb-1\",\n                \"d-block\"\n              )}\n            >\n              <i\n                className={classnames(\n                  \"ri\",\n                  \"ri-share-forward-line\",\n                  \"align-middle\",\n                  \"me-1\"\n                )}\n              ></i>\n              Forwarded\n            </span>\n          )}\n\n          <div className=\"ctext-wrap\">\n            {/* text message end */}\n\n            {/* image message start */}\n            {hasImages ? (\n              <>\n                <Images images={message.image!} onDeleteImg={onDeleteImg} />\n              </>\n            ) : (\n              <>\n                <div className=\"ctext-wrap-content\">\n                  {isRepliedMessage && (\n                    <RepliedMessage\n                      fullName={fullName}\n                      message={message}\n                      isFromMe={isFromMe}\n                    />\n                  )}\n                  \n                  {hasText && (\n                    <p className=\"mb-0 ctext-content\">{message.text}</p>\n                  )}\n\n                  {/* typing start */}\n                  {isTyping && <Typing />}\n\n                  {/* typing end */}\n                  {/* files message start */}\n                  {hasAttachments && (\n                    <Attachments attachments={message.attachments} />\n                  )}\n                  {/* files message end */}\n                </div>\n                <Menu\n                  onForward={onForwardMessage}\n                  onDelete={onDeleteMessage}\n                  onReply={onClickReply}\n                />\n              </>\n            )}\n\n            {/* image message end */}\n          </div>\n          <div className=\"conversation-name\">\n            {isFromMe ? (\n              <>\n                <span\n                  className={classnames(\n                    \"me-1\",\n                    { \"text-success\": isRead },\n                    { \"text-muted\": (isSent || isReceived) && !isRead }\n                  )}\n                >\n                  <i\n                    className={classnames(\n                      \"bx\",\n                      { \"bx-check-double\": isRead || isReceived },\n                      { \"bx-check\": isSent }\n                    )}\n                  ></i>\n                </span>\n                <small className={classnames(\"text-muted\", \"mb-0\", \"me-2\")}>\n                  {date}\n                </small>\n                You\n              </>\n            ) : (\n              <>\n                {fullName}\n                <small className={classnames(\"text-muted\", \"mb-0\", \"ms-2\")}>\n                  {date}\n                </small>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    </li>\n  );\n};\n\nexport default Message;\n","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/ConversationUser/ChatInputSection/Reply.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/ConversationUser/ChatInputSection/MoreMenu.tsx",[],"/home/olfa/Documents/pfe-main/client/src/utils/dateutils.ts",[],"/home/olfa/Documents/pfe-main/client/src/utils/arrayutils.ts",[],"/home/olfa/Documents/pfe-main/client/src/utils/DOMutils.ts",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/ConversationUser/ChatInputSection/InputSection.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/ConversationUser/ChatInputSection/EndButtons.tsx",[],"/home/olfa/Documents/pfe-main/client/src/components/EmptyStateResult.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/ConversationUser/ChatInputSection/StartButtons.tsx",[],"/home/olfa/Documents/pfe-main/client/src/components/InviteContactModal.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Calls/Call.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Chats/DirectMessages.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Chats/Chanels.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Chats/Archive.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Chats/Favourites.tsx",[],"/home/olfa/Documents/pfe-main/client/src/components/AddButton.tsx",[],"/home/olfa/Documents/pfe-main/client/src/components/ContactModal.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Profile/UserDescription.tsx",[],"/home/olfa/Documents/pfe-main/client/src/components/AddGroupModal.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Profile/MyProfile.tsx",[],"/home/olfa/Documents/pfe-main/client/src/components/UpdateDeleteBookmark.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Settings/DisplaySelect.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Settings/ThemeImage.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Settings/ThemeColor.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/ConversationUser/RepliedMessage.tsx",[],"/home/olfa/Documents/pfe-main/client/src/components/LightBox.tsx",[],"/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Chats/ChatUser.tsx",["744"],"import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport classnames from \"classnames\";\n\n// interface\nimport { UserTypes } from \"../../../data/chat\";\nimport { STATUS_TYPES } from \"../../../constants\";\n\ninterface ChatUserProps {\n  user: any;\n  selectedChat: string | number;\n  onSelectChat: (id: number | string) => void;\n}\nconst ChatUser = ({ user, selectedChat, onSelectChat }: ChatUserProps) => {\n  const fullName = `${user.firstName} ${user.lastName}`;\n  const shortName = `${user.firstName}${user.lastName}`;\n\n  const colors = [\n    \"bg-primary\",\n    \"bg-danger\",\n    \"bg-info\",\n    \"bg-warning\",\n    \"bg-secondary\",\n    \"bg-pink\",\n    \"bg-purple\",\n  ];\n  const [color] = useState(Math.floor(Math.random() * colors.length));\n  const isOnline = user.status && user.status === STATUS_TYPES.ACTIVE;\n  const unRead = user.meta && user.meta.unRead;\n\n  const isSelectedChat: boolean =\n    selectedChat && selectedChat === user.id ? true : false;\n  const onClick = () => {\n    onSelectChat(user.user);\n\n  };\n  return (\n    <li className={classnames({ active: isSelectedChat })} onClick={onClick}>\n      <Link to=\"#\" className={classnames({ \"unread-msg-user\": unRead })}>\n        <div className=\"d-flex align-items-center\">\n          <div\n            className={classnames(\n              \"chat-user-img\",\n              \"align-self-center\",\n              \"me-2\",\n              \"ms-0\",\n              { online: isOnline }\n            )}\n          >\n            {user.profileImage ? (\n              <>\n                <img\n                  src={user.profileImage}\n                  className=\"rounded-circle avatar-xs\"\n                  alt=\"\"\n                />\n                {isOnline && <span className=\"user-status\"></span>}\n              </>\n            ) : (\n              <div className=\"avatar-xs\">\n                <span\n                  className={classnames(\n                    \"avatar-title\",\n                    \"rounded-circle\",\n                    \"text-uppercase\",\n                    \"text-white\",\n                    colors[color]\n                  )}\n                >\n                  <span className=\"username\"> {shortName}</span>\n                  <span className=\"user-status\"></span>\n                </span>\n              </div>\n            )}\n          </div>\n          <div className=\"overflow-hidden\">\n            <p className=\"text-truncate mb-0\">{fullName}</p>\n          </div>\n          {unRead && unRead !== 0 ? (\n            <div className=\"ms-auto\">\n              <span className=\"badge badge-soft-dark rounded p-1\">\n                {unRead}\n              </span>\n            </div>\n          ) : null}\n        </div>\n      </Link>\n    </li>\n  );\n};\n\nexport default ChatUser;\n","/home/olfa/Documents/pfe-main/client/src/pages/Dashboard/Chats/ChatChannel.tsx",[],{"ruleId":"745","replacedBy":"746"},{"ruleId":"747","replacedBy":"748"},{"ruleId":"749","severity":1,"message":"750","line":8,"column":3,"nodeType":"751","messageId":"752","endLine":8,"endColumn":17},{"ruleId":"749","severity":1,"message":"753","line":40,"column":20,"nodeType":"751","messageId":"752","endLine":40,"endColumn":36},{"ruleId":"749","severity":1,"message":"754","line":2,"column":28,"nodeType":"751","messageId":"752","endLine":2,"endColumn":38},{"ruleId":"749","severity":1,"message":"755","line":12,"column":28,"nodeType":"751","messageId":"752","endLine":12,"endColumn":43},{"ruleId":"749","severity":1,"message":"756","line":15,"column":7,"nodeType":"751","messageId":"752","endLine":15,"endColumn":22},{"ruleId":"749","severity":1,"message":"757","line":18,"column":3,"nodeType":"751","messageId":"752","endLine":18,"endColumn":15},{"ruleId":"745","replacedBy":"746"},{"ruleId":"747","replacedBy":"748"},{"ruleId":"749","severity":1,"message":"758","line":3,"column":8,"nodeType":"751","messageId":"752","endLine":3,"endColumn":16},{"ruleId":"749","severity":1,"message":"759","line":15,"column":8,"nodeType":"751","messageId":"752","endLine":15,"endColumn":18},{"ruleId":"749","severity":1,"message":"760","line":21,"column":8,"nodeType":"751","messageId":"752","endLine":21,"endColumn":15},{"ruleId":"749","severity":1,"message":"761","line":14,"column":8,"nodeType":"751","messageId":"752","endLine":14,"endColumn":21},{"ruleId":"749","severity":1,"message":"762","line":25,"column":8,"nodeType":"751","messageId":"752","endLine":25,"endColumn":14},{"ruleId":"749","severity":1,"message":"763","line":31,"column":21,"nodeType":"751","messageId":"752","endLine":31,"endColumn":32},{"ruleId":"749","severity":1,"message":"764","line":44,"column":10,"nodeType":"751","messageId":"752","endLine":44,"endColumn":25},{"ruleId":"749","severity":1,"message":"765","line":45,"column":10,"nodeType":"751","messageId":"752","endLine":45,"endColumn":29},{"ruleId":"749","severity":1,"message":"766","line":45,"column":31,"nodeType":"751","messageId":"752","endLine":45,"endColumn":53},{"ruleId":"749","severity":1,"message":"767","line":47,"column":10,"nodeType":"751","messageId":"752","endLine":47,"endColumn":16},{"ruleId":"749","severity":1,"message":"768","line":47,"column":18,"nodeType":"751","messageId":"752","endLine":47,"endColumn":27},{"ruleId":"769","severity":1,"message":"770","line":153,"column":6,"nodeType":"771","endLine":153,"endColumn":8,"suggestions":"772"},{"ruleId":"769","severity":1,"message":"773","line":181,"column":6,"nodeType":"771","endLine":181,"endColumn":8,"suggestions":"774"},{"ruleId":"749","severity":1,"message":"775","line":26,"column":10,"nodeType":"751","messageId":"752","endLine":26,"endColumn":21},{"ruleId":"749","severity":1,"message":"776","line":50,"column":24,"nodeType":"751","messageId":"752","endLine":50,"endColumn":39},{"ruleId":"749","severity":1,"message":"777","line":21,"column":10,"nodeType":"751","messageId":"752","endLine":21,"endColumn":12},{"ruleId":"749","severity":1,"message":"778","line":22,"column":8,"nodeType":"751","messageId":"752","endLine":22,"endColumn":22},{"ruleId":"749","severity":1,"message":"779","line":262,"column":7,"nodeType":"751","messageId":"752","endLine":262,"endColumn":18},{"ruleId":"749","severity":1,"message":"780","line":314,"column":10,"nodeType":"751","messageId":"752","endLine":314,"endColumn":26},{"ruleId":"749","severity":1,"message":"781","line":315,"column":9,"nodeType":"751","messageId":"752","endLine":315,"endColumn":16},{"ruleId":"749","severity":1,"message":"782","line":321,"column":9,"nodeType":"751","messageId":"752","endLine":321,"endColumn":21},{"ruleId":"749","severity":1,"message":"783","line":341,"column":9,"nodeType":"751","messageId":"752","endLine":341,"endColumn":24},{"ruleId":"749","severity":1,"message":"784","line":12,"column":10,"nodeType":"751","messageId":"752","endLine":12,"endColumn":20},{"ruleId":"785","severity":1,"message":"786","line":1,"column":17,"nodeType":"751","messageId":"752","endLine":1,"endColumn":27},{"ruleId":"785","severity":1,"message":"787","line":1,"column":29,"nodeType":"751","messageId":"752","endLine":1,"endColumn":38},{"ruleId":"785","severity":1,"message":"788","line":1,"column":40,"nodeType":"751","messageId":"752","endLine":1,"endColumn":46},{"ruleId":"785","severity":1,"message":"789","line":4,"column":3,"nodeType":"751","messageId":"752","endLine":4,"endColumn":9},{"ruleId":"785","severity":1,"message":"790","line":5,"column":3,"nodeType":"751","messageId":"752","endLine":5,"endColumn":12},{"ruleId":"785","severity":1,"message":"791","line":6,"column":3,"nodeType":"751","messageId":"752","endLine":6,"endColumn":13},{"ruleId":"785","severity":1,"message":"792","line":7,"column":3,"nodeType":"751","messageId":"752","endLine":7,"endColumn":12},{"ruleId":"785","severity":1,"message":"793","line":8,"column":3,"nodeType":"751","messageId":"752","endLine":8,"endColumn":8},{"ruleId":"785","severity":1,"message":"794","line":11,"column":10,"nodeType":"751","messageId":"752","endLine":11,"endColumn":14},{"ruleId":"785","severity":1,"message":"795","line":11,"column":16,"nodeType":"751","messageId":"752","endLine":11,"endColumn":26},{"ruleId":"785","severity":1,"message":"796","line":12,"column":10,"nodeType":"751","messageId":"752","endLine":12,"endColumn":25},{"ruleId":"785","severity":1,"message":"797","line":13,"column":10,"nodeType":"751","messageId":"752","endLine":13,"endColumn":20},{"ruleId":"785","severity":1,"message":"798","line":13,"column":22,"nodeType":"751","messageId":"752","endLine":13,"endColumn":27},{"ruleId":"785","severity":1,"message":"799","line":13,"column":29,"nodeType":"751","messageId":"752","endLine":13,"endColumn":42},{"ruleId":"785","severity":1,"message":"800","line":16,"column":10,"nodeType":"751","messageId":"752","endLine":16,"endColumn":18},{"ruleId":"785","severity":1,"message":"801","line":19,"column":8,"nodeType":"751","messageId":"752","endLine":19,"endColumn":24},{"ruleId":"785","severity":1,"message":"802","line":20,"column":10,"nodeType":"751","messageId":"752","endLine":20,"endColumn":23},{"ruleId":"785","severity":1,"message":"777","line":22,"column":10,"nodeType":"751","messageId":"752","endLine":22,"endColumn":12},{"ruleId":"785","severity":1,"message":"803","line":23,"column":8,"nodeType":"751","messageId":"752","endLine":23,"endColumn":12},{"ruleId":"785","severity":1,"message":"804","line":12,"column":18,"nodeType":"751","messageId":"752","endLine":12,"endColumn":27},{"ruleId":"785","severity":1,"message":"805","line":14,"column":16,"nodeType":"751","messageId":"752","endLine":14,"endColumn":23},{"ruleId":"785","severity":1,"message":"806","line":15,"column":14,"nodeType":"751","messageId":"752","endLine":15,"endColumn":19},{"ruleId":"749","severity":1,"message":"807","line":28,"column":10,"nodeType":"751","messageId":"752","endLine":28,"endColumn":21},{"ruleId":"749","severity":1,"message":"808","line":6,"column":10,"nodeType":"751","messageId":"752","endLine":6,"endColumn":19},"no-native-reassign",["809"],"no-negated-in-lhs",["810"],"@typescript-eslint/no-unused-vars","'profileDetails' is defined but never used.","Identifier","unusedVar","'onChangeSettings' is defined but never used.","'ChatsState' is defined but never used.","'postJwtRegister' is defined but never used.","'fireBaseBackend' is assigned a value but never used.","'postJwtLogin' is defined but never used.","'Gravatar' is defined but never used.","'AuthHeader' is defined but never used.","'avatar1' is defined but never used.","'FacebookLogin' is defined but never used.","'config' is defined but never used.","'socialLogin' is defined but never used.","'socketConnected' is assigned a value but never used.","'selectedChatCompare' is assigned a value but never used.","'setSelectedChatCompare' is assigned a value but never used.","'typing' is assigned a value but never used.","'setTyping' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'chatUserDetails' and 'userProfile'. Either include them or remove the dependency array.","ArrayExpression",["811"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["812"],"'divideByKey' is defined but never used.","'setContactsData' is assigned a value but never used.","'io' is defined but never used.","'VideoCallModal' is defined but never used.","'PinnedAlert' is assigned a value but never used.","'isOpenVideoModal' is assigned a value but never used.","'history' is assigned a value but never used.","'onCloseVideo' is assigned a value but never used.","'onOpenPinnedTab' is assigned a value but never used.","'useProfile' is defined but never used.","no-unused-vars","'useContext' is defined but never used.","'useEffect' is defined but never used.","'useRef' is defined but never used.","'Button' is defined but never used.","'TextField' is defined but never used.","'Typography' is defined but never used.","'Container' is defined but never used.","'Paper' is defined but never used.","'Grid' is defined but never used.","'makeStyles' is defined but never used.","'CopyToClipboard' is defined but never used.","'Assignment' is defined but never used.","'Phone' is defined but never used.","'PhoneDisabled' is defined but never used.","'CallItem' is defined but never used.","'imagePlaceholder' is defined but never used.","'SocketContext' is defined but never used.","'Peer' is defined but never used.","'setStream' is assigned a value but never used.","'setCall' is assigned a value but never used.","'setMe' is assigned a value but never used.","'formateDate' is defined but never used.","'UserTypes' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"813","fix":"814"},{"desc":"815","fix":"816"},"Update the dependencies array to be: [chatUserDetails, userProfile]",{"range":"817","text":"818"},"Update the dependencies array to be: [dispatch]",{"range":"819","text":"820"},[3949,3951],"[chatUserDetails, userProfile]",[4571,4573],"[dispatch]"]